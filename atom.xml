<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟Miao</title>
  <subtitle>start from a newb...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.newbmiao.com/"/>
  <updated>2017-05-16T11:11:03.000Z</updated>
  <id>http://blog.newbmiao.com/</id>
  
  <author>
    <name>菜鸟Miao</name>
    <email>newbvirgil@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>跨域登录态共享</title>
    <link href="http://blog.newbmiao.com/2017/05/16/share-the-login-status-under-cors.html"/>
    <id>http://blog.newbmiao.com/2017/05/16/share-the-login-status-under-cors.html</id>
    <published>2017-05-16T10:53:38.000Z</published>
    <updated>2017-05-16T11:11:03.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="登录态共享"><a href="#登录态共享" class="headerlink" title="登录态共享"></a>登录态共享</h1><p>登录态共享？什么鬼，不知道的就可以不用看啦，需要时再说，说不定到时也用不到，笑脸~~</p>
<h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>解决多个子系统中共用模块（比方说工单系统）可以共享子系统的登录态<br>为简化问题，设定场景：<br>登录系统A，点工单操作跳转系统B，并且无需登录（至于系统登录何时失效暂不考虑）</p>
<p>还有：别问我为什么不用单点登录(SSO)，那个，不想说，笑脸~~</p>
<p>先别废话，直接代码上</p>
<a id="more"></a>
<h2 id="系统A"><a href="#系统A" class="headerlink" title="系统A"></a>系统A</h2><h3 id="跳转自动登录"><a href="#跳转自动登录" class="headerlink" title="跳转自动登录"></a>跳转自动登录</h3><hr>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//假定在 http://shop.laradock.dev/ 点击工单button执行</span></div><div class="line"><span class="keyword">var</span> taskApi=<span class="string">'http://localhost:10100/'</span>;<span class="comment">//工单系统地址</span></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: taskApi+<span class="string">'login'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">"post"</span>,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">username</span>:<span class="string">'newbmiao'</span>,<span class="comment">//账户唯一标识</span></div><div class="line">        refer:location.href,<span class="comment">//可用于工单系统跳回A使用</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">xhrFields</span>: &#123;</div><div class="line">        <span class="attr">withCredentials</span>: <span class="literal">true</span> <span class="comment">//大招在这里</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(res);</div><div class="line">        <span class="comment">//自动登录成功后跳转（什么？已经登陆了？！）</span></div><div class="line">        <span class="comment">//location.href=taskApi;</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<hr>
<h2 id="工单系统B"><a href="#工单系统B" class="headerlink" title="工单系统B"></a>工单系统B</h2><h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><p>不用想的是,接到username，校验是管理员等等，ok的话设置到session返回给系统A</p>
<ul>
<li>问题1：系统A怎么跨域请求</li>
</ul>
<p>有人想到<code>Access-Control-Allow-Origin</code>了，就是这个</p>
<ul>
<li>问题2：服务器B<code>session</code>设置没问题，怎么系统A能拿到<code>session</code>的<code>cookie</code> ？拿到了再请求服务器B,<code>cookie</code>能拿到么？</li>
</ul>
<p>好问题，还是cors解决了，不过这个是双向的</p>
<p><code>就是客户端说：我请求会带你给我的cookie，服务器说：我也允许读取你传递的cookie</code><br>当然不是什么cookie都能回传，只能是系统B设置的cookie（而且系统B其实能设置成功的话，也必须将<code>Access-Control-Allow-Origin</code>明确指定为系统A）</p>
<p>有没有晕，多读几遍就好了</p>
<blockquote>
<p>附文一篇巩固下：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享CORS详解</a></p>
</blockquote>
<p>思路对了，最后就是就是怎么按cors设置了</p>
<hr>
<figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按go (beego) 代码写的，但很简单，相信能看懂</span></div><div class="line"><span class="comment">//看不懂，好吧，请喷吧，笑脸~~</span></div><div class="line"></div><div class="line"><span class="comment">//in_array</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">InArray</span><span class="params">(val <span class="keyword">string</span>, array []<span class="keyword">string</span>)</span> <span class="params">(exists <span class="keyword">bool</span>, index <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    exists = <span class="literal">false</span></div><div class="line">    index = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> array &#123;</div><div class="line">        <span class="keyword">if</span> val == v &#123;</div><div class="line">            index = i</div><div class="line">            exists = <span class="literal">true</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//这里是重点</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *BaseController)</span> <span class="title">addAccessControlHeader</span><span class="params">()</span></span> &#123;</div><div class="line">    r := c.Ctx.Request</div><div class="line">    w := c.Ctx.ResponseWriter</div><div class="line">    <span class="comment">//假定配置好的两个系统域名</span></div><div class="line">    originUrls:= <span class="string">"http://shop.laradock.dev/,http://another-shop.laradock.dev/"</span></div><div class="line">    originArr := strings.Split(originUrls, <span class="string">","</span>)</div><div class="line">    Origin := r.Header.Get(<span class="string">"Origin"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="number">0</span> != <span class="built_in">len</span>(Origin) &#123;</div><div class="line">        isExist, index := help.InArray(Origin, originArr)</div><div class="line">        <span class="keyword">if</span> !isExist &#123;</div><div class="line">            c.echoJson(<span class="string">"请求未授权"</span>, <span class="literal">nil</span>, <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Origin"</span>, originArr[index])</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST,GET,OPTIONS"</span>)</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with,content-type"</span>)</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//json输出</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *BaseController)</span> <span class="title">echoJson</span><span class="params">(data <span class="keyword">interface</span>&#123;&#125;, msg <span class="keyword">string</span>, code <span class="keyword">int</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">    c.addAccessControlHeader()</div><div class="line">    ret := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">    ret[<span class="string">"data"</span>] = data</div><div class="line">    ret[<span class="string">"msg"</span>] = msg</div><div class="line">    ret[<span class="string">"code"</span>] = code</div><div class="line">    c.Data[<span class="string">"json"</span>] = ret</div><div class="line">    c.ServeJSON()</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<hr>
<h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><blockquote>
<p>题外话，go很不错，只是还没玩明白啊，继续挖坑</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      跨域登录态共享
    
    </summary>
    
      <category term="web" scheme="http://blog.newbmiao.com/categories/web/"/>
    
      <category term="practice" scheme="http://blog.newbmiao.com/categories/web/practice/"/>
    
    
      <category term="cors" scheme="http://blog.newbmiao.com/tags/cors/"/>
    
      <category term="go" scheme="http://blog.newbmiao.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>laradock开发实践</title>
    <link href="http://blog.newbmiao.com/2017/03/14/laradock-in-action.html"/>
    <id>http://blog.newbmiao.com/2017/03/14/laradock-in-action.html</id>
    <published>2017-03-14T07:27:27.000Z</published>
    <updated>2017-03-14T08:27:14.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>此文是我用marp展示ppt拿过来的，可能看着不太明白，抱歉，我太懒~</p>
</blockquote>
<h1 id="laradock"><a href="#laradock" class="headerlink" title="laradock"></a>laradock</h1><ul>
<li><h3 id="DIY-do-it-yourself"><a href="#DIY-do-it-yourself" class="headerlink" title="DIY(do it yourself)"></a>DIY(do it yourself)</h3></li>
<li><h3 id="DRY-dont-repeat-youself"><a href="#DRY-dont-repeat-youself" class="headerlink" title="DRY(dont repeat youself)"></a>DRY(dont repeat youself)</h3></li>
<li><h3 id="人生苦短，我用docker"><a href="#人生苦短，我用docker" class="headerlink" title="人生苦短，我用docker"></a>人生苦短，我用docker</h3></li>
</ul>
<hr>
<a id="more"></a>
<h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul>
<li>易组合：在PHP版本切换、数据库引擎、软件组合</li>
<li>分而治之：一个软件，一个容器，比如：PHP-FPM, NGINX, PHP-CLI…</li>
<li>可信镜像：所有镜像继承自一个官方基础镜像（Trusted base Images）</li>
<li>方便配置，且使用最新Docker Compose</li>
<li>每周都会有更新…</li>
<li><del>快速的镜像构建</del>(GFW)</li>
</ul>
<blockquote>
<p><a href="https://github.com/laradock/laradock/blob/master/README-zh.md" target="_blank" rel="external">文档</a></p>
</blockquote>
<hr>
<h2 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h2><ul>
<li>2013年初开源项目，基于go语言</li>
<li>轻量级</li>
<li>操作系统虚拟化</li>
</ul>
<hr>
<h2 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h2><table>
<thead>
<tr>
<th style="text-align:center">特性</th>
<th style="text-align:center">容器</th>
<th style="text-align:center">虚拟机</th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:center">启动</td>
<td style="text-align:center">秒级</td>
<td style="text-align:center">分钟级</td>
</tr>
<tr>
<td style="text-align:center">硬盘使用</td>
<td style="text-align:center">一般为 MB</td>
<td style="text-align:center">一般为 GB</td>
</tr>
<tr>
<td style="text-align:center">性能</td>
<td style="text-align:center">接近原生</td>
<td style="text-align:center">弱于</td>
</tr>
<tr>
<td style="text-align:center">系统支持量</td>
<td style="text-align:center">单机支持上千个容</td>
<td style="text-align:center">一般几十个</td>
</tr>
</tbody>
</table>
<hr>
<p><img src="http://media.newbmiao.com/blog/virtualization.png" alt="虚拟机"><br><img src="http://media.newbmiao.com/blog/docker.png" alt="docker"></p>
<hr>
<h2 id="三个基本概念"><a href="#三个基本概念" class="headerlink" title="三个基本概念"></a>三个基本概念</h2><ul>
<li>镜像（Image）</li>
<li>容器（Container）</li>
<li>仓库（Repository）</li>
</ul>
<blockquote>
<p>镜像是只读的，容器在启动的时候创建一层可写层作为最上层。<br>注意一个镜像不能超过 127 层</p>
<p><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">安装</a></p>
</blockquote>
<hr>
<h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#镜像</span></div><div class="line">docker images <span class="comment">#列出本地镜像</span></div><div class="line">docker rmi training/sinatra <span class="comment">#删除（在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器）</span></div><div class="line">docker run -t -i ubuntu:<span class="number">14.04</span> /bin/bash <span class="comment">#</span></div><div class="line">docker commit -m <span class="string">"Added json gem"</span> -a <span class="string">"Docker Newbee"</span> <span class="number">0</span>b2616b0e5a8 ouruser/sinatra:v2 <span class="comment">#更新镜像</span></div><div class="line">docker <span class="keyword">tag</span> <span class="title">5db5f8471261</span> ouruser/sinatra:devel <span class="comment">#修改标签</span></div><div class="line">docker build $&#123;dockerfile_dir&#125; <span class="comment">#Dockerfile 构建</span></div><div class="line">docker save -o ubuntu_14.<span class="number">04</span>.tar ubuntu:<span class="number">14.04</span> <span class="comment">#保存</span></div><div class="line">docker load --input ubuntu_14.<span class="number">04</span>.tar <span class="comment">#导入</span></div><div class="line"><span class="comment">#容器</span></div><div class="line">docker ps <span class="comment">#查看容器信息</span></div><div class="line">docker rm <span class="comment">#删掉容器（-f 删除运行中）</span></div><div class="line">docker inspect <span class="comment">#查看指定容器详细信息（可获取ip，pid等信息）</span></div><div class="line">docker logs insane_babbage <span class="comment">#查看容器log</span></div><div class="line">docker port CONTAINER [PRIVATE_PORT[/PROTO]] <span class="comment">#查看端口映射</span></div><div class="line">docker <span class="literal">start</span>|<span class="literal">stop</span>|restart insane_babbage <span class="comment">#启动终止重启</span></div><div class="line">docker attach insane_babbage <span class="comment">#进入后台运行的容器 -d（推荐nsenter）</span></div><div class="line">docker export <span class="number">7691</span>a814370e &gt; ubuntu.tar <span class="comment">#导出快照</span></div><div class="line">cat ubuntu.tar | sudo docker import - test/ubuntu:v1.<span class="number">0</span> <span class="comment">#导入快照</span></div><div class="line"><span class="comment">## docker hub </span></div><div class="line">docker search <span class="comment">#搜索镜像</span></div><div class="line">docker pull <span class="comment">#下载</span></div><div class="line">docker push <span class="comment">#推送（需登录）</span></div></pre></td></tr></table></figure>
<hr>
<h2 id="laradock的结构"><a href="#laradock的结构" class="headerlink" title="laradock的结构"></a>laradock的结构</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">├── laradock </div><div class="line">│   ├── _guides</div><div class="line">│   ├── docker-compose.yml <span class="meta">#compose 配置</span></div><div class="line">│   ├── docs</div><div class="line">│   ├── elasticsearch</div><div class="line">│   ├── hhvm</div><div class="line">│   ├── logs  <span class="meta">#nginx日志；xdebug日志</span></div><div class="line">│   ├── mariadb</div><div class="line">│   ├── memcached</div><div class="line">│   ├── mongo</div><div class="line">│   ├── mysql</div><div class="line">│   ├── nginx <span class="meta"># nginx 容器配置</span></div><div class="line">│   ├── php-fpm <span class="meta">#php-fpm 容器配置</span></div><div class="line">│   ├── phpmyadmin</div><div class="line">│   ├── rabbitmq</div><div class="line">│   ├── redis</div><div class="line">│   ├── workspace <span class="meta">#工作台</span></div><div class="line">│   └── xdebugPhpFpm <span class="meta">#动态设置 xdebug 是否启用（需 build 时先安装）</span></div><div class="line">└── website <span class="meta">#网站项目</span></div><div class="line">    ├── afp</div><div class="line">    ├── ams</div><div class="line">    ├── inncms</div></pre></td></tr></table></figure>
<hr>
<h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><h3 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h3><blockquote>
<p><a href="https://raw.githubusercontent.com/yeasy/docker_practice/master/_local/.bashrc_docker" target="_blank" rel="external">docker快捷命令：.bashrc_docker</a></p>
</blockquote>
<h3 id="xdebug监听不变的host-ip"><a href="#xdebug监听不变的host-ip" class="headerlink" title="xdebug监听不变的host ip"></a>xdebug监听不变的host ip</h3><blockquote>
<p><a href="http://stackoverflow.com/questions/22944631/how-to-get-the-ip-address-of-the-docker-host-from-inside-a-docker-container/39026136#39026136" target="_blank" rel="external">set host ip never changed</a></p>
</blockquote>
<h3 id="本地dns泛解析"><a href="#本地dns泛解析" class="headerlink" title="本地dns泛解析"></a>本地dns泛解析</h3><blockquote>
<p><a href="https://blog.netsh.org/posts/mac-os-x-dnsmasq_1762.netsh.html" target="_blank" rel="external">hosts泛解析</a><br><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 这里ams不是laravel框架，我做了过滤</div><div class="line">server_name ~^(?&lt;<span class="keyword">project</span>&gt;\b(?!ams\b).+)\.laradock\.dev$;</div><div class="line">root <span class="regexp">/var/</span>www<span class="regexp">/$project/</span><span class="keyword">public</span>;</div></pre></td></tr></table></figure></p>
</blockquote>
<hr>
<h4 id="安装操作"><a href="#安装操作" class="headerlink" title="安装操作"></a>安装操作</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 dnsmasq</span></div><div class="line">brew install dnsmasq</div><div class="line">sudo cp -v $<span class="params">(brew --prefix dnsmasq)</span><span class="string">/homebrew.mxcl.dnsmasq.plist</span> <span class="string">/Library/LaunchDaemons</span></div><div class="line"></div><div class="line"><span class="comment"># 添加本地dns解析服务器</span></div><div class="line">[ -d <span class="string">/etc/resolver</span> ] || sudo mkdir -v <span class="string">/etc/resolver</span></div><div class="line">sudo bash -c '<span class="keyword">echo</span> <span class="string">"nameserver 127.0.0.1"</span> &gt; <span class="string">/etc/resolver/dev</span>'</div><div class="line"></div><div class="line"><span class="comment"># 配置泛解析 (域名后缀自行指定，这里为 .dev)</span></div><div class="line">sudo mkdir -p $<span class="params">(brew --prefix)</span><span class="string">/etc/</span></div><div class="line">cat &gt; $<span class="params">(brew --prefix)</span><span class="string">/etc/dnsmasq.conf</span> &lt;&lt;-EOF</div><div class="line">listen-address=127.0.0.1</div><div class="line">address=<span class="string">/.dev/127.0.0.1</span></div><div class="line"><span class="comment"># keep nameserver order of resolv.conf</span></div><div class="line">strict-order</div><div class="line">EOF</div><div class="line"></div><div class="line"><span class="comment"># 启用dnsmasq</span></div><div class="line">sudo launchctl load -w <span class="string">/Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist</span></div><div class="line"></div><div class="line"><span class="comment"># 若更新dnsmasq后，需重启以应用</span></div><div class="line">sudo launchctl stop homebrew.mxcl.dnsmasq</div><div class="line">sudo launchctl start homebrew.mxcl.dnsmasq</div><div class="line">sudo killall -HUP mDNSResponder</div></pre></td></tr></table></figure>
<hr>
<h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><ul>
<li><p>docker for mac</p>
<blockquote>
<ul>
<li><a href="https://docs.docker.com/docker-for-mac/install/#download-docker-for-mac" target="_blank" rel="external">安装</a></li>
</ul>
</blockquote>
</li>
<li><p>基于开发的一些修改（踩坑）</p>
<blockquote>
<ul>
<li>git@github.com:NewbMiao/laradock.git (dev分支，master定期手动同步官方分支)<blockquote>
<ul>
<li>xdebug 配置</li>
<li>全局安装composer及<code>hirak/prestissimo</code>(可加速composer）</li>
<li>ssh开启 可配合phpstorm 指定CLI interpreter</li>
<li>关闭nginx <code>open_file_cache</code></li>
<li>composer国内地址替换；aliyun源替换</li>
</ul>
</blockquote>
</li>
</ul>
</blockquote>
</li>
</ul>
<blockquote>
<ul>
<li><p>git@github.com:laradock/laradock.git （官方分支）</p>
</li>
<li><p>能番羽墙最好，不然，可以参考下边</p>
<figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">## apt-get替换源</span></div><div class="line"><span class="meta"># 另外，在国内使用 docker（以 ubuntu 为例）， Dockerfile 第一个执行的命令最好为：</span></div><div class="line">RUN sed -i <span class="string">'s/archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list \</div><div class="line">    &amp;&amp; apt-<span class="keyword">get</span> update --fix-missing \</div><div class="line">    &amp;&amp; apt-<span class="keyword">get</span> -y upgrade</div><div class="line"></div><div class="line"><span class="meta">## composer替换源</span></div><div class="line">RUN composer config -g repo.packagist composer https:<span class="comment">//packagist.phpcomposer.com</span></div><div class="line"></div><div class="line"><span class="meta">## ssh workspace（推荐还是exec方式）</span></div><div class="line">chmod <span class="number">0600</span> workspace/insecure_id_rsa</div><div class="line">ssh -i workspace/insecure_id_rsa -v root@laradock.dev -p2222</div></pre></td></tr></table></figure></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      laradock开发实践
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/categories/php/tool/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="laradock" scheme="http://blog.newbmiao.com/tags/laradock/"/>
    
      <category term="docker" scheme="http://blog.newbmiao.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>imagick中文自动换行和base64串上传图片</title>
    <link href="http://blog.newbmiao.com/2017/02/17/auto-wrap-chinese-use-imagick-and-upload-image-by-base64-encode-str.html"/>
    <id>http://blog.newbmiao.com/2017/02/17/auto-wrap-chinese-use-imagick-and-upload-image-by-base64-encode-str.html</id>
    <published>2017-02-17T08:17:26.000Z</published>
    <updated>2017-02-17T08:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文分享两个:</p>
<ul>
<li>imagick中中文自动换行</li>
<li>base64串的图片上传</li>
</ul>
<p>没啥太大关联，只是工作用到记录下，供需要的用</p>
<h2 id="imagick中中文自动换行"><a href="#imagick中中文自动换行" class="headerlink" title="imagick中中文自动换行"></a>imagick中中文自动换行</h2><p>首先是imgick的类库使用推荐 <a href="https://github.com/Intervention/image" target="_blank" rel="external">Intervention/image</a></p>
<a id="more"></a>
<figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$canvas = Image::canvas(<span class="number">500</span>,<span class="number">500</span>,<span class="string">'#e2e2e2'</span>);</div><div class="line"></div><div class="line">$txt = <span class="keyword">self</span>::autoWrap($fontSize, <span class="string">'./msyh.ttf'</span>, $text,$lineWidth);</div><div class="line"><span class="comment">//$txt = array_slice(explode(PHP_EOL, $txt), 0, 2);//这里是处理需要显示几行</span></div><div class="line"><span class="comment">//$txt = implode(PHP_EOL, $txt);</span></div><div class="line"></div><div class="line"><span class="comment">//这里x，y设置为要显示文字左上角线的中心点坐标就可以，$font-&gt;align('center');会自动让文字左右居中</span></div><div class="line">$canvas-&gt;text($txt, $x, $y, <span class="function"><span class="keyword">function</span> <span class="params">(Font $font)</span> <span class="title">use</span> <span class="params">($t)</span> </span>&#123;</div><div class="line">    $font-&gt;file(<span class="string">'./msyh.ttf'</span>);<span class="comment">//imgick作为driver需配置字体文件</span></div><div class="line">    $font-&gt;size($t[<span class="string">'size'</span>]);<span class="comment">//$t是字体相关配置</span></div><div class="line">    $font-&gt;color($t[<span class="string">'color'</span>]);</div><div class="line">    $font-&gt;align(<span class="string">'center'</span>);</div><div class="line">    $font-&gt;valign(<span class="string">'top'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure>
<p>重点是如何计算每个字的长度,然后通过行宽断句<br><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据预设宽度让文字自动换行</div><div class="line"> * <span class="doctag">@param</span> int $fontsize 字体大小</div><div class="line"> * <span class="doctag">@param</span> string $ttfpath 字体名称</div><div class="line"> * <span class="doctag">@param</span> string $str 字符串</div><div class="line"> * <span class="doctag">@param</span> int $width 预设宽度</div><div class="line"> * <span class="doctag">@param</span> int $fontangle 角度</div><div class="line"> * <span class="doctag">@param</span> string $charset 编码</div><div class="line"> * <span class="doctag">@return</span> string $_string  字符串</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoWrap</span><span class="params">($fontsize, $ttfpath, $str, $width, $fontangle = <span class="number">0</span>, $charset = <span class="string">'utf-8'</span>)</span></span></div><div class="line">&#123;</div><div class="line">    $_string = <span class="string">""</span>;</div><div class="line">    $_width = <span class="number">0</span>;</div><div class="line">    $temp = <span class="keyword">self</span>::chararray($str, $charset);</div><div class="line">    <span class="keyword">foreach</span> ($temp[<span class="number">0</span>] <span class="keyword">as</span> $v) &#123;</div><div class="line">        $w = <span class="keyword">self</span>::charWidth($fontsize, $fontangle, $v, $ttfpath);</div><div class="line">        $_width += intval($w);</div><div class="line">        <span class="keyword">if</span> (($_width &gt; $width) &amp;&amp; ($v !== <span class="string">""</span>)) &#123;</div><div class="line">            $_string .= PHP_EOL;</div><div class="line">            $_width = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        $_string .= $v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $_string;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回一个字符的数组</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> string $str 文字</div><div class="line"> * <span class="doctag">@param</span> string $charset 字符编码</div><div class="line"> * <span class="doctag">@return</span> array $match   返回一个字符的数组</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">charArray</span><span class="params">($str, $charset = <span class="string">"utf-8"</span>)</span></span></div><div class="line">&#123;</div><div class="line">    $re[<span class="string">'utf-8'</span>] = <span class="string">"/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]&#123;2&#125;|[\xf0-\xff][\x80-\xbf]&#123;3&#125;/"</span>;</div><div class="line">    $re[<span class="string">'gb2312'</span>] = <span class="string">"/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/"</span>;</div><div class="line">    $re[<span class="string">'gbk'</span>] = <span class="string">"/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/"</span>;</div><div class="line">    $re[<span class="string">'big5'</span>] = <span class="string">"/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/"</span>;</div><div class="line">    preg_match_all($re[$charset], $str, $match);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $match;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回一个字符串在图片中所占的宽度</div><div class="line"> * <span class="doctag">@param</span> int $fontsize 字体大小</div><div class="line"> * <span class="doctag">@param</span> int $fontangle 角度</div><div class="line"> * <span class="doctag">@param</span> string $ttfpath 字体文件</div><div class="line"> * <span class="doctag">@param</span> string $char 字符</div><div class="line"> * <span class="doctag">@return</span> int $width</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">charWidth</span><span class="params">($fontsize, $fontangle, $char, $ttfpath)</span></span></div><div class="line">&#123;</div><div class="line">    $box = @imagettfbbox($fontsize, $fontangle, $ttfpath, $char);</div><div class="line">    $width = max($box[<span class="number">2</span>], $box[<span class="number">4</span>]) - min($box[<span class="number">0</span>], $box[<span class="number">6</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $width;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="base64串的图片上传"><a href="#base64串的图片上传" class="headerlink" title="base64串的图片上传"></a>base64串的图片上传</h2><p>这里我合成图片调用<code>$img-&gt;encode(&#39;data-url&#39;)</code>输出前台预览图片，<br>确认后才上传，为了方便就直接那base64串转blob上传</p>
<p>为了通用，如果你想搞个大的，比方说<strong>直接将页面的某个图片上传</strong>，可以参考一下代码</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//base64串转blob</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBlob</span>(<span class="params">dataURI</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> byteString = atob(dataURI.split(<span class="string">','</span>)[<span class="number">1</span>]);</div><div class="line">  <span class="keyword">var</span> mimeString = dataURI.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteString.length);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteString.length; i++) &#123;</div><div class="line">    ia[i] = byteString.charCodeAt(i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([ia], &#123;</div><div class="line">    <span class="attr">type</span>: mimeString</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//图片直接转data-url</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBase64Image</span>(<span class="params">img, quality</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">  <span class="keyword">if</span> (!quality) &#123;</div><div class="line">    quality = <span class="number">0.6</span>;</div><div class="line">  &#125;</div><div class="line">  canvas.width = img.naturalWidth;</div><div class="line">  canvas.height = img.naturalHeight;</div><div class="line">  canvas.getContext(<span class="string">"2d"</span>).drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  <span class="keyword">return</span> canvas.toDataURL(<span class="string">"image/jpeg"</span>, quality);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//图片直接上传</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">imgObj, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> blob = getBlob(getBase64Image(imgObj));</div><div class="line">  <span class="keyword">var</span> apiUrl = <span class="string">'xxx'</span>;</div><div class="line">  <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</div><div class="line">  fd.append(<span class="string">'image'</span>, blob);</div><div class="line">  $.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: apiUrl,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">    <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">data</span>: fd,</div><div class="line">    <span class="attr">type</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">success</span>: callback</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      imagick中文自动换行和base64串上传图片
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
    
      <category term="imgick" scheme="http://blog.newbmiao.com/tags/imgick/"/>
    
      <category term="json" scheme="http://blog.newbmiao.com/tags/json/"/>
    
      <category term="blob" scheme="http://blog.newbmiao.com/tags/blob/"/>
    
  </entry>
  
  <entry>
    <title>php踩坑记录</title>
    <link href="http://blog.newbmiao.com/2016/11/08/some-misuse-of-php.html"/>
    <id>http://blog.newbmiao.com/2016/11/08/some-misuse-of-php.html</id>
    <published>2016-11-08T11:33:22.000Z</published>
    <updated>2017-01-19T08:34:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="mb-strlen-不生效"><a href="#mb-strlen-不生效" class="headerlink" title="mb_strlen 不生效"></a>mb_strlen 不生效</h2><p>有一天发现本地<code>mb_strlen(&#39;哈&#39;)</code>本地为1,服务器为3,猜测应该是配置问题<br>看文档关键在于<code>mb_internal_encoding</code><br><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mixed mb_strlen ( <span class="built_in">string</span> $str [, <span class="built_in">string</span> $encoding = mb_internal_encoding() ] )</div><div class="line"></div><div class="line">继续搜 mbstring.internal_encoding (定义内部字符的默认编码)</div><div class="line"></div><div class="line">Warning: This feature has been DEPRECATED <span class="keyword">as</span> <span class="keyword">of</span> PHP <span class="number">5.6</span><span class="number">.0</span>. Relying <span class="keyword">on</span> this feature <span class="keyword">is</span> highly discouraged.。</div><div class="line"></div><div class="line">PHP <span class="number">5.6</span> 及更新版的用户应该将此选项留空，并设置 default_charset 作为代替。</div><div class="line"></div><div class="line">好吧，服务器 default_charset 没设置，然后默认用 ISO<span class="number">-8859</span><span class="number">-1</span></div></pre></td></tr></table></figure></p>
<a id="more"></a>
<p>解决方案：<br><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>入口设置，有权限的话也可以 ini_set(<span class="string">'default_charset'</span>,<span class="string">'UTF-8'</span>);</div><div class="line">mb_internal_encoding(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure></p>
<h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="session文件锁"><a href="#session文件锁" class="headerlink" title="session文件锁"></a>session文件锁</h2><p>并发下，php是不推荐用文件存储的方式管理session的，因为session管理有 【读写锁】！！！附干活两篇</p>
<ul>
<li><a href="https://log.zvz.im/2016/02/27/PHP-session/" target="_blank" rel="external">PHP session锁：如何避免session阻塞PHP请求</a></li>
<li><a href="https://laravel-china.org/topics/1093" target="_blank" rel="external">关于 PHP 中 Session 的几个问题</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      php踩坑记录
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="function" scheme="http://blog.newbmiao.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>jquery多异步管理使用记录</title>
    <link href="http://blog.newbmiao.com/2016/11/08/jquery-multi-async-manage-note.html"/>
    <id>http://blog.newbmiao.com/2016/11/08/jquery-multi-async-manage-note.html</id>
    <published>2016-11-08T11:27:05.000Z</published>
    <updated>2016-11-08T11:38:44.000Z</updated>
    
    <content type="html"><![CDATA[<p>先记录一些参考文章</p>
<ul>
<li><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="external">Javascript异步编程的4种方法(阮一峰)</a></li>
<li><a href="http://borninsummer.com/2015/06/02/using-promise-to-carry-out-multi-ajax-procedure/" target="_blank" rel="external">用Promise实现多个Ajax的异步流程控制</a></li>
<li><a href="https://xifengxx.github.io/2016/05/04/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/" target="_blank" rel="external">jQuery的AJAX方法(全局)</a></li>
<li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">Promise对象(ES6)</a></li>
</ul>
<a id="more"></a>
<h3 id="when-传递多个deferred"><a href="#when-传递多个deferred" class="headerlink" title="$.when() 传递多个deferred"></a>$.when() 传递多个deferred</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var ajaxBatch=[];</div><div class="line"><span class="regexp">//</span>构建deferred数组</div><div class="line">...</div><div class="line"></div><div class="line"><span class="variable">$.</span><span class="keyword">when</span>.apply(<span class="variable">$,</span> ajaxBatch).done();</div></pre></td></tr></table></figure>
<h3 id="done-callback内arguments结构不一致"><a href="#done-callback内arguments结构不一致" class="headerlink" title="done() callback内arguments结构不一致"></a>done() callback内arguments结构不一致</h3><p>就是会有三种情况：</p>
<ul>
<li>无参数</li>
<li>$.when()一个deferred参数: [data, textStatus , jqXHR] #假定 x代表[data,textStatus,jqXHR]结构</li>
<li>$.when()多个deferred参数: [x1,x2,x3]</li>
</ul>
<p>是不是醉了，怎么统一处理？<br>目前使用判断最里层data的结构<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.done(function()&#123;</div><div class="line">  var params=[].slice.call(arguments);</div><div class="line">  if(typeof params[<span class="string">0</span>][<span class="symbol">0</span>] !='object')&#123; //第二种情况返回undefined</div><div class="line"><span class="code">      params=[];</span></div><div class="line"><span class="code">      params[0]=[].slice.call(arguments);</span></div><div class="line">  &#125;</div><div class="line">  //然后遍历结果吧</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p><a href="http://stackoverflow.com/a/28365429/4431337" target="_blank" rel="external">stackoverflow</a><br><a href="https://www.odoo.com/documentation/8.0/reference/async.html" target="_blank" rel="external">Asynchronous Operations</a></p>
<h3 id="同步UI阻塞弹出层提示"><a href="#同步UI阻塞弹出层提示" class="headerlink" title="同步UI阻塞弹出层提示"></a>同步UI阻塞弹出层提示</h3><p><a href="http://jsfiddle.net/newbmiao/77xyhjjj/4/" target="_blank" rel="external">弹出层成功回调中使用setTimeout延时</a></p>
]]></content>
    
    <summary type="html">
    
      jquery多异步管理使用记录
    
    </summary>
    
      <category term="js" scheme="http://blog.newbmiao.com/categories/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/categories/js/jquery/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/tags/jquery/"/>
    
      <category term="ajax" scheme="http://blog.newbmiao.com/tags/ajax/"/>
    
      <category term="promise" scheme="http://blog.newbmiao.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>jquery-timepicker-addon动态显示使用</title>
    <link href="http://blog.newbmiao.com/2016/09/07/how-to-dynamic-show-jquery-timepicker-addon.html"/>
    <id>http://blog.newbmiao.com/2016/09/07/how-to-dynamic-show-jquery-timepicker-addon.html</id>
    <published>2016-09-07T03:26:24.000Z</published>
    <updated>2016-09-28T07:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><a href="http://trentrichardson.com/examples/timepicker/" target="_blank" rel="external">文档</a></p>
</blockquote>
<p>需要分条件判断是否显示时间选择，而timepicker是单例模式，<br>初始化只有第一次生效，要想实时更新需要用到<code>option</code>选项设置</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// #cond是条件选择select，带.selectDateInput的是两个时间选择输入框</span></div><div class="line">$(<span class="string">'#cond'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//设置默认显示</span></div><div class="line">  <span class="keyword">var</span> defaultOption = &#123;</div><div class="line">    <span class="attr">timeFormat</span>: <span class="string">"HH:mm:ss"</span>,</div><div class="line">    <span class="attr">dateFormat</span>: <span class="string">"yy-mm-dd"</span></div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//获取分组对应时间(小时)，是否显示时间选择</span></div><div class="line">  <span class="keyword">var</span> startHour = <span class="number">9</span>;</div><div class="line">  <span class="keyword">var</span> enableTimePicker = <span class="literal">true</span>;</div><div class="line"></div><div class="line">  <span class="comment">//设置时间控件（防止直接输入时间）</span></div><div class="line">  $(<span class="string">'.selectDateInput'</span>).prop(<span class="string">'readonly'</span>, <span class="string">'readonly'</span>).val(<span class="string">''</span>);</div><div class="line">  <span class="keyword">if</span> (!enableTimePicker) &#123; <span class="comment">//不允许选择时间</span></div><div class="line">    <span class="keyword">var</span> startOption = &#123;</div><div class="line">      <span class="attr">hour</span>: startHour, <span class="comment">//设置初始时间</span></div><div class="line">      showHour: <span class="literal">false</span>,</div><div class="line">      <span class="attr">showMinute</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">timeInput</span>: <span class="literal">false</span>, <span class="comment">//是否允许时间编辑</span></div><div class="line">      disabled: <span class="literal">false</span>, <span class="comment">//是否禁用控件</span></div><div class="line">      onSelect: <span class="function"><span class="keyword">function</span>(<span class="params">selectedDateTime</span>) </span>&#123;</div><div class="line">        <span class="comment">//选中后设置默认初始小时和结束时间（次日24小时后）</span></div><div class="line">        selectedDateTime = selectedDateTime.split(<span class="string">' '</span>)[<span class="number">0</span>] + <span class="string">" 00:00:00"</span>;</div><div class="line">        <span class="keyword">var</span> startDate = (<span class="keyword">new</span> <span class="built_in">Date</span>(selectedDateTime));</div><div class="line">        <span class="comment">//setDate设置时间</span></div><div class="line">        $(<span class="keyword">this</span>).datetimepicker(<span class="string">'setDate'</span>, selectedDateTime + <span class="string">" "</span> + startHour + <span class="string">":00:00"</span>);</div><div class="line">        startDate.setTime(startDate.getTime() + <span class="number">1000</span> * <span class="number">3600</span> * (<span class="number">24</span> + startHour) - <span class="number">1</span>);</div><div class="line">        <span class="comment">//格式化时间显示</span></div><div class="line">        <span class="keyword">var</span> endDateStr = startDate.toLocaleString(<span class="string">'zh-CN'</span>, &#123;<span class="attr">hour12</span>: <span class="literal">false</span>&#125;)</div><div class="line">                .replace(<span class="regexp">/\//g</span>, <span class="string">'-'</span>)</div><div class="line">                .replace(<span class="regexp">/\b\d\b/g</span>, <span class="string">'0$&amp;'</span>); <span class="comment">//添加前导零</span></div><div class="line">        $(<span class="string">'.selectDateInput:eq(1)'</span>).val(endDateStr);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    $(<span class="string">'.selectDateInput:eq(0)'</span>).datetimepicker(defaultOption)</div><div class="line">      .datetimepicker(<span class="string">'option'</span>, startOption); <span class="comment">//option更新（可实时刷新显示）</span></div><div class="line"></div><div class="line">    $(<span class="string">'.selectDateInput:eq(1)'</span>).datetimepicker()</div><div class="line">      .datetimepicker(<span class="string">'option'</span>, &#123;</div><div class="line">        <span class="attr">disabled</span>: <span class="literal">true</span> <span class="comment">//禁用第二个时间选择输入框</span></div><div class="line">      &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//时间选择显示</span></div><div class="line">    $(<span class="string">'.selectDateInput'</span>).datetimepicker(defaultOption)</div><div class="line">      .datetimepicker(<span class="string">'option'</span>, &#123;</div><div class="line">        <span class="attr">showHour</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">showMinute</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">timeInput</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">disabled</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">onSelect</span>: <span class="literal">null</span></div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;).trigger(<span class="string">'change'</span>);</div></pre></td></tr></table></figure>
<p>为了实现动态显示折腾了好久，以后查资料还是要多看看官方api和 stackOverFlow 了。</p>
<blockquote>
<p>附推荐<a href="http://www.cnblogs.com/yigeqi/p/4031393.html" target="_blank" rel="external">js正则一篇</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      jquery-timepicker-addon动态显示使用
    
    </summary>
    
      <category term="js" scheme="http://blog.newbmiao.com/categories/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/categories/js/jquery/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
      <category term="jquery-timepicker-addon" scheme="http://blog.newbmiao.com/tags/jquery-timepicker-addon/"/>
    
  </entry>
  
  <entry>
    <title>js如何动态调用不确定参数的函数</title>
    <link href="http://blog.newbmiao.com/2016/08/17/how-to-call-a-function-with-unsure-number-params.html"/>
    <id>http://blog.newbmiao.com/2016/08/17/how-to-call-a-function-with-unsure-number-params.html</id>
    <published>2016-08-17T06:17:31.000Z</published>
    <updated>2016-08-17T10:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需求：想通过传函数体和参数去调用，但不确定参数（就是说不想写死参数）</span></div><div class="line"><span class="comment">//比方m这个函数可能会改成需要4个，8个参数，但不想改动态调用它的函数</span></div><div class="line"><span class="keyword">var</span> m = <span class="function"><span class="keyword">function</span><span class="params">(a, b, c)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this is solution</span></div><div class="line"><span class="comment">//apply+arguments 把参数数组动态传递给函数体</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">var</span> func = args.shift();</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> func.apply(<span class="literal">null</span>, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">m2 = makeFunc(m, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//缺的参数也可以在附加（注意concat的调用，叠加了参数数组）</span></div><div class="line"><span class="built_in">console</span>.log(m2(<span class="number">6</span>, <span class="number">7</span>)); <span class="comment">//多余的参数7不会被用到</span></div><div class="line"></div><div class="line"><span class="comment">//简化</span></div><div class="line"><span class="comment">//Array.prototype.slice可以用[].slice替换</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//题外话：意外遇到一个上下文调用的错误=_=！</span></div><div class="line"><span class="keyword">var</span> p = <span class="built_in">console</span>.log</div><div class="line">p(<span class="number">1</span>); <span class="comment">//error: Uncaught TypeError: Illegal invocation（在控制台查看）</span></div><div class="line">p.apply(<span class="built_in">console</span>, [<span class="number">1</span>]); <span class="comment">//ok</span></div><div class="line"></div><div class="line"><span class="comment">//小心的坑：</span></div><div class="line"><span class="comment">// makeFunc的apply设置上下文是null，所以有依赖上下文的函数需考虑传不依赖上下文的函数体，必要时可以构造匿名函数</span></div><div class="line"></div><div class="line"><span class="comment">//遇到的问题！（没搞明白）</span></div><div class="line"><span class="comment">// function()&#123;$('#app').show();&#125; //显示弹框，直接传$('#app').show 会导致无法响应</span></div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      js如何动态调用不确定参数的函数
    
    </summary>
    
      <category term="js" scheme="http://blog.newbmiao.com/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>mac工具集</title>
    <link href="http://blog.newbmiao.com/2016/03/15/mac-tool.html"/>
    <id>http://blog.newbmiao.com/2016/03/15/mac-tool.html</id>
    <published>2016-03-15T02:50:23.000Z</published>
    <updated>2016-11-22T10:28:39.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure>
<h2 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span>/<span class="regexp">/iterm2.com/downloads</span><span class="regexp">/stable/i</span>Term2_v2_<span class="number">0</span>.zip</div><div class="line">运行iterm2之后按cmd+,调出设置界面，在<span class="string">'profile'</span> -&gt; <span class="string">"Terminal Type"</span>改成xterm-new。</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">brew install zsh</div><div class="line">sudo vim <span class="meta-keyword">/etc/</span>shells</div><div class="line">  <span class="meta">#在最后面加上一行</span></div><div class="line">  <span class="meta-keyword">/usr/</span>local/Cellar<span class="meta-keyword">/zsh/</span><span class="number">5.0</span><span class="number">.8</span><span class="meta-keyword">/bin/</span>zsh</div><div class="line">chsh -s <span class="meta-keyword">/usr/</span>local/Cellar<span class="meta-keyword">/zsh/</span><span class="number">5.0</span><span class="number">.8</span><span class="meta-keyword">/bin/</span>zsh</div><div class="line"><span class="meta">#重启终端即可</span></div></pre></td></tr></table></figure>
<h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/robbyrussell/oh-my-zsh/master/tools/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></div></pre></td></tr></table></figure>
<h2 id="dash-文档工具"><a href="#dash-文档工具" class="headerlink" title="dash 文档工具"></a>dash 文档工具</h2><h2 id="alfred-快捷调用"><a href="#alfred-快捷调用" class="headerlink" title="alfred 快捷调用"></a>alfred 快捷调用</h2><p><a href="https://github.com/zenorocha/alfred-workflows" target="_blank" rel="external">附一个开发必备工具集</a></p>
<h2 id="lrzsz-服务器和本机传输工具"><a href="#lrzsz-服务器和本机传输工具" class="headerlink" title="lrzsz-服务器和本机传输工具"></a>lrzsz-服务器和本机传输工具</h2><p><a href="https://github.com/mmastrac/iterm2-zmodem" target="_blank" rel="external">iterm2-zmodem</a><br>item2 ssh远程服务器，就能上传下载文件</p>
<ul>
<li><strong>sz 想要本机接收的文件</strong></li>
<li><strong>rz 想让远程收到的文件</strong></li>
</ul>
<p><strong>issue：ssl证书验证失败无法下载</strong><br>原因是brew https连接失败<br>解决方法：<br><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">vim</span> /usr/local/Library/Homebrew/utils.rb</div><div class="line"></div><div class="line">修改下面的行加一个-<span class="keyword">k</span> 参数，让 curl 忽略 https 验证</div><div class="line"></div><div class="line"><span class="keyword">args</span> = [HOMEBREW_CURL_ARGS, HOMEBREW_USER_AGENT,<span class="string">'-k'</span>, *<span class="keyword">args</span>]</div></pre></td></tr></table></figure></p>
<h2 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h2><p><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">tldr查询命令如何用</a></p>
<h2 id="how2"><a href="#how2" class="headerlink" title="how2"></a>how2</h2><p><a href="https://github.com/santinic/how2" target="_blank" rel="external">stackoverflow命令行查询工具</a></p>
<h2 id="git-credential-osxkeychain"><a href="#git-credential-osxkeychain" class="headerlink" title="git-credential-osxkeychain"></a>git-credential-osxkeychain</h2><p><a href="https://help.github.com/articles/caching-your-github-password-in-git/" target="_blank" rel="external">免密码提交</a><br><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -s -O https:<span class="comment">//github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain</span></div><div class="line">chmod u+x git-credential-osxkeychain</div><div class="line">sudo mv git-credential-osxkeychain <span class="string">"$(dirname $(which git))/git-credential-osxkeychain"</span></div><div class="line">git config --global credential<span class="selector-class">.helper</span> osxkeychain</div></pre></td></tr></table></figure></p>
<h2 id="mackup"><a href="#mackup" class="headerlink" title="mackup"></a>mackup</h2><p><a href="https://github.com/lra/mackup" target="_blank" rel="external">mackup备份配置</a></p>
<blockquote>
<p>推荐  <a href="http://gooday.xyz/proxifier%E6%B3%A8%E5%86%8C%E7%A0%81%E4%BB%A5%E5%8F%8A%E9%85%8D%E5%90%88shadowsocks%E4%B8%8A%E7%BD%91/" target="_blank" rel="external">googledrive+proxifier</a></p>
</blockquote>
<h2 id="shortcat"><a href="#shortcat" class="headerlink" title="shortcat"></a>shortcat</h2><p><a href="http://www.appinn.com/shortcat/" target="_blank" rel="external">扔掉你的鼠标</a><br><a href="https://blog.magi.site/2016/06/15/shortcat-config-tips/" target="_blank" rel="external">配置</a></p>
<h2 id="cheatsheet-amp-EVE-快捷键提示"><a href="#cheatsheet-amp-EVE-快捷键提示" class="headerlink" title="cheatsheet &amp; EVE 快捷键提示"></a>cheatsheet &amp; EVE 快捷键提示</h2><p><a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="external">cheatsheet</a><br><a href="http://www.hotkey-eve.com/" target="_blank" rel="external">EVE</a></p>
<h2 id="vscode-神编辑器"><a href="#vscode-神编辑器" class="headerlink" title="vscode 神编辑器"></a>vscode 神编辑器</h2><p><a href="http://code.visualstudio.com/" target="_blank" rel="external">vscode</a></p>
]]></content>
    
    <summary type="html">
    
      mac,tool
    
    </summary>
    
      <category term="mac" scheme="http://blog.newbmiao.com/categories/mac/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/categories/mac/tool/"/>
    
    
      <category term="mac" scheme="http://blog.newbmiao.com/tags/mac/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>基于phpstorm和vagrant环境的xdebug远程调试</title>
    <link href="http://blog.newbmiao.com/2015/12/04/xdebug-remote-debug-with-phpstorm-and-vagrant.html"/>
    <id>http://blog.newbmiao.com/2015/12/04/xdebug-remote-debug-with-phpstorm-and-vagrant.html</id>
    <published>2015-12-04T06:01:09.000Z</published>
    <updated>2016-07-07T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="网页调试-本地调试"><a href="#网页调试-本地调试" class="headerlink" title="网页调试/本地调试"></a>网页调试/本地调试</h2><p>流程是啥</p>
<ul>
<li>开发环境安装xdebug，配置监听client端（安装phpstorm那端）</li>
<li>配置phpstorm-debug，重点要用path-map，不然对于单一入口的网页调试找不到哦</li>
<li>断点跟踪吧</li>
</ul>
<p>详细网上资料很多，下边三个都可以用，我就不赘述了</p>
<p><a href="http://xrong.net/2014/09/09/phpstorm%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/" target="_blank" rel="external">phpstorm远程调试</a><br><a href="https://confluence.jetbrains.com/display/PhpStorm/Zero-configuration+Web+Application+Debugging+with+Xdebug+and+PhpStorm" target="_blank" rel="external">Zero-configuration Web Application Debugging with Xdebug and PhpStorm</a><br><a href="http://stackoverflow.com/questions/15339165/cannot-debug-with-phpstorm-vagrant-xdebug" target="_blank" rel="external">cannot-debug-with-phpstorm-vagrant-xdebug</a></p>
<hr>
<h2 id="远程cli调试"><a href="#远程cli调试" class="headerlink" title="远程cli调试"></a>远程cli调试</h2><a id="more"></a>
<p>上边的不适用于远程cli调试，为什么？</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原理是一样，远程主机的xdebug监听client的phpstorm，但是命令行调试， $_SERVER 中没有serverName和IDE_KEY的值.</div><div class="line">另外当只起用  xdebug<span class="selector-class">.remote_connect_back</span> = on  不监听指定ip，是需要提供  xdebug<span class="selector-class">.remote_host</span> 的值的。</div><div class="line">明白了这些，只要配置环境变量值就可以了</div><div class="line">主要就是 XDEBUG_CONFIG  和 PHP_IDE_CONFIG  （serverName要对应你在phpstorm中配置的server别名）</div></pre></td></tr></table></figure>
<hr>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#添加下边命令到 ~/.bashrc</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">_phpdebug</span></span>()&#123;</div><div class="line">      <span class="built_in">export</span> XDEBUG_CONFIG=<span class="string">"remote_host=<span class="variable">$(echo $SSH_CLIENT | awk '&#123;print $1&#125;')</span> idekey=PHPSTORM"</span></div><div class="line">       <span class="built_in">export</span> PHP_IDE_CONFIG=<span class="string">"serverName=cli"</span></div><div class="line">       <span class="built_in">echo</span> <span class="string">"set XDEBUG_CONFIG=<span class="variable">$&#123;XDEBUG_CONFIG&#125;</span>; PHP_IDE_CONFIG=<span class="variable">$&#123;PHP_IDE_CONFIG&#125;</span>"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">alias</span> phpdebug=<span class="string">"_phpdebug"</span></div><div class="line"><span class="built_in">alias</span> phpdebugoff=<span class="string">"unset PHP_IDE_CONFIG &amp;&amp; unset XDEBUG_CONFIG"</span></div><div class="line"></div><div class="line"><span class="comment">#执行</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure>
<p>以后调试前只要在vagrant或远程主机先执行 <code>phpdebug</code> 就行<br>需要取消的话 <code>phpdebugoff</code> 就可以了</p>
<blockquote>
<p>参考自：<br><a href="http://stackoverflow.com/questions/16518262/xdebug-how-to-debug-remote-console-application" target="_blank" rel="external">xdebug-how-to-debug-remote-console-application</a><br><a href="https://www.adayinthelifeof.nl/2012/12/20/debugging-remote-cli-with-phpstorm/" target="_blank" rel="external">debugging-remote-cli-with-phpstorm</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      基于phpstorm和vagrant环境的xdebug远程调试
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/categories/php/tool/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="xdebug" scheme="http://blog.newbmiao.com/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>让影梭和搬瓦工帮你科学上网</title>
    <link href="http://blog.newbmiao.com/2015/11/28/shadowsocks-polipo-vps.html"/>
    <id>http://blog.newbmiao.com/2015/11/28/shadowsocks-polipo-vps.html</id>
    <published>2015-11-28T14:11:31.000Z</published>
    <updated>2016-09-18T05:21:25.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>环境：</p>
<ul>
<li>server:shadowsocks(Linux)</li>
<li>client:shadowsocks(Mac) , polipo</li>
</ul>
<p>硬广：<a href="https://bandwagonhost.com/aff.php?aff=5640" target="_blank" rel="external">推荐VPS“搬瓦工”</a><br>理由有3：</p>
<ul>
<li>shadowsocks server： 一键安装（后续可自定义配置）</li>
<li>性价比高：目前比较便宜的是 <strong>$19.99</strong> 一年,256MB内存的VPS，而且可以用 <strong>支付宝</strong> 支付</li>
<li>操作不能在简单了！</li>
</ul>
</blockquote>
<a id="more"></a>
<p>Shadowsocks具体干啥的，都懂得，介绍详见<a href="https://wiki.archlinux.org/index.php/Shadowsocks" target="_blank" rel="external">Shadowsocks</a></p>
<p>准备工作：<br>去<a href="https://bandwagonhost.com/aff.php?aff=5640" target="_blank" rel="external">VPS“搬瓦工”</a>买一个合适的VPS，然后用支付宝支付！</p>
<p>接下来走安装流程，需要linux一些基础(server_ip和port,password请自行替换自己的)<br>利用ssh登陆VPS<br><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssh</span> root<span class="variable">@your_ip</span> -p your_port</div><div class="line"><span class="comment">#替换你的ip和端口（系统会邮件发给你）</span></div><div class="line"><span class="comment">#输入你的密码</span></div></pre></td></tr></table></figure></p>
<h1 id="server"><a href="#server" class="headerlink" title="server"></a>server</h1><h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2><p>不推荐自己安装，依赖解决太麻烦：<br><del><a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh" target="_blank" rel="external">centos6一键安装脚本</a></del></p>
<p>利用官方一键安装：<br>KiwiVM （进入管理平台）</p>
<ul>
<li>Install new OS 》 选择Centos 6 x86 minimal 或者 Centos 6 x86_64 minimal安装即可，别作死安装centos7啊</li>
<li>Shadowsocks Server 》安装Shadowsocks 》默认生成的已经可以用了，但是我们要自己可配端口和密码</li>
<li>自定义配置</li>
</ul>
<figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">vi <span class="meta-keyword">/etc/</span>shadowsocks.<span class="class">json</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</div><div class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">    <span class="string">"port_password"</span>:&#123;</div><div class="line">        <span class="string">"port1"</span>:<span class="string">"password1"</span>,</div><div class="line">        <span class="string">"port2"</span>:<span class="string">"password2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"timeout"</span>:<span class="number">120</span>, <span class="comment">//超时时间</span></div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="string">"fast_open"</span>:false, <span class="comment">//如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟</span></div><div class="line">    <span class="string">"workers"</span>:<span class="number">1</span> <span class="comment">//workers数量</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#结束掉系统安装的shadowsocks server</span></div><div class="line">killall ssserver</div><div class="line"></div><div class="line"><span class="meta">#启用自己配置的shadowsocks server</span></div><div class="line"><span class="meta-keyword">/usr/</span>bin/ssserver -c  <span class="meta-keyword">/etc/</span>shadowsocks.json --user nobody -d start</div></pre></td></tr></table></figure>
<h1 id="client"><a href="#client" class="headerlink" title="client"></a>client</h1><h2 id="Mac-shadowsocks"><a href="#Mac-shadowsocks" class="headerlink" title="Mac-shadowsocks"></a>Mac-shadowsocks</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">brew install python3</div><div class="line">pip3 install shadowsocks</div><div class="line">brew install openssl swig libevent</div><div class="line">pip3 install m2crypto gevent</div><div class="line"></div><div class="line">vi /usr/<span class="keyword">local</span>/etc/shadowsocks-libev.json</div><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"my_server_ip"</span>,</div><div class="line">    <span class="string">"server_port"</span>: your_port,</div><div class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="string">"local_port"</span>:1080,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"*****"</span>,</div><div class="line">    <span class="string">"timeout"</span>: 60,</div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 启动</div><div class="line">sudo touch /<span class="keyword">var</span>/<span class="keyword">run</span>/sslocal.pid /<span class="keyword">var</span>/<span class="keyword">log</span>/sslocal.<span class="built_in">log</span></div><div class="line">sudo sslocal -c /usr/<span class="keyword">local</span>/etc/shadowsocks-libev.json --user root --pid-<span class="keyword">file</span> /<span class="keyword">var</span>/<span class="keyword">run</span>/sslocal.pid --<span class="keyword">log</span>-<span class="keyword">file</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/sslocal.<span class="keyword">log</span> -<span class="keyword">d</span> start</div></pre></td></tr></table></figure>
<h2 id="polipo"><a href="#polipo" class="headerlink" title="polipo"></a>polipo</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">brew <span class="keyword">install</span> polipo</div><div class="line"># 设置开机启动，并添加shadowsocks转换</div><div class="line">vim /usr/<span class="keyword">local</span>/opt/polipo/homebrew.mxcl.polipo.plist</div><div class="line"><span class="comment">-----------------------------------</span></div><div class="line">&lt;?<span class="keyword">xml</span> <span class="keyword">version</span>=<span class="string">"1.0"</span> <span class="keyword">encoding</span>=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE plist <span class="keyword">PUBLIC</span> <span class="string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</div><div class="line">&lt;plist <span class="keyword">version</span>=<span class="string">"1.0"</span>&gt;</div><div class="line">  &lt;dict&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;Label&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="keyword">string</span>&gt;homebrew.mxcl.polipo&lt;/<span class="keyword">string</span>&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;RunAtLoad&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="literal">true</span>/&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;KeepAlive&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="literal">true</span>/&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;ProgramArguments&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="built_in">array</span>&gt;</div><div class="line">      &lt;<span class="keyword">string</span>&gt;/usr/<span class="keyword">local</span>/opt/polipo/<span class="keyword">bin</span>/polipo&lt;/<span class="keyword">string</span>&gt;</div><div class="line">      &lt;<span class="keyword">string</span>&gt;socksParentProxy=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span>&lt;/<span class="keyword">string</span>&gt;</div><div class="line">    &lt;/<span class="built_in">array</span>&gt;</div><div class="line">    &lt;!<span class="comment">-- Set `ulimit -n 20480`. The default OS X limit is 256, that's</span></div><div class="line">         <span class="keyword">not</span> enough <span class="keyword">for</span> Polipo (displays <span class="string">'too many files open'</span> <span class="keyword">errors</span>).</div><div class="line">         It seems <span class="keyword">like</span> you have <span class="keyword">no</span> reason <span class="keyword">to</span> <span class="keyword">lower</span> this <span class="keyword">limit</span></div><div class="line">         (<span class="keyword">and</span> unlikely will want <span class="keyword">to</span> <span class="keyword">raise</span> it). <span class="comment">--&gt;</span></div><div class="line">    &lt;<span class="keyword">key</span>&gt;SoftResourceLimits&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;dict&gt;</div><div class="line">      &lt;<span class="keyword">key</span>&gt;NumberOfFiles&lt;/<span class="keyword">key</span>&gt;</div><div class="line">      &lt;<span class="built_in">integer</span>&gt;<span class="number">20480</span>&lt;/<span class="built_in">integer</span>&gt;</div><div class="line">    &lt;/dict&gt;</div><div class="line">  &lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div><div class="line"><span class="comment">-----------------------------------</span></div><div class="line"></div><div class="line"><span class="keyword">ln</span> -sfv /usr/<span class="keyword">local</span>/opt/polipo/homebrew.mxcl.polipo.plist ~/<span class="keyword">Library</span>/LaunchAgents/homebrew.mxcl.polipo.plist</div><div class="line">launchctl <span class="keyword">load</span> ~/<span class="keyword">Library</span>/LaunchAgents/homebrew.mxcl.polipo.plist</div><div class="line"></div><div class="line">#这样开机回自动运行 :polipo socksParentProxy=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></div><div class="line"></div><div class="line">** 命令行执行番羽墙加上下边两句 **</div><div class="line">https_proxy=<span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8123</span> http_proxy=<span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8123</span></div><div class="line">** 建议设置<span class="keyword">alias</span> **</div><div class="line"><span class="keyword">alias</span> fq=<span class="string">"https_proxy=http://127.0.0.1:8123 http_proxy=http://127.0.0.1:8123"</span></div></pre></td></tr></table></figure>
<h2 id="Android-shadowsocks"><a href="#Android-shadowsocks" class="headerlink" title="Android shadowsocks"></a>Android shadowsocks</h2><blockquote>
<p>温馨提示：不用ROOT！！！<br><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="external">shadowsocks-android(目前最新V3.1.3)</a></p>
</blockquote>
<h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><p>没有找到能用的IOS版本，知道的告我下！</p>
<blockquote>
<p>到这里祝贺你科学上网了，google吧！</p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      影梭，番羽墙，VPS，搬瓦工
    
    </summary>
    
      <category term="mac" scheme="http://blog.newbmiao.com/categories/mac/"/>
    
      <category term="shadowsocks" scheme="http://blog.newbmiao.com/categories/mac/shadowsocks/"/>
    
    
      <category term="mac" scheme="http://blog.newbmiao.com/tags/mac/"/>
    
      <category term="shadowsocks" scheme="http://blog.newbmiao.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>如何更新别人apple-id购买的应用</title>
    <link href="http://blog.newbmiao.com/2015/11/20/how-to-update-apps-apple-id.html"/>
    <id>http://blog.newbmiao.com/2015/11/20/how-to-update-apps-apple-id.html</id>
    <published>2015-11-20T09:30:11.000Z</published>
    <updated>2016-07-07T13:09:20.000Z</updated>
    
    <content type="html"><![CDATA[<p>Mac的应用比如Xcode太大，一般不会自己下，别人airdrop给你，方便吧！<br>可是，升级时你就发现没有传给那个人的apple id密码你都没法升级了，而为了安全，除了appstore你别无选择</p>
<p>不过方法还是有的，为了自己不用蛋疼，记录在这<br><a id="more"></a></p>
<h2 id="清除apple-id信息"><a href="#清除apple-id信息" class="headerlink" title="清除apple id信息"></a>清除apple id信息</h2><p>右键Xcode.app &gt;&gt; 显示包内容 &gt;&gt; 找到_MASReceipt &gt;&gt; 删除recept</p>
<h2 id="更新文件缓存"><a href="#更新文件缓存" class="headerlink" title="更新文件缓存"></a>更新文件缓存</h2><p>第一步,<br>下载 <a href="https://www.macupdate.com/app/mac/11582/onyx" target="_blank" rel="external">Download OnyX for Mac</a><br>第二步,<br>打开应用(需要管理员权限),<br>选择  维护 -&gt; 重建 ,<br>把 “LaunchServices”, “dyld 的共享内存”,  “Spotlight索引” 选中,<br>最后点击 “执行”.</p>
<p>参考：</p>
<ul>
<li><a href="http://www.cnblogs.com/ixxonline/p/4087582.html" target="_blank" rel="external">使用新的AppleID更新Xcode</a></li>
<li><a href="http://www.zhihu.com/question/21448755" target="_blank" rel="external">如何删除别人 apple id 购买的应用, 改用自己的 apple id 安装?</a></li>
</ul>
]]></content>
    
    <summary type="html">
    
      如何更新别人apple-id购买的应用
    
    </summary>
    
      <category term="mac" scheme="http://blog.newbmiao.com/categories/mac/"/>
    
    
      <category term="software" scheme="http://blog.newbmiao.com/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>jQuery应用杂记</title>
    <link href="http://blog.newbmiao.com/2015/10/25/jQuery-code-record.html"/>
    <id>http://blog.newbmiao.com/2015/10/25/jQuery-code-record.html</id>
    <published>2015-10-25T14:15:38.000Z</published>
    <updated>2017-01-19T08:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong> 工作中常用的一些代码片段 </strong></p>
<h2 id="全选"><a href="#全选" class="headerlink" title="全选"></a>全选</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#ckAll"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"input[name='sub']"</span>).prop(<span class="string">"checked"</span>, <span class="keyword">this</span>.checked);</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">//全部checkbox选中后 全选框也选中</span></div><div class="line"></div><div class="line">  $(<span class="string">"input[name='sub']"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> $subs = $(<span class="string">"input[name='sub']"</span>);</div><div class="line">    $(<span class="string">"#ckAll"</span>).prop(<span class="string">"checked"</span> , $subs.length == $subs.filter(<span class="string">":checked"</span>).length ? <span class="literal">true</span> :<span class="literal">false</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<a id="more"></a>
<h2 id="获取选择内容"><a href="#获取选择内容" class="headerlink" title="获取选择内容"></a>获取选择内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uids = $(<span class="string">'[name=subCk]:checked'</span>)</div><div class="line">          .map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="keyword">return</span> $(<span class="keyword">this</span>).data(<span class="string">'id'</span>);</div><div class="line">          &#125;)</div><div class="line">          .get()</div><div class="line">          .join();</div></pre></td></tr></table></figure>
<h2 id="全选和其他选项不能同时选中"><a href="#全选和其他选项不能同时选中" class="headerlink" title="全选和其他选项不能同时选中"></a>全选和其他选项不能同时选中</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/*</span></div><div class="line">	 *@ckName checkbox-name</div><div class="line">	 *@i 对应index</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">checkToggle</span>(<span class="params">ckName,i</span>)</span>&#123;</div><div class="line">	    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>)&#123;</div><div class="line">	        i=<span class="number">0</span>;</div><div class="line">	    &#125;</div><div class="line">	    $(<span class="string">"[name='"</span>+ckName+<span class="string">"']:eq("</span>+i+<span class="string">")"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	        <span class="keyword">if</span> ($(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>)) &#123;</div><div class="line">	            $(<span class="keyword">this</span>).parent().nextAll().children().prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;);</div><div class="line">	    $(<span class="string">"[name='"</span>+ckName+<span class="string">"']"</span>).not(<span class="string">":eq("</span>+i+<span class="string">")"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	        <span class="keyword">if</span> ($(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>)) &#123;</div><div class="line">	            $(<span class="string">"[name='"</span>+ckName+<span class="string">"']:eq("</span>+i+<span class="string">")"</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;);</div><div class="line">	&#125;</div><div class="line">## 切换条数</div><div class="line"></div><div class="line">	 <span class="keyword">var</span> pageData=&#123;</div><div class="line">	     limit:&lt;?=$limit;?&gt;</div><div class="line">	 &#125;;</div><div class="line">	 $(<span class="string">"[value="</span>+pageData.limit+<span class="string">"]:radio"</span>).prop(<span class="string">'checked'</span>,<span class="string">'true'</span>);</div><div class="line">	    $(<span class="string">'[name=limit]:radio'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	        <span class="keyword">var</span> limit=$(<span class="keyword">this</span>).val();</div><div class="line">	        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(limit)&lt;<span class="number">10</span>)&#123;</div><div class="line">	            <span class="keyword">return</span>;</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">if</span>(location.search.indexOf(<span class="string">'limit='</span>)!==<span class="number">-1</span>)&#123;</div><div class="line">	            location.search=location.search.replace(<span class="regexp">/limit=(\d*)?/</span>,<span class="string">'limit='</span>+limit);</div><div class="line">	        &#125;<span class="keyword">else</span>&#123;</div><div class="line">	            <span class="built_in">console</span>.log((location.search==<span class="string">''</span>)?<span class="string">'limit='</span>+limit:<span class="string">'&amp;limit='</span>+limit);</div><div class="line">	            location.search=(location.search==<span class="string">''</span>)?<span class="string">'limit='</span>+limit:location.search+<span class="string">'&amp;limit='</span>+limit;</div><div class="line">	        &#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure>
<h2 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h2><p>jQuery中没有重置表单的方法,如果需要，可以使用Dom的reset方法<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">(<span class="string">'#myform'</span>)[0].reset()</span></div></pre></td></tr></table></figure></p>
<h2 id="select选择显示隐藏相关元素"><a href="#select选择显示隐藏相关元素" class="headerlink" title="select选择显示隐藏相关元素"></a>select选择显示隐藏相关元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//选中与否select对应值，进行相应显示切换</span></div><div class="line"><span class="keyword">var</span> selectMap = &#123;</div><div class="line">        <span class="string">'#ddtype'</span>: &#123;</div><div class="line">            <span class="number">2</span>: &#123;<span class="attr">show</span>: <span class="string">'input[name=deadline]'</span>, <span class="attr">hide</span>: <span class="string">''</span>&#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'#aliasType'</span>: &#123;</div><div class="line">            <span class="number">1</span>: &#123;<span class="attr">show</span>: <span class="string">'.divAlias'</span>, <span class="attr">hide</span>: <span class="string">''</span>&#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'#type'</span>: &#123;</div><div class="line">            <span class="number">2</span>: &#123;<span class="attr">show</span>: <span class="string">'#sceneId'</span>, <span class="attr">hide</span>: <span class="string">'.divExtra'</span>&#125;</div><div class="line">        &#125;,</div><div class="line">&#125;;</div><div class="line">selectShow.register(selectMap);</div><div class="line"></div><div class="line"><span class="comment">//函数</span></div><div class="line"><span class="keyword">var</span> selectShow = &#123;</div><div class="line">    <span class="attr">register</span>: <span class="function"><span class="keyword">function</span> (<span class="params">selectMap</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> select <span class="keyword">in</span> selectMap) &#123;</div><div class="line">            <span class="keyword">var</span> _select = selectMap[select];</div><div class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params">select, _select</span>) </span>&#123;</div><div class="line">                $(select).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> option <span class="keyword">in</span> _select) &#123;</div><div class="line">                        <span class="keyword">if</span> ($(<span class="keyword">this</span>).val() == option) &#123;</div><div class="line">                            me.toggle(_select[option][<span class="string">'show'</span>], _select[option][<span class="string">'hide'</span>])</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            me.toggle(_select[option][<span class="string">'hide'</span>], _select[option][<span class="string">'show'</span>])</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                $(select).change();</div><div class="line">            &#125;)(select, _select);<span class="comment">//闭包注册</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">toggle</span>: <span class="function"><span class="keyword">function</span> (<span class="params">show, hide</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (show != <span class="string">''</span>) &#123;</div><div class="line">            $(show).removeClass(<span class="string">'hide'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (hide != <span class="string">''</span>) &#123;</div><div class="line">            $(hide).addClass(<span class="string">'hide'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h2 id="输入框字数检测"><a href="#输入框字数检测" class="headerlink" title="输入框字数检测"></a>输入框字数检测</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;textarea id=<span class="string">"msg"</span> name=<span class="string">"msg"</span> cols=<span class="string">"40"</span> rows=<span class="string">"4"</span> data-max-len=<span class="string">"50"</span> placeholder=<span class="string">"内容字数不超过50个字"</span>&gt;&lt;/textarea&gt;</div><div class="line">还可输入&lt;span id=<span class="string">"showLeft"</span>&gt;<span class="number">50</span>&lt;/span&gt;字</div><div class="line"></div><div class="line"><span class="comment">//注册</span></div><div class="line">$(document).on(<span class="string">'keyup'</span>, <span class="string">'#msg'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		_maxlen.isMax(<span class="string">'#msg'</span>, <span class="string">'#showLeft'</span>);</div><div class="line">&#125;).focus(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		_maxlen.disabledRightMouse();</div><div class="line">&#125;).blur(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		_maxlen.enabledRightMouse();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *监控输入字数</div><div class="line"> * content:textarea[data-max-len] 输入框</div><div class="line"> * container:span 显示剩余字数</div><div class="line"> * */</div><div class="line"><span class="keyword">var</span> _maxlen = &#123;</div><div class="line">    isMax: <span class="function"><span class="keyword">function</span> <span class="params">(content, container)</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> textarea = (<span class="keyword">typeof</span> content == <span class="string">'string'</span>) &amp;&amp; content.constructor == String ? $(content) : content;</div><div class="line">        container = (<span class="keyword">typeof</span> container == <span class="string">'string'</span>) &amp;&amp; container.constructor == String ? $(container) : container;</div><div class="line">        <span class="keyword">var</span> max_length = parseInt(textarea.data(<span class="string">'max-len'</span>));</div><div class="line">        <span class="keyword">var</span> _val = $.trim(textarea.val());</div><div class="line">        <span class="keyword">var</span> _leftLen = max_length;</div><div class="line">        <span class="keyword">if</span> (twttr.txt.getTweetLength(_val) &gt; max_length) &#123;</div><div class="line">            textarea.val(_val.substring(<span class="number">0</span>, max_length));</div><div class="line">            _leftLen = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            _leftLen = max_length - twttr.txt.getTweetLength(textarea.val());</div><div class="line">        &#125;</div><div class="line">        container.text(_leftLen);</div><div class="line">    &#125;,</div><div class="line">    disabledRightMouse: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        document.oncontextmenu = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    enabledRightMouse: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        document.oncontextmenu = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
]]></content>
    
    <summary type="html">
    
      jQuery应用杂记
    
    </summary>
    
      <category term="web" scheme="http://blog.newbmiao.com/categories/web/"/>
    
      <category term="practice" scheme="http://blog.newbmiao.com/categories/web/practice/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>php信号处理</title>
    <link href="http://blog.newbmiao.com/2015/10/25/how-to-use-php-signal.html"/>
    <id>http://blog.newbmiao.com/2015/10/25/how-to-use-php-signal.html</id>
    <published>2015-10-25T14:10:33.000Z</published>
    <updated>2016-07-07T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="pcntl"><a href="#pcntl" class="headerlink" title="pcntl"></a>pcntl</h1><h2 id="pcntl-signal"><a href="#pcntl-signal" class="headerlink" title="pcntl_signal"></a>pcntl_signal</h2><p>信号注册函数</p>
<h2 id="pcntl-alarm"><a href="#pcntl-alarm" class="headerlink" title="pcntl_alarm"></a>pcntl_alarm</h2><ul>
<li>指定秒数中断程序执行任务。</li>
<li>每次执行只会有一个定时器生效，若之前计时器还没结束就定义新定时器，会替代之前定时器并返回之前定时器结束前秒数，若之前计时器已完成返回0</li>
<li>参数设为0，会清空当前所有定时器，并不发起调用</li>
<li>定时器会中断系统，即便是sleep执行中</li>
</ul>
<a id="more"></a>
<hr>
<pre><code>&lt;?php
declare(ticks = 1);

function signal_handler($signal) {
    print &quot;Caught SIGALRM\n&quot;;
    echo pcntl_alarm(3).PHP_EOL;//再次调用
}

pcntl_signal(SIGALRM, &quot;signal_handler&quot;, true);
echo pcntl_alarm(5).PHP_EOL;//只会调用一次

echo pcntl_alarm(3).PHP_EOL;//提示5，因为上一个计时器完成还剩5s

while(1) {
    //
}
?&gt;
</code></pre><h2 id="pcntl-fork"><a href="#pcntl-fork" class="headerlink" title="pcntl_fork"></a>pcntl_fork</h2><p>创建子进程</p>
<ul>
<li>unix创建进程效率要比线程高，但需考虑进程数和内存等限制</li>
</ul>
<hr>
<pre><code>&lt;?php
$pid = pcntl_fork();

switch($pid) {
    case -1:
        print &quot;Could not fork!\n&quot;;
        exit;
    case 0://子进程
        print &quot;In child!\n&quot;;
        break;
    default://父进程，值代表子进程PID
        print &quot;In parent!\n&quot;;
}
?&gt;
</code></pre><h2 id="pcntl-waitpid"><a href="#pcntl-waitpid" class="headerlink" title="pcntl_waitpid"></a>pcntl_waitpid</h2><p>等待或返回fork的子进程状态<br>挂起当前进程的执行直到参数pid指定的进程号的进程退出， 或接收到一个信号要求中断当前进程或调用一个信号处理函数。<br>如果pid指定的子进程在此函数调用时已经退出（俗称僵尸进程），此函数 将立刻返回。<br><strong>pid可选值</strong></p>
<ul>
<li>小于-1     等待任意进程组ID等于参数pid给定值的绝对值的进程。</li>
<li>-1     等待任意子进程;与pcntl_wait函数行为一致。</li>
<li>0     等待任意与调用进程组ID相同的子进程。</li>
<li>大于0     等待进程号等于参数pid值的子进程。 </li>
</ul>
<p><strong>options</strong></p>
<ul>
<li>WNOHANG     如果没有子进程退出立刻返回。</li>
<li>WUNTRACED     子进程已经退出并且其状态未报告时返回。 </li>
</ul>
<p><a href="http://www.hackingwithphp.com/16/1/7/other-ways-to-evaluate-pcntl_waitpids-return-value" target="_blank" rel="external">其他方式去计算本函数的返回值</a></p>
<h2 id="pcntl-wexitstatus"><a href="#pcntl-wexitstatus" class="headerlink" title="pcntl_wexitstatus"></a>pcntl_wexitstatus</h2><p>检查状态代码是否代表一个正常的退出。</p>
<ul>
<li>进程共享内容</li>
</ul>
<hr>
<pre><code>&lt;?php
for ($i = 1; $i &lt;= 5; ++$i) {
    $pid = pcntl_fork();

    if (!$pid) {
        sleep(1);
        print &quot;In child $i\n&quot;;
        exit($i);
    }
}
while (pcntl_waitpid(0, $status) != -1) {
    $status = pcntl_wexitstatus($status);
    echo &quot;Child $status completed\n&quot;;
}
?&gt;
</code></pre><h2 id="SIGCHLD-父进程不阻塞"><a href="#SIGCHLD-父进程不阻塞" class="headerlink" title="SIGCHLD: 父进程不阻塞"></a>SIGCHLD: 父进程不阻塞</h2><p>SIGCHLD信号会在<strong>一个或多个</strong>子进程结束时向父进程通知<br>此时再加上pcntl_waitpid loop来让父进程及时回收全部结束的子进程</p>
<hr>
<pre><code>&lt;?php
declare(ticks = 1);

pcntl_signal(SIGCHLD, &quot;signal_handler&quot;);

function signal_handler($signal) {
    switch($signal) {
        case SIGCHLD:
            while (pcntl_waitpid(0, $status) != -1) {
                $status = pcntl_wexitstatus($status);
                echo &quot;Child $status completed\n&quot;;
            }

            exit;
    }
}

for ($i = 1; $i &lt;= 5; ++$i) {
    $pid = pcntl_fork();

    if (!$pid) {
        sleep(3);
        print &quot;In child $i\n&quot;;
        exit($i);
    }
}

while(1) {
    //下面的代码会在父进程执行
    echo &quot;parent processing here&quot;.PHP_EOL;
    sleep(1);
}
?&gt;
</code></pre><h2 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec"></a>pcntl_exec</h2><p>调用程序执行，并取代自身</p>
<hr>
<pre><code>&lt;?php
print &quot;Before\n&quot;;
pcntl_exec(&quot;/usr/bin/uptime&quot;);
//下边不会输出
print &quot;After\n&quot;; 
?&gt;
</code></pre>]]></content>
    
    <summary type="html">
    
      php信号处理
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
      <category term="signal" scheme="http://blog.newbmiao.com/categories/php/signal/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="pcntl" scheme="http://blog.newbmiao.com/tags/pcntl/"/>
    
      <category term="signal" scheme="http://blog.newbmiao.com/tags/signal/"/>
    
  </entry>
  
  <entry>
    <title>gearman分布式任务服务器学习记录</title>
    <link href="http://blog.newbmiao.com/2015/10/16/gearman-beginer-guide.html"/>
    <id>http://blog.newbmiao.com/2015/10/16/gearman-beginer-guide.html</id>
    <published>2015-10-16T13:18:33.000Z</published>
    <updated>2016-07-07T13:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>以下是强大的gearman学习及安装记录，代码demo下边的来自网络的附录有很多可以参考。</p>
</blockquote>
<p>Gearman 是一套用来把程式需求委派给机器，提供通用的程序框架来将任务分发在机器运算。<br>它同时具备并行工作的能力、负载均衡处理的能力，以及在不同程序语言之间沟通的能力。</p>
<a id="more"></a>
<h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="gearmand"><a href="#gearmand" class="headerlink" title="gearmand"></a>gearmand</h3><ul>
<li><a href="https://launchpad.net/gearmand" target="_blank" rel="external">gearmand-job server</a></li>
</ul>
<h4 id="安装gearmand依赖的库"><a href="#安装gearmand依赖的库" class="headerlink" title="安装gearmand依赖的库"></a>安装gearmand依赖的库</h4><pre><code>yum install -y boost-devel gperf libevent-devel libuuid-devel
</code></pre><h4 id="安装gearmand服务"><a href="#安装gearmand服务" class="headerlink" title="安装gearmand服务"></a>安装gearmand服务</h4><pre><code>tar xzf gearmand-1.1.12.tar.gz
cd gearmand-1.1.12
./configure
make
make install
</code></pre><h3 id="gearman"><a href="#gearman" class="headerlink" title="gearman"></a>gearman</h3><ul>
<li><a href="http://pecl.php.net/package/gearman" target="_blank" rel="external">php扩展</a></li>
</ul>
<h4 id="安装php扩展"><a href="#安装php扩展" class="headerlink" title="安装php扩展"></a>安装php扩展</h4><pre><code> tar xzf gearman-1.1.2.tgz
cd gearman-1.1.2
phpize
./configure
make
make install   

# 在php.ini中添加
extension=&quot;gearman.so&quot;
</code></pre><h3 id="gearman启动"><a href="#gearman启动" class="headerlink" title="gearman启动"></a>gearman启动</h3><pre><code> 1) 创建日志gearmand.log
# touch /pathto/logs/gearmand.log

2）启动
# /usr/local/sbin/gearmand -d -u root -L 192.168.142.130 --log-file=/pathto/logs/gearmand.log

3）参数详解
-b，--backlog= 储备的监听连接数量
-d, --daemon 后台运行
-f, --file-descriptors= 文件描述符的数量
-h, --help 帮助
-j, --job-retries= 在ob server移除不可用job之前运行的次数，防止不断运行导致其他可用worker崩溃。默认没有限制
-l, -log-file= 日志文件存放位置(默认记录最简单日志)
-L, --listen= 监听的IP，默认全部接受
-p, --port= 指定监听端口
-P, --pid-file= 指定进程ID写入位置
-r, --protocol= 加载协议模块
-q, --queue-type= 指定持久化队列
-t, --threads= 使用的I/9线程数量。默认为0
-u, --user= 启动后，切换到指定用户
-v, --verbose 增加一级详细程度
-V, --version 显示版本信息
</code></pre><p><strong> issue </strong>: /usr/local/sbin/gearmand: error while loading shared libraries: libmysqlclient.so.18: cannot open shared object file: No such file or directory</p>
<hr>
<p>解决方案：将对应lib链接到/usr/lib</p>
<pre><code>ln -s /home/vagrant/online/mysql5.6/lib/libmysqlclient.so.18  /usr/lib
ldconfig -v
</code></pre><h3 id="gearman部署"><a href="#gearman部署" class="headerlink" title="gearman部署"></a>gearman部署</h3><h4 id="启动gearmand"><a href="#启动gearmand" class="headerlink" title="启动gearmand"></a>启动gearmand</h4><ul>
<li><p>启动</p>
<pre><code>/usr/local/sbin/gearmand -d -u root -L 0.0.0.0 --log-file=/pathto/logs/gearmand.log
</code></pre></li>
<li>对应配置修改 common.conf &gt; gearman配置</li>
</ul>
<h4 id="启动worker"><a href="#启动worker" class="headerlink" title="启动worker"></a>启动worker</h4><ul>
<li><p>后台运行</p>
<pre><code>nohup php scripts/gearman_job/job.php &gt;/log/gearman.log &amp;
</code></pre></li>
<li><p>supervisor守护worker进程（推荐）</p>
</li>
</ul>
<pre><code>yum install supervisor
service supervisor start
service supervisor stop
#创建配置文件
/etc/supervisor/conf.d/gearmanwoker.conf:

[program:gearmanwoker]
command=php scripts/gearman_job/job.php
numprocs=12
directory=/dir_path/to/woker/
autostart=true
autorestart=true
stdout_logfile=/path/to/project/log/gearmanwoker.log
stdout_logfile_maxbytes=1MB
stderr_logfile=/path/to/project/log/gearmanwoker.log
stderr_logfile_maxbytes=1MB
</code></pre><blockquote>
<p>参见<a href="http://www.daredevel.com/php-jobs-with-gearman-and-supervisor/" target="_blank" rel="external">php-jobs-with-gearman-and-supervisor</a></p>
</blockquote>
<hr>
<p>update 2015 12-13</p>
<h2 id="worker管理：gearman-manager-（pecl-manger）"><a href="#worker管理：gearman-manager-（pecl-manger）" class="headerlink" title="worker管理：gearman manager （pecl_manger）"></a>worker管理：gearman manager （pecl_manger）</h2><h3 id="gearmanManager"><a href="#gearmanManager" class="headerlink" title="gearmanManager"></a>gearmanManager</h3><p><strong> 配置中需指定host，pid及log等 </strong></p>
<h4 id="启动manager-daemon"><a href="#启动manager-daemon" class="headerlink" title="启动manager daemon"></a>启动manager daemon</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scripts/gearmanManager/bin/pecl_manager<span class="selector-class">.php</span> -c scripts/gearmanManager/etc/config<span class="selector-class">.ini</span>  -d -vvv</div></pre></td></tr></table></figure>
<h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#SIGINT</div><div class="line">kill <span class="number">-2</span> `cat gearman-manager.pid`</div></pre></td></tr></table></figure>
<h4 id="重启child（worker）"><a href="#重启child（worker）" class="headerlink" title="重启child（worker）"></a>重启child（worker）</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># SIGHUP</div><div class="line">kill <span class="number">-1</span> `cat gearman-manager.pid`</div></pre></td></tr></table></figure>
<h2 id="gearmand-queue-持久化（针对background任务）"><a href="#gearmand-queue-持久化（针对background任务）" class="headerlink" title="gearmand queue 持久化（针对background任务）"></a>gearmand queue 持久化（针对background任务）</h2><p>对于大量访问压力及server宕机都有好处</p>
<figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo /usr/local/sbin/gearmand -d -u root -L 0.0.0.0 --log-file=/pathto/gearmand.log   --queue-type=MySQL \</div><div class="line">          -<span class="ruby">-mysql-host=localhost \</span></div><div class="line">          -<span class="ruby">-mysql-port=<span class="number">3306</span> \</span></div><div class="line">          -<span class="ruby">-mysql-user=root \</span></div><div class="line">          -<span class="ruby">-mysql-password=YOUR_PASSWORD \</span></div><div class="line">          -<span class="ruby">-mysql-db=qsc \</span></div><div class="line">          -<span class="ruby">-mysql-table=gearman_queue</span></div></pre></td></tr></table></figure>
<hr>
<blockquote>
<p>参考</p>
<p><strong>phpboy</strong></p>
<ul>
<li><a href="http://www.phpboy.net/2014-05/40-gearman-instruction.html" target="_blank" rel="external">Gearman调研/测试/原理分析</a></li>
</ul>
<p><strong>gearman</strong></p>
<ul>
<li><a href="http://gearman.info/index.html" target="_blank" rel="external">gearman.info</a></li>
<li><a href="http://gearman.org/" target="_blank" rel="external">gearman.org</a></li>
<li><a href="http://groups.google.com/group/gearman" target="_blank" rel="external">gearman google group</a></li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      gearman分布式任务服务器学习记录
    
    </summary>
    
      <category term="gearman" scheme="http://blog.newbmiao.com/categories/gearman/"/>
    
    
      <category term="gearman" scheme="http://blog.newbmiao.com/tags/gearman/"/>
    
  </entry>
  
  <entry>
    <title>iframe实现的无刷tab页</title>
    <link href="http://blog.newbmiao.com/2015/10/14/jquery-tabs-with-iframe.html"/>
    <id>http://blog.newbmiao.com/2015/10/14/jquery-tabs-with-iframe.html</id>
    <published>2015-10-14T01:29:19.000Z</published>
    <updated>2016-07-07T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>为了实现tab页无刷，又不想全部用ajax动态生成，同时需要在tab页内有相关操作，简单的话就是用iframe了</p>
<p>先来看个demo: <a href="http://blog.newbmiao.com/demo/iframe-tabs.html">iframe-tabs</a></p>
<blockquote>
<p>参考自<a href="http://deano.me/2011/08/jquery-tabs-iframes/" target="_blank" rel="external">jquery-tabs-iframes</a></p>
</blockquote>
<p>这个demo实现了基本的需求，使用中发现还有两点问题</p>
<ol>
<li>iframe 高度自适应</li>
<li>如果在iframe页内 <code>history.back(-1)</code> 历史返回时要记录之前选择的tab页</li>
<li>如果tab页要求实时性，还需要每次点击都请求页面，同时也可以只加载一个iframe并替换其src来复用，而不必每个tab都加载一个iframe</li>
</ol>
<a id="more"></a>
<h3 id="对于问题1："><a href="#对于问题1：" class="headerlink" title="对于问题1："></a>对于问题1：</h3><p>tabs的高度有统一设置，原demo的高度设置就可以使用，如果是单独针对外部iframe可使用</p>
<hr>
<pre><code>&lt;script type=&quot;text/javascript&quot;&gt;
    function iFrameHeight(id) {
        var ifm= document.getElementById(id);
        var subWeb = document.frames ? document.frames[id].document : ifm.contentDocument;
        if(ifm != null &amp;&amp; subWeb != null) {
            ifm.height = subWeb.body.scrollHeight;
            ifm.width = subWeb.body.scrollWidth;
            //动态设置高度后。避免滚动条滑到最下，要设置滑到顶端
            document.body.scrollTop = document.documentElement.scrollTop = 0;
        }
    }
&lt;/script&gt;
</code></pre><h3 id="对于问题2："><a href="#对于问题2：" class="headerlink" title="对于问题2："></a>对于问题2：</h3><p>使用localStorage或者sessionStorage可以记录tab选中状态，如果页面有其他唯一性标志，也可以和tab状态一同记录，便于判断是否要还原tab选中状态</p>
<p>下边两个封装好的store.js都便于多平台兼容</p>
<ul>
<li><a href="https://github.com/nbubna/store" target="_blank" rel="external">nbubna/store</a></li>
<li><a href="https://github.com/marcuswestin/store.js" target="_blank" rel="external">marcuswestin/store.js</a></li>
</ul>
<hr>
<pre><code>//返回时，将记录的tab状态还原
var tabIndex =  0;
//#subContainer为iframe，pageData.unique为页面唯一标识
if ($(&quot;#subContainer&quot;).length == 0 &amp;&amp; store.get(&apos;tab&apos;)) {
    tabIndex=store.get(&apos;tab&apos;) ;
    if(tabIndex.split(&apos;-&apos;)[0]==pageData.unique){
        tabIndex=tabIndex.split(&apos;-&apos;)[1];
    }
}
var $tabs = $(&apos;#tabs&apos;).tabs();
$(&apos;#tabs&apos;).tabs( &quot;option&quot;, &quot;active&quot;, tabIndex );

//在loadTabFrame()后
store.set(&apos;tab&apos;, pageData.unique+&quot;-&quot;+(parseInt(tab.split(&apos;-&apos;)[1])-1));
</code></pre><h3 id="对于问题3："><a href="#对于问题3：" class="headerlink" title="对于问题3："></a>对于问题3：</h3><p>将loadTabFrame中添加</p>
<hr>
<pre><code>if ($(&quot;#subContainer&quot;).length != 0) {
    $(&apos;#subContainer&apos;).prop(&apos;src&apos;, url);
    $(&apos;#aOpenOut&apos;).prop(&apos;href&apos;, url);
    //detach来复用
    $(tab).append($(&apos;.tabIframeWrapper&apos;).detach());
    $(tab).find(&quot;iframe&quot;).height($(window).height() - 80);
    store.set(&apos;tab&apos;, pageData.unique+&quot;-&quot;+(parseInt(tab.split(&apos;-&apos;)[1])-1));
    return;
}
</code></pre><p> 如此，完美解决无刷tab页需求。</p>
]]></content>
    
    <summary type="html">
    
      iframe实现的无刷tab页
    
    </summary>
    
      <category term="web" scheme="http://blog.newbmiao.com/categories/web/"/>
    
      <category term="practice" scheme="http://blog.newbmiao.com/categories/web/practice/"/>
    
    
      <category term="jquery" scheme="http://blog.newbmiao.com/tags/jquery/"/>
    
      <category term="iframe" scheme="http://blog.newbmiao.com/tags/iframe/"/>
    
  </entry>
  
  <entry>
    <title>中秋举牌</title>
    <link href="http://blog.newbmiao.com/2015/09/27/up-up-in-mid-autumn-day.html"/>
    <id>http://blog.newbmiao.com/2015/09/27/up-up-in-mid-autumn-day.html</id>
    <published>2015-09-27T03:07:08.000Z</published>
    <updated>2016-07-07T13:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>舉牌是一種支持的態度，是一種相信希望的精神，每隻可愛的小人都代表著支持你的人，鼓舞著你。舉牌世界沒有人是孤獨的，有時你需要獨自面對眼前的難關，舉牌小人會陪伴與鼓勵你，用舉牌挺你走向希望。我們相信有許多美好的事都等著我們高舉著，並將這樣的精神與鼓勵不斷地蔓延下去。</p>
</blockquote>
<a id="more"></a>
<p><img src="http://media.newbmiao.com/blog/zhongqiu2.jpg" alt="码农们，中秋快乐！"></p>
<p><img src="http://media.newbmiao.com/blog/zhongqiu3.jpg" alt="还有那句：Hello World"></p>
<p>DIY?<br>SEE HERE: <a href="http://upuptoyou.com/#" target="_blank" rel="external">upup-play</a></p>
]]></content>
    
    <summary type="html">
    
      中秋举牌
    
    </summary>
    
      <category term="journal" scheme="http://blog.newbmiao.com/categories/journal/"/>
    
    
      <category term="journal" scheme="http://blog.newbmiao.com/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>php银行卡校验</title>
    <link href="http://blog.newbmiao.com/2015/09/25/use-luhm-to-validate-bank-card.html"/>
    <id>http://blog.newbmiao.com/2015/09/25/use-luhm-to-validate-bank-card.html</id>
    <published>2015-09-25T07:54:54.000Z</published>
    <updated>2016-07-07T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p><strong>前言</strong><br>银行金卡，维萨和万事达、银联品牌，如果是贷记卡或准贷记卡，一定为16位卡号。而借记卡可以16-19位不等。<br>美国运通卡则不论金卡或是白金卡、普通卡，都是15位卡号。<br>16-19 位卡号校验位采用 Luhm 校验方法计算</p>
</blockquote>
<a id="more"></a>
<h1 id="银行卡的校验方式"><a href="#银行卡的校验方式" class="headerlink" title="银行卡的校验方式"></a>银行卡的校验方式</h1><h2 id="Luhm校验"><a href="#Luhm校验" class="headerlink" title="Luhm校验"></a>Luhm校验</h2><ol>
<li>将未带校验位的 15 位卡号从右依次编号 1 到 15，位于奇数位号上的数字乘以 2</li>
<li>将奇位乘积的个十位全部相加，再加上所有偶数位上的数字</li>
<li>将加法和加上校验位能被 10 整除。</li>
</ol>
<hr>
<pre><code>&lt;?php
/*
  16-19 位卡号校验位采用 Luhm 校验方法计算：
    1，将未带校验位的 15 位卡号从右依次编号 1 到 15，位于奇数位号上的数字乘以 2
    2，将奇位乘积的个十位全部相加，再加上所有偶数位上的数字
    3，将加法和加上校验位能被 10 整除。
*/
function luhm($s) {
    $n = 0;
    for ($i = strlen($s); $i &gt;= 1; $i--) {
        $index=$i-1;
        //偶数位
        if ($i % 2==0) {
            $n += $s{$index};
        } else {//奇数位
            $t = $s{$index} * 2;
            if ($t &gt; 9) {
                $t = (int)($t/10)+ $t%10;
            }
            $n += $t;
        }
    }
    return ($n % 10) == 0;
}

$r = luhm(&apos;6225881414207430&apos;);
var_dump($r);
?&gt;
</code></pre><blockquote>
<p>准确率怎么样，附文一片<br><a href="http://xiangkg.blog.163.com/blog/static/56688504201269112417414/" target="_blank" rel="external">银行卡校验规则(Luhn算法)</a></p>
</blockquote>
]]></content>
    
    <summary type="html">
    
      php银行卡校验
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
  </entry>
  
  <entry>
    <title>记一次mysql优化操作</title>
    <link href="http://blog.newbmiao.com/2015/09/25/remember-once-mysql-optimize-operations.html"/>
    <id>http://blog.newbmiao.com/2015/09/25/remember-once-mysql-optimize-operations.html</id>
    <published>2015-09-25T06:14:20.000Z</published>
    <updated>2016-07-07T13:09:20.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote>
<p>这次操作，起因是需要获取用户来源及用户性别，而用户的性别信息在第三方授权的中有，存为JSON格式，<br>不想用php去解析获取，所以试试mysql操作<br>如果你有更好的解决方案，请留言告诉我！</p>
<h1 id="情景简化"><a href="#情景简化" class="headerlink" title="情景简化"></a>情景简化</h1><h2 id="表结构"><a href="#表结构" class="headerlink" title="表结构"></a>表结构</h2><p>记录用户授权信息，有微博、QQ、微信，个人信息存为user_info</p>
</blockquote>
<ul>
<li>user_platform<ul>
<li>weibo_id,qq_id,weixin_id,user_info,uid,user_platform_id<h2 id="性别格式"><a href="#性别格式" class="headerlink" title="性别格式"></a>性别格式</h2></li>
</ul>
</li>
<li>微博 【gender】(‘m’ =&gt;男,’f’ =&gt; 女,’n’ =&gt; 未知)</li>
<li>QQ 【gender】 (‘男’ ,’女’ )</li>
<li>微信 【sex】(1 =&gt;男,2 =&gt; 女)<h2 id="附加条件"><a href="#附加条件" class="headerlink" title="附加条件"></a>附加条件</h2></li>
<li>数据量近百万行，处理不能太耗时</li>
</ul>
<a id="more"></a>
<hr>
<h1 id="用户来源"><a href="#用户来源" class="headerlink" title="用户来源"></a>用户来源</h1><p>先来个简单的，因为授权账户不是和用户一一对应，所以就是判断相关第三方id不为空则为对应用户来源，没有涉及绑定所以第三方信息实际唯一（表设计不是很合理，这个略过）</p>
<pre><code>SELECT IF((ISNULL(weixin_id) || weixin_id != &apos;&apos;, IF((ISNULL(weibo_id) || weibo_id != &apos;&apos;, IF((ISNULL(qq_id) || qq_id != &apos;&apos;, &apos;手机&apos;, &apos;QQ&apos;), &apos;微博&apos;), &apos;微信&apos;) AS user_source, uid
FROM user_platform
WHERE uid != 0
</code></pre><p>其中 <code>ISNULL(weixin_id) || weixin_id != &#39;&#39;</code> 用来判断null和空字符串两种情况 也可以用 <code>ISNULL(weixin_id) || LENGTH(TRIM(weixin_id)) &lt; 1</code></p>
<h1 id="性别获取"><a href="#性别获取" class="headerlink" title="性别获取"></a>性别获取</h1><ul>
<li>分两类（gender，sex）去截取性别，</li>
<li>然后放到临时表中，处理为统一格式的sex（1=&gt;男,2=&gt;女,0=&gt;未知）</li>
<li>在用户表中加一列sex并利用临时表更新<h2 id="字符替换判断"><a href="#字符替换判断" class="headerlink" title="字符替换判断"></a>字符替换判断</h2>使用mysql函数</li>
<li>locate</li>
<li>mid</li>
</ul>
<p>以微信为例，判断是否包含性别</p>
<pre><code>SELECT locate(&apos;sex&quot;:&apos;, user_info, 50) AS is_sex
FROM user_platform
WHERE user_info != &apos;&apos;    
HAVING is_sex != 0
</code></pre><p>然后截取性别，开始用</p>
<pre><code>SELECT locate(&apos;sex&quot;:&apos;, user_info, 50) AS is_sex, mid(user_info, locate(&apos;sex&quot;:&apos;, user_info, 50) + 5, 1) AS sex
FROM user_platform
WHERE user_info != &apos;&apos;
HAVING is_sex != 0
</code></pre><p>发现特变慢，而且locate一样的判断执行两次，不如换做一次</p>
<pre><code>SELECT mid(user_info, is_sex + 5, 1) AS sex, uid
FROM user_platform p, (SELECT locate(&apos;sex&quot;:&apos;, user_info, 50) AS is_sex, user_platform_id
    FROM user_platform
    WHERE user_info != &apos;&apos;
        AND uid != 0
    HAVING is_sex != 0
    ) t
WHERE t.user_platform_id = p.user_platform_id
GROUP BY uid
</code></pre><p><strong>既然判断index，那如果先知道从哪开始判断</strong>,那就先获取最小位置，再利用locate第三个参数pos加快查找</p>
<pre><code>SELECT MIN(is_sex)
FROM (SELECT locate(&apos;sex&quot;:&apos;, user_info) AS is_sex
    FROM user_platform
    WHERE user_info != &apos;&apos;

    HAVING is_sex != 0
    ) t
</code></pre><p>获取到最小位置为：57，那就 locate(‘sex”:’, user_info,55) ,其实可以用57，保险起见小点啦</p>
<p>效率提升,主要时间上 （本地PC测试）： 10.17 sec 》》》7.36 sec</p>
<p>然后插入到临时表，mysql不能直接select into，所以先创建表载insert into</p>
<pre><code>CREATE TABLE user_sex (
    uid int(11) NOT NULL,
    sex char(1) NOT NULL,
    PRIMARY KEY (uid)
)ENGINE = InnoDB DEFAULT CHARSET = `utf8`;

INSERT INTO user_sex
    (uid, sex)
SELECT uid, sex
FROM (SELECT mid(user_info, is_sex + 5, 1) AS sex, uid
    FROM user_platform p, (SELECT locate(&apos;sex&quot;:&apos;, user_info, 55) AS is_sex, user_platform_id
        FROM user_platform
        WHERE user_info != &apos;&apos;
            AND uid != 0
        HAVING is_sex != 0
        ) t
    WHERE t.user_platform_id = p.user_platform_id GROUP BY uid
    ) tmp
</code></pre><p>微博和QQ的相同处理，只不过判断的是gender<br>最后需要处理的是sex字段的统一，用replace搞定</p>
<pre><code>UPDATE user_sex
SET sex = replace(sex, &apos;男&apos;, 1);
UPDATE user_sex
SET sex = replace(sex, &apos;女&apos;, 2);
UPDATE user_sex
SET sex = replace(sex, &apos;m&apos;, 1);
UPDATE user_sex
SET sex = replace(sex, &apos;f&apos;, 2);
UPDATE user_sex
SET sex = replace(sex, &apos;&quot;&apos;, 0);
# 最后一个是发现`gender:&quot;&quot;`情况
</code></pre><p>最后的最后，把临时表删了吧</p>
<pre><code>DROP TABLE user_sex
</code></pre><p>到这里，可优化的部分还是有的，根据业务，还可以加一些判断减少待处理数据，比方说 uid为0：非注册用户 等等</p>
<p><strong>总结一下，除了在添加user表sex列会锁表比较长时间，<br>最后的用临时表更新和其余查询操作的锁表时间几乎微乎其微，<br>把统一操作放临时表也可以避免查询操作等待的时间，<br>优化无非就是做了大化小的工作。</strong></p>
<blockquote>
<p>另外备注下 mysql的sql文件注释符”–”错了,需要一个空格,应该是”– “.<br>如果想发现更多，请使用mysql slow query log</p>
<p>  #慢查询设置<br>    set GLOBAL long_query_time=1<br>    set GLOBAL log_slow_queries=ON<br>        set GLOBAL log_queries_not_using_indexes=1<br>    show variables like ‘%slow%’<br>    show variables like ‘%long_query%’</p>
<pre><code># 以table查看
set global log_output=&apos;TABLE&apos;;
select * from mysql.slow_log;
</code></pre></blockquote>
]]></content>
    
    <summary type="html">
    
      记一次mysql优化操作
    
    </summary>
    
      <category term="mysql" scheme="http://blog.newbmiao.com/categories/mysql/"/>
    
      <category term="optimize" scheme="http://blog.newbmiao.com/categories/mysql/optimize/"/>
    
    
      <category term="mysql" scheme="http://blog.newbmiao.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>向php大神致敬</title>
    <link href="http://blog.newbmiao.com/2015/09/24/a-tribute-to-the-great-god-of-php.html"/>
    <id>http://blog.newbmiao.com/2015/09/24/a-tribute-to-the-great-god-of-php.html</id>
    <published>2015-09-24T04:59:24.000Z</published>
    <updated>2016-07-07T13:09:18.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>向鸟哥（laruence）致敬，向所有php大神致敬</strong></p>
<p>PHP7正式版就要发布了，鸟哥2015在Qcon中演讲<a href="http://pan.baidu.com/s/1o6lCXRk" target="_blank" rel="external">PHP7 – The New Engine for old good train .pdf</a> 已经透露了许多性能提升。</p>
<p>今天才看了一些，虽然目前还不能get到很多点，但是内心还是很受鼓舞。附文一篇帮助了解。</p>
<p><a href="http://hansionxu.blog.163.com/blog/static/24169810920158704014772/" target="_blank" rel="external">PHP 7 的革新与性能优化</a></p>
<blockquote>
<p>关于鸟哥 ,再附一文与phper共勉</p>
</blockquote>
<p><a href="http://www.oschina.net/news/59059/laruence-interview" target="_blank" rel="external">PHP 鸟哥：我也曾经是“不适合”编程的人</a></p>
]]></content>
    
    <summary type="html">
    
      向php大神致敬
    
    </summary>
    
      <category term="journal" scheme="http://blog.newbmiao.com/categories/journal/"/>
    
    
      <category term="journal" scheme="http://blog.newbmiao.com/tags/journal/"/>
    
  </entry>
  
  <entry>
    <title>mysql常用函数积累</title>
    <link href="http://blog.newbmiao.com/2015/09/23/mysql-common-function-accumulation.html"/>
    <id>http://blog.newbmiao.com/2015/09/23/mysql-common-function-accumulation.html</id>
    <published>2015-09-23T13:56:47.000Z</published>
    <updated>2017-02-08T02:31:33.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="时间处理"><a href="#时间处理" class="headerlink" title="时间处理"></a>时间处理</h2><ul>
<li><p>FROM_UNIXTIME</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">UNIX时间戳转换为日期用函数：</div><div class="line">	<span class="function"><span class="keyword">select</span> <span class="title">FROM_UNIXTIME</span>(<span class="params"><span class="number">1156219870</span></span>)</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>UNIX_TIMESTAMP</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">日期转换为UNIX时间戳用函数：</div><div class="line">	<span class="keyword">select</span> <span class="keyword">UNIX_TIMESTAMP</span>(<span class="string">'2006-11-04 12:23:00'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>date_format</p>
<figure class="highlight cos"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">查询当天的记录数：</div><div class="line">	DATE_FORMAT(FROM_UNIXTIME(ctime),'<span class="built_in">%Y</span>-<span class="built_in">%m</span>-<span class="built_in">%d</span>') = curdate()</div></pre></td></tr></table></figure>
</li>
<li><p>N天内记录</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> *  <span class="keyword">from</span> table_name <span class="keyword">where</span> <span class="keyword">datediff</span>(<span class="keyword">curdate</span>(),from_unixtime(timestamp_colname,<span class="string">'%Y-%m-%d'</span>))&gt;=N;</div></pre></td></tr></table></figure>
</li>
</ul>
<a id="more"></a>
<h2 id="字符串处理"><a href="#字符串处理" class="headerlink" title="字符串处理"></a>字符串处理</h2><ul>
<li><p>IF</p>
<figure class="highlight gauss"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">IF</span>(<span class="keyword">expr</span>,val1,val2) <span class="meta">#判断expr，为真则val1，否则val2</span></div></pre></td></tr></table></figure>
</li>
<li><p>IFNULL</p>
<figure class="highlight autoit"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> IFNULL(expr1,expr2) <span class="meta">#非expr1则expr2</span></div></pre></td></tr></table></figure>
</li>
<li><p>ISNULL</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">select</span> <span class="keyword">ISNULL</span>(<span class="literal">null</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>MID</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">截取字符串</div><div class="line">	<span class="keyword">select</span> <span class="keyword">MID</span>(expr1,<span class="keyword">start</span>,<span class="keyword">length</span>) #<span class="keyword">start</span>从<span class="number">0</span>开始</div></pre></td></tr></table></figure>
</li>
<li><p>LOCATE</p>
<figure class="highlight perl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">判断字符位置</div><div class="line">	<span class="keyword">select</span> LOCATE(<span class="string">'ab'</span>,<span class="string">'efgabc'</span>[,<span class="keyword">pos</span>]) <span class="comment">#返回字符位置，从1开始，未找到返回0；pos参数可提供需要越过的查找offset</span></div></pre></td></tr></table></figure>
</li>
<li><p>INSTR</p>
<figure class="highlight hsp"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">判断字符位置,参数与LOCATE相反，无<span class="keyword">pos</span>参数</div><div class="line">	select <span class="keyword">INSTR</span>(<span class="string">'efgabc'</span>，<span class="string">'ab'</span>)</div></pre></td></tr></table></figure>
</li>
<li><p>concat &amp; concat_ws</p>
<figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="title">concat</span><span class="params">(str1,str2,[str3]...)</span></span></div><div class="line"><span class="function"><span class="title">concat_ws</span><span class="params">(separator,str1,str2,[str3])</span></span></div></pre></td></tr></table></figure>
</li>
<li><p>group_concat</p>
<figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">列转行，默认,号分隔</div><div class="line">	group_concat(<span class="built_in">name</span> separator ';')  <span class="comment">#指定分隔符</span></div><div class="line">	group_concat(<span class="built_in">name</span> order <span class="keyword">by</span> <span class="built_in">name</span> desc) <span class="comment">#指定排序</span></div><div class="line"></div><div class="line"><span class="comment">#这里有个坑，默认返回是有长度限制的，一般是1024</span></div><div class="line">	show variables like <span class="string">"group_concat_max_len"</span>;</div><div class="line"><span class="comment">#按需调整，当前生效</span></div><div class="line">	<span class="keyword">set</span> GLOBAL group_concat_max_len=<span class="number">2048</span>;</div></pre></td></tr></table></figure>
</li>
<li><p>ELT</p>
<figure class="highlight cs"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">根据N的值选择第N个字符串</div><div class="line">	ELT(N,str1,str2,str3,...)</div><div class="line">	eg: <span class="function"><span class="keyword">select</span> <span class="title">elt</span>(<span class="params"><span class="number">1</span>,<span class="string">'男'</span>,<span class="string">'女'</span></span>)</span>; <span class="meta">#枚举性别</span></div></pre></td></tr></table></figure>
</li>
<li><p>FIND_IN_SET</p>
<figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FIND_IN_SET(str,strlist)</div><div class="line">eg1:in和FILD_IN_SET() 的区别</div><div class="line"></div><div class="line"><span class="keyword">select</span> <span class="keyword">id</span>, <span class="keyword">list</span>, <span class="keyword">name</span> <span class="keyword">from</span> <span class="keyword">table</span> <span class="keyword">where</span> FIND_IN_SET( <span class="string">'daodao'</span> , <span class="keyword">list</span>)</div><div class="line">所以如果<span class="keyword">list</span>是常量（如：(<span class="string">'libk'</span>, <span class="string">'zyfon'</span>, <span class="string">'daodao'</span>))，则可以直接用<span class="keyword">IN</span>， 否则要用FIND_IN_SET()函数</div><div class="line"></div><div class="line">eg2:按<span class="keyword">in</span>排序</div><div class="line"><span class="keyword">select</span> * <span class="keyword">from</span> article <span class="keyword">where</span> <span class="keyword">id</span> <span class="keyword">in</span>(<span class="number">1</span>,<span class="number">5</span>,<span class="number">3</span>) <span class="keyword">ORDER</span> <span class="keyword">BY</span> FIND_IN_SET(<span class="string">'id'</span>,<span class="string">'1,5,3'</span>);</div></pre></td></tr></table></figure>
</li>
<li><p>QUOTE</p>
<figure class="highlight"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">安全转义</div></pre></td></tr></table></figure>
</li>
<li><p>trim</p>
<figure class="highlight ruleslanguage"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(<span class="string">'  bar   '</span>);</div><div class="line">        -&gt; <span class="string">'bar'</span></div><div class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(LEADING <span class="string">'x'</span> <span class="keyword">FROM</span> <span class="string">'xxxbarxxx'</span>);</div><div class="line">        -&gt; <span class="string">'barxxx'</span></div><div class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(BOTH <span class="string">'x'</span> <span class="keyword">FROM</span> <span class="string">'xxxbarxxx'</span>);</div><div class="line">        -&gt; <span class="string">'bar'</span></div><div class="line">mysql&gt; <span class="keyword">SELECT</span> <span class="keyword">TRIM</span>(TRAILING <span class="string">'xyz'</span> <span class="keyword">FROM</span> <span class="string">'barxxyz'</span>);</div><div class="line">        -&gt; <span class="string">'barx'</span></div></pre></td></tr></table></figure>
</li>
</ul>
<p>未完待续。。。</p>
]]></content>
    
    <summary type="html">
    
      mysql常用函数积累
    
    </summary>
    
      <category term="mysql" scheme="http://blog.newbmiao.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://blog.newbmiao.com/tags/mysql/"/>
    
  </entry>
  
</feed>
