<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>菜鸟Miao</title>
  <subtitle>start from a newb...</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.newbmiao.com/"/>
  <updated>2018-10-05T06:49:08.835Z</updated>
  <id>http://blog.newbmiao.com/</id>
  
  <author>
    <name>菜鸟Miao</name>
    <email>newbvirgil@gmail.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>go源码分析之内存分配</title>
    <link href="http://blog.newbmiao.com/2018/08/20/go-source-analysis-of-memory-alloc.html"/>
    <id>http://blog.newbmiao.com/2018/08/20/go-source-analysis-of-memory-alloc.html</id>
    <published>2018-08-20T07:51:22.000Z</published>
    <updated>2018-10-05T06:49:08.835Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><h1 id="go源码分析之内存池"><a href="#go源码分析之内存池" class="headerlink" title="go源码分析之内存池"></a>go源码分析之内存池</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>go自带内存管理，主要是内存池和垃圾回收两部分。因为其对内存的管理在性能和空间利用率上的高效，go内存大多数情况不需要用户自己去管理内存，让程序员减少了很多在内存管理的心智成本。虽然如此，本文还是借着源码，分析下go的内存管理中内存池分配时如何实现的，希望对大家了解有所帮助。如有问题，欢迎探讨指正。<br>(源码基于go 1.10.3)</p><p>首先，内存分配模型基于<a href="http://goog-perftools.sourceforge.net/doc/tcmalloc.html" target="_blank" rel="external">tcmalloc</a>，Tcmalloc是Google gperftools里的组件之一。全名是 thread cache malloc（线程缓存分配器）,其内存管理分为线程内存和中央堆两部分。在并行程序下分配小对象（&lt;=32k）的效率很高。<br>Tcmalloc核心思想是把内存分成多级来降低锁的粒度。每个线程都会有一个cache，用于无锁分配小对象，当内存不足分配小对象，就去central申请，在不足就去heap申请，heap最终是向操作系统申请。<br>这样的分配模型，维护一个用户态的内存池，不仅提高了内存在频繁分配、释放时的效率，而且有效地减少内存碎片。</p><p>下面我们依次看下go中内存如何划分，主要的一些内存结构，最后在结合源码看一下主要的内存分配流程。</p><a id="more"></a><h2 id="内存划分"><a href="#内存划分" class="headerlink" title="内存划分"></a>内存划分</h2><p>初始化时，go申请一段连续地址，并切分分为三块:spans bitmap areana<br>（详见runtime/malloc.go）</p><p>在64位系统中，他们对应关系是：<br>go中一个指针大小是8byte<br>arena区域就是heap，是供分配维护的内存池，对应区域大小是512G；<br>bitmap区域是标识arena中那些地址保存了对象，及对象中是否包含了指针，其中1个byte（8bit）对应arena中4个指针大小的内存（即：2bit对应1个指针大小），对应大小16G；<br>span是页管理单元，是内存分配的基本单位，其中一个指针对应arena中1个虚拟地址页大小（8kb），对应大小512M</p><p>也就是如下图的大小分配：</p><p><img src="http://media.newbmiao.com/blog/go_areana.png" alt="内存大小对应"></p><h2 id="内存结构"><a href="#内存结构" class="headerlink" title="内存结构"></a>内存结构</h2><p>如下图是整体的内存结构：<br><img src="http://media.newbmiao.com/blog/memory.png" alt="内存结构"></p><h3 id="mspan"><a href="#mspan" class="headerlink" title="mspan"></a>mspan</h3><p>管理预分配页个数为sizeClass的连续地址内存，是基本的内存分配管理单位；<br>栈内存池（stack pool）就是使用mspan构成的链表来分配内存，具体见runtime/stack.go</p><p>(栈内存池是go协程启动是用来存储函数内变量，执行函数调用等；维护一个栈内存池，减少协程频繁启动退出的内存分配开销)<br></p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> mspan struct &#123;</div><div class="line">	next *mspan     // next span <span class="keyword">in</span> list, <span class="keyword">or</span> <span class="keyword">nil</span> <span class="keyword">if</span> none</div><div class="line">	prev *mspan     // previous span <span class="keyword">in</span> list, <span class="keyword">or</span> <span class="keyword">nil</span> <span class="keyword">if</span> none</div><div class="line">	list *mSpanList // <span class="type">For</span> debugging. <span class="type">TODO</span>: <span class="type">Remove</span>.</div><div class="line"></div><div class="line">	startAddr uintptr // address <span class="keyword">of</span> first byte <span class="keyword">of</span> span aka s.base()</div><div class="line">	npages    uintptr // number <span class="keyword">of</span> pages <span class="keyword">in</span> span</div><div class="line"></div><div class="line">	manualFreeList gclinkptr // list <span class="keyword">of</span> free objects <span class="keyword">in</span> _MSpanManual spans</div><div class="line"></div><div class="line">	freeindex uintptr </div><div class="line">	nelems uintptr // number <span class="keyword">of</span> <span class="keyword">object</span> <span class="keyword">in</span> the span.</div><div class="line">	allocCache <span class="built_in">uint64</span></div><div class="line">	allocBits  *gcBits</div><div class="line">	gcmarkBits *gcBits</div><div class="line"></div><div class="line">	sweepgen    <span class="built_in">uint32</span></div><div class="line">	divMul      <span class="built_in">uint16</span>     // <span class="keyword">for</span> divide by elemsize - divMagic.mul</div><div class="line">	baseMask    <span class="built_in">uint16</span>     // <span class="keyword">if</span> non-<span class="number">0</span>, elemsize <span class="keyword">is</span> a power <span class="keyword">of</span> <span class="number">2</span>, &amp; this will get <span class="keyword">object</span> allocation base</div><div class="line">	allocCount  <span class="built_in">uint16</span>     // number <span class="keyword">of</span> allocated objects</div><div class="line">	spanclass   spanClass  // size class <span class="keyword">and</span> noscan (<span class="built_in">uint8</span>)</div><div class="line">	incache     <span class="built_in">bool</span>       // being used by an mcache</div><div class="line">	state       mSpanState // mspaninuse etc</div><div class="line">	needzero    <span class="built_in">uint8</span>      // needs to be zeroed before allocation</div><div class="line">	divShift    <span class="built_in">uint8</span>      // <span class="keyword">for</span> divide by elemsize - divMagic.shift</div><div class="line">	divShift2   <span class="built_in">uint8</span>      // <span class="keyword">for</span> divide by elemsize - divMagic.shift2</div><div class="line">	elemsize    uintptr    // computed <span class="keyword">from</span> sizeclass <span class="keyword">or</span> <span class="keyword">from</span> npages</div><div class="line">	unusedsince <span class="built_in">int64</span>      // first time spotted by gc <span class="keyword">in</span> mspanfree state</div><div class="line">	npreleased  uintptr    // number <span class="keyword">of</span> pages released to the os</div><div class="line">	limit       uintptr    // <span class="keyword">end</span> <span class="keyword">of</span> data <span class="keyword">in</span> span</div><div class="line">	speciallock mutex      // guards specials list</div><div class="line">	specials    *special   // linked list <span class="keyword">of</span> special records sorted by offset.</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>里边比较重要的几个点：</p><ul><li>freeindex<br>介于0~nelems的可用块的索引位置，是下一个可用块的位置;在freeindex之前的块都是已分配的，之后的可能已分配，可能未分配。</li><li>allocBits<br>标记span中可用内存位置的bitmap，1标识可用</li><li>allocCache<br>缓存了从freeindex开始的allocBits的bit位补集，这样分配前使用count tailing zero方式可快速定位地址<br>（关于count tailing zero的实现，感兴趣同学可以看下sys.Ctz64的实现）</li><li>spanclass<br>代表span的大小和是否需要gc扫描（既包含指针）</li><li>elemsize<br>小对象对应是sizeClass对应的块大小；大对象，对应是整数页的大小</li></ul><h3 id="mcache"><a href="#mcache" class="headerlink" title="mcache"></a>mcache</h3><p>go中每个P(GMP中的P，是系统线程M绑定的用来调度G的处理器，同一时间只有一个M可以拥有P)中用来缓存小对象的结构，无需加锁；<br>每个mcache中有大小为67个mspan数组，存储不同级别大小的mspan<br>可以理解为local cache<br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> mcache <span class="keyword">struct</span> &#123;</div><div class="line">	next_sample <span class="keyword">int32</span>   <span class="comment">// trigger heap sample after allocating this many bytes</span></div><div class="line">	local_scan  <span class="keyword">uintptr</span> <span class="comment">// bytes of scannable heap allocated</span></div><div class="line"></div><div class="line">	tiny             <span class="keyword">uintptr</span></div><div class="line">	tinyoffset       <span class="keyword">uintptr</span></div><div class="line">	local_tinyallocs <span class="keyword">uintptr</span> <span class="comment">// number of tiny allocs not counted in other stats</span></div><div class="line"></div><div class="line">	<span class="comment">// The rest is not accessed on every malloc.</span></div><div class="line"></div><div class="line">	alloc [numSpanClasses]*mspan <span class="comment">// spans to allocate from, indexed by spanClass</span></div><div class="line"></div><div class="line">	stackcache [_NumStackOrders]stackfreelist</div><div class="line"></div><div class="line">	<span class="comment">// Local allocator stats, flushed during GC.</span></div><div class="line">	local_nlookup    <span class="keyword">uintptr</span>                  <span class="comment">// number of pointer lookups</span></div><div class="line">	local_largefree  <span class="keyword">uintptr</span>                  <span class="comment">// bytes freed for large objects (&gt;maxsmallsize)</span></div><div class="line">	local_nlargefree <span class="keyword">uintptr</span>                  <span class="comment">// number of frees for large objects (&gt;maxsmallsize)</span></div><div class="line">	local_nsmallfree [_NumSizeClasses]<span class="keyword">uintptr</span> <span class="comment">// number of frees for small objects (&lt;=maxsmallsize)</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><ul><li>alloc<br>是大小为67的指针数组，每个数组包含特定大小的块。</li><li>tiny<br>指向mcache内存开始地址</li><li>tinyoffset<br>记录tiny分配到什么位置（tiny对象分配完有剩余是，offset可用于下次分配计算）<figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">每个sizeClass对应的大小（byte）</div><div class="line"><span class="comment">// sizeclasses.go</span></div><div class="line">var class_to_size = [_NumSizeClasses]uint16&#123;<span class="number">0</span>, <span class="number">8</span>, <span class="number">16</span>, <span class="number">32</span>, <span class="number">48</span>, <span class="number">64</span>, <span class="number">80</span>, <span class="number">96</span>, <span class="number">112</span>, <span class="number">128</span>, <span class="number">144</span>, <span class="number">160</span>, <span class="number">176</span>, <span class="number">192</span>, <span class="number">208</span>, <span class="number">224</span>, <span class="number">240</span>, <span class="number">256</span>, <span class="number">288</span>, <span class="number">320</span>, <span class="number">352</span>, <span class="number">384</span>, <span class="number">416</span>, <span class="number">448</span>, <span class="number">480</span>, <span class="number">512</span>, <span class="number">576</span>, <span class="number">640</span>, <span class="number">704</span>, <span class="number">768</span>, <span class="number">896</span>, <span class="number">1024</span>, <span class="number">1152</span>, <span class="number">1280</span>, <span class="number">1408</span>, <span class="number">1536</span>, <span class="number">1792</span>, <span class="number">2048</span>, <span class="number">2304</span>, <span class="number">2688</span>, <span class="number">3072</span>, <span class="number">3200</span>, <span class="number">3456</span>, <span class="number">4096</span>, <span class="number">4864</span>, <span class="number">5376</span>, <span class="number">6144</span>, <span class="number">6528</span>, <span class="number">6784</span>, <span class="number">6912</span>, <span class="number">8192</span>, <span class="number">9472</span>, <span class="number">9728</span>, <span class="number">10240</span>, <span class="number">10880</span>, <span class="number">12288</span>, <span class="number">13568</span>, <span class="number">14336</span>, <span class="number">16384</span>, <span class="number">18432</span>, <span class="number">19072</span>, <span class="number">20480</span>, <span class="number">21760</span>, <span class="number">24576</span>, <span class="number">27264</span>, <span class="number">28672</span>, <span class="number">32768</span>&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="mcentral"><a href="#mcentral" class="headerlink" title="mcentral"></a>mcentral</h3><p>是指定大小的可用对象列表中枢<br>mcache不够用时，从mcentral分配nonempty中的span对象，每次分配时同时会处理可回收的span进行回收。<br>如果无可用span，则从heap中按需要的spanclass申请新的span</p><p>可理解为全局cache<br></p><figure class="highlight nimrod"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> mcentral struct &#123;</div><div class="line">	lock      mutex</div><div class="line">	spanclass spanClass</div><div class="line">	nonempty  mSpanList // list <span class="keyword">of</span> spans <span class="keyword">with</span> a free <span class="keyword">object</span>, ie a nonempty free list</div><div class="line">	empty     mSpanList // list <span class="keyword">of</span> spans <span class="keyword">with</span> no free objects (<span class="keyword">or</span> cached <span class="keyword">in</span> an mcache)</div><div class="line">	nmalloc <span class="built_in">uint64</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><ul><li>nonempty<br>链接可用对象的链表</li><li>empty<br>已被使用对象的列表</li><li>nmalloc<br>mcentral累计分配出去的对象数</li></ul><h3 id="mheap"><a href="#mheap" class="headerlink" title="mheap"></a>mheap</h3><p>真实拥有虚拟地址的，管理小对象和大对象的内存分配，以及一些全局变量<br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> mheap <span class="keyword">struct</span> &#123;</div><div class="line">	lock      mutex</div><div class="line">	free      [_MaxMHeapList]mSpanList <span class="comment">// free lists of given length up to _MaxMHeapList</span></div><div class="line">	freelarge mTreap                   <span class="comment">// free treap of length &gt;= _MaxMHeapList</span></div><div class="line">	busy      [_MaxMHeapList]mSpanList <span class="comment">// busy lists of large spans of given length</span></div><div class="line">	busylarge mSpanList                <span class="comment">// busy lists of large spans length &gt;= _MaxMHeapList</span></div><div class="line">	sweepgen  <span class="keyword">uint32</span>                   <span class="comment">// sweep generation, see comment in mspan</span></div><div class="line">	sweepdone <span class="keyword">uint32</span>                   <span class="comment">// all spans are swept</span></div><div class="line">	sweepers  <span class="keyword">uint32</span>                   <span class="comment">// number of active sweepone calls</span></div><div class="line"></div><div class="line">	allspans []*mspan <span class="comment">// all spans out there</span></div><div class="line">	spans []*mspan</div><div class="line"></div><div class="line">	sweepSpans [<span class="number">2</span>]gcSweepBuf</div><div class="line"></div><div class="line">	_ <span class="keyword">uint32</span> <span class="comment">// align uint64 fields on 32-bit for atomics</span></div><div class="line">	pagesInUse         <span class="keyword">uint64</span>  <span class="comment">// pages of spans in stats _MSpanInUse; R/W with mheap.lock</span></div><div class="line">	pagesSwept         <span class="keyword">uint64</span>  <span class="comment">// pages swept this cycle; updated atomically</span></div><div class="line">	pagesSweptBasis    <span class="keyword">uint64</span>  <span class="comment">// pagesSwept to use as the origin of the sweep ratio; updated atomically</span></div><div class="line">	sweepHeapLiveBasis <span class="keyword">uint64</span>  <span class="comment">// value of heap_live to use as the origin of sweep ratio; written with lock, read without</span></div><div class="line">	sweepPagesPerByte  <span class="keyword">float64</span> <span class="comment">// proportional sweep ratio; written with lock, read without</span></div><div class="line">	<span class="comment">// Malloc stats.</span></div><div class="line">	largealloc  <span class="keyword">uint64</span>                  <span class="comment">// bytes allocated for large objects</span></div><div class="line">	nlargealloc <span class="keyword">uint64</span>                  <span class="comment">// number of large object allocations</span></div><div class="line">	largefree   <span class="keyword">uint64</span>                  <span class="comment">// bytes freed for large objects (&gt;maxsmallsize)</span></div><div class="line">	nlargefree  <span class="keyword">uint64</span>                  <span class="comment">// number of frees for large objects (&gt;maxsmallsize)</span></div><div class="line">	nsmallfree  [_NumSizeClasses]<span class="keyword">uint64</span> <span class="comment">// number of frees for small objects (&lt;=maxsmallsize)</span></div><div class="line"></div><div class="line">	<span class="comment">// range of addresses we might see in the heap</span></div><div class="line">	bitmap        <span class="keyword">uintptr</span> <span class="comment">// Points to one byte past the end of the bitmap</span></div><div class="line">	bitmap_mapped <span class="keyword">uintptr</span></div><div class="line"></div><div class="line">	arena_start <span class="keyword">uintptr</span></div><div class="line">	arena_used  <span class="keyword">uintptr</span> <span class="comment">// Set with setArenaUsed.</span></div><div class="line"></div><div class="line">	arena_alloc <span class="keyword">uintptr</span></div><div class="line">	arena_end   <span class="keyword">uintptr</span></div><div class="line">	arena_reserved <span class="keyword">bool</span></div><div class="line"></div><div class="line">	_ <span class="keyword">uint32</span> <span class="comment">// ensure 64-bit alignment</span></div><div class="line"></div><div class="line">	central [numSpanClasses]<span class="keyword">struct</span> &#123;</div><div class="line">		mcentral mcentral</div><div class="line">		pad      [sys.CacheLineSize - unsafe.Sizeof(mcentral&#123;&#125;)%sys.CacheLineSize]<span class="keyword">byte</span></div><div class="line">	&#125;</div><div class="line"></div><div class="line">	spanalloc             fixalloc <span class="comment">// allocator for span*</span></div><div class="line">	cachealloc            fixalloc <span class="comment">// allocator for mcache*</span></div><div class="line">	treapalloc            fixalloc <span class="comment">// allocator for treapNodes* used by large objects</span></div><div class="line">	specialfinalizeralloc fixalloc <span class="comment">// allocator for specialfinalizer*</span></div><div class="line">	specialprofilealloc   fixalloc <span class="comment">// allocator for specialprofile*</span></div><div class="line">	speciallock           mutex    <span class="comment">// lock for special record allocators.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><ul><li>free<br>记录小对象分配</li><li>freelarge<br>记录大对象分配（&gt;32k）,mTreap是基于BestFit分配算法实现的树堆。树堆中每个节点是一整个span，树堆按页大小排序，页大小相同时按内存起始地址排序。<br>基于BestFit算法返回span时，如果span大小相同，先返回在地址最小的span。<br>详见mgclarge.go</li><li>allspans<br>每个分配出的span</li><li>spans<br>映射mspan和arena的page对应关系的查询表（如前所说span一个指针对应bitmap一页）</li><li>central<br>用于管理小对象的空闲链表，按spanClass索引</li><li>arena_start,arena_used<br>记录areana分配</li></ul><p>注意到其中span,cache,treap都是用fixalloc来分配,这是一个free-list的块分配器，用来分配指定大小的块。<br></p><figure class="highlight rust"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">type</span> <span class="title">fixalloc</span></span> <span class="class"><span class="keyword">struct</span> &#123;</span></div><div class="line">	size   uintptr</div><div class="line">	first  func(arg, p <span class="keyword">unsafe</span>.Pointer) <span class="comment">// called first time p is returned</span></div><div class="line">	arg    <span class="keyword">unsafe</span>.Pointer</div><div class="line">	list   *mlink</div><div class="line">	chunk  uintptr <span class="comment">// use uintptr instead of unsafe.Pointer to avoid write barriers</span></div><div class="line">	nchunk uint32</div><div class="line">	inuse  uintptr <span class="comment">// in-use bytes now</span></div><div class="line">	stat   *uint64</div><div class="line">	zero   <span class="built_in">bool</span> <span class="comment">// zero allocations</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><p>分配时，如果list为空，则申请一整块内存（chunk），每次按需分配；释放时再放回list中。<br>因为size是固定，所以没有内存碎片产生。</p><h2 id="内存分配流程"><a href="#内存分配流程" class="headerlink" title="内存分配流程"></a>内存分配流程</h2><p><img src="http://media.newbmiao.com/blog/malloc.png" alt="malloc"></p><h3 id="对象分配"><a href="#对象分配" class="headerlink" title="对象分配"></a>对象分配</h3><ul><li>size &gt; 32k,是大对象，直接从mheap中分配</li><li>size &lt; 16B,使用mcache的tiny allocator分配，将小对象合并存储<br>分配前会按大小先地址对齐<br>1.对于大于等于8B的对象，其内存地址按照8B对齐;<br>2.对于小于8B大于等于4B的对象，其内存地址按照4B对齐;<br>3.对于小于4B大于1B的对象，其内存地址按照2B对齐;<br>4.对于1B对象，无对齐要求。<br><strong>这样对齐会有部分内存浪费，但却能提升内存访问的效率。</strong></li><li>size 在16B ~ 32k 间，计算需要使用的sizeClass，然后使用mcache中对应的sizeClass的块分配</li><li>如果mcache对应的sizeClass已无可用块，则向mcentral申请</li><li>如果mcentral也没有可用的块，则向mheap申请，使用BestFit找到最合适的mspan。如果超过申请大小则按需切分，返回用户需要的页面数，剩余的页面构成一个新的mspan，放回mheap的空闲链表</li><li>如果mheap也无可用span，则向操作系统申请一组新的页(至少1MB)</li></ul><h3 id="对象释放"><a href="#对象释放" class="headerlink" title="对象释放"></a>对象释放</h3><ul><li>查找对象所属的类型大小，放入对应的mcache空闲链表</li><li>如果mcache空闲链表太长或者内存太大，则返回给mcentral的空闲链表</li><li>如果在某个范围的所有对象都归还给mcentral了，则将他归还给mheap</li></ul><p>具体见runtime/mgcsweep.go mspan.sweep,这里不展开</p><p>下面结合源码看下分配流程<br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">newobject</span><span class="params">(typ *_type)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</div><div class="line">	<span class="keyword">return</span> mallocgc(typ.size, typ, <span class="literal">true</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">mallocgc</span><span class="params">(size <span class="keyword">uintptr</span>, typ *_type, needzero <span class="keyword">bool</span>)</span> <span class="title">unsafe</span>.<span class="title">Pointer</span></span> &#123;</div><div class="line">	...</div><div class="line">    </div><div class="line">	dataSize := size</div><div class="line">	c := gomcache()</div><div class="line">	<span class="keyword">var</span> x unsafe.Pointer</div><div class="line">	noscan := typ == <span class="literal">nil</span> || typ.kind&amp;kindNoPointers != <span class="number">0</span></div><div class="line">	<span class="keyword">if</span> size &lt;= maxSmallSize &#123;</div><div class="line">    	<span class="comment">//极小对象（小于16byte，这个大小设置是综合考虑小对象合并和内存浪费得出）</span></div><div class="line">		<span class="keyword">if</span> noscan &amp;&amp; size &lt; maxTinySize &#123;</div><div class="line">			off := c.tinyoffset</div><div class="line">            <span class="comment">//地址对齐</span></div><div class="line">			<span class="keyword">if</span> size&amp;<span class="number">7</span> == <span class="number">0</span> &#123;</div><div class="line">				off = round(off, <span class="number">8</span>)</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> size&amp;<span class="number">3</span> == <span class="number">0</span> &#123;</div><div class="line">				off = round(off, <span class="number">4</span>)</div><div class="line">			&#125; <span class="keyword">else</span> <span class="keyword">if</span> size&amp;<span class="number">1</span> == <span class="number">0</span> &#123;</div><div class="line">				off = round(off, <span class="number">2</span>)</div><div class="line">			&#125;</div><div class="line">			<span class="keyword">if</span> off+size &lt;= maxTinySize &amp;&amp; c.tiny != <span class="number">0</span> &#123;</div><div class="line">				<span class="comment">// 剩余空间够用，就拼在后边</span></div><div class="line">				x = unsafe.Pointer(c.tiny + off)</div><div class="line">				c.tinyoffset = off + size</div><div class="line">				c.local_tinyallocs++</div><div class="line">				mp.mallocing = <span class="number">0</span></div><div class="line">				releasem(mp)</div><div class="line">				<span class="keyword">return</span> x</div><div class="line">			&#125;</div><div class="line">			<span class="comment">// 不够用，就新申请mspan</span></div><div class="line">			span := c.alloc[tinySpanClass]</div><div class="line">			v := nextFreeFast(span)</div><div class="line">			<span class="keyword">if</span> v == <span class="number">0</span> &#123;</div><div class="line">				v, _, shouldhelpgc = c.nextFree(tinySpanClass)</div><div class="line">			&#125;</div><div class="line">			x = unsafe.Pointer(v)</div><div class="line">			(*[<span class="number">2</span>]<span class="keyword">uint64</span>)(x)[<span class="number">0</span>] = <span class="number">0</span></div><div class="line">			(*[<span class="number">2</span>]<span class="keyword">uint64</span>)(x)[<span class="number">1</span>] = <span class="number">0</span></div><div class="line">			<span class="comment">// See if we need to replace the existing tiny block with the new one</span></div><div class="line">			<span class="comment">// based on amount of remaining free space.</span></div><div class="line">			<span class="keyword">if</span> size &lt; c.tinyoffset || c.tiny == <span class="number">0</span> &#123;</div><div class="line">				c.tiny = <span class="keyword">uintptr</span>(x)</div><div class="line">				c.tinyoffset = size</div><div class="line">			&#125;</div><div class="line">			size = maxTinySize</div><div class="line">		&#125; <span class="keyword">else</span> &#123;</div><div class="line">        	<span class="comment">//小对象（16byte ~ 32k）</span></div><div class="line">            <span class="comment">//计算对应的sizeclass</span></div><div class="line">			<span class="keyword">var</span> sizeclass <span class="keyword">uint8</span></div><div class="line">			<span class="keyword">if</span> size &lt;= smallSizeMax<span class="number">-8</span> &#123;</div><div class="line">				sizeclass = size_to_class8[(size+smallSizeDiv<span class="number">-1</span>)/smallSizeDiv]</div><div class="line">			&#125; <span class="keyword">else</span> &#123;</div><div class="line">				sizeclass = size_to_class128[(size-smallSizeMax+largeSizeDiv<span class="number">-1</span>)/largeSizeDiv]</div><div class="line">			&#125;</div><div class="line">			size = <span class="keyword">uintptr</span>(class_to_size[sizeclass])</div><div class="line">			spc := makeSpanClass(sizeclass, noscan)</div><div class="line">			span := c.alloc[spc]</div><div class="line">			v := nextFreeFast(span)</div><div class="line">			<span class="keyword">if</span> v == <span class="number">0</span> &#123;</div><div class="line">				v, span, shouldhelpgc = c.nextFree(spc)</div><div class="line">			&#125;</div><div class="line">			x = unsafe.Pointer(v)</div><div class="line">			<span class="keyword">if</span> needzero &amp;&amp; span.needzero != <span class="number">0</span> &#123;</div><div class="line">				memclrNoHeapPointers(unsafe.Pointer(v), size)</div><div class="line">			&#125;</div><div class="line">		&#125;</div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">    	<span class="comment">//大对象 （&gt;32k）</span></div><div class="line">		<span class="keyword">var</span> s *mspan</div><div class="line">		shouldhelpgc = <span class="literal">true</span></div><div class="line">		systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">			s = largeAlloc(size, needzero, noscan)</div><div class="line">		&#125;)</div><div class="line">		s.freeindex = <span class="number">1</span></div><div class="line">		s.allocCount = <span class="number">1</span></div><div class="line">		x = unsafe.Pointer(s.base())</div><div class="line">		size = s.elemsize</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	...</div><div class="line">    </div><div class="line">	<span class="keyword">return</span> x</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//分配小对象和极小对象，无可用返回0</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">nextFreeFast</span><span class="params">(s *mspan)</span> <span class="title">gclinkptr</span></span> &#123;</div><div class="line">	<span class="comment">//计算allocCache低位起有多少个0</span></div><div class="line">	theBit := sys.Ctz64(s.allocCache) <span class="comment">// Is there a free object in the allocCache?</span></div><div class="line">	<span class="keyword">if</span> theBit &lt; <span class="number">64</span> &#123;</div><div class="line">		result := s.freeindex + <span class="keyword">uintptr</span>(theBit)</div><div class="line">		<span class="keyword">if</span> result &lt; s.nelems &#123;</div><div class="line">        	<span class="comment">//freeindex后移</span></div><div class="line">			freeidx := result + <span class="number">1</span></div><div class="line">			<span class="keyword">if</span> freeidx%<span class="number">64</span> == <span class="number">0</span> &amp;&amp; freeidx != s.nelems &#123;</div><div class="line">				<span class="keyword">return</span> <span class="number">0</span></div><div class="line">			&#125;</div><div class="line">			s.allocCache &gt;&gt;= <span class="keyword">uint</span>(theBit + <span class="number">1</span>)</div><div class="line">			s.freeindex = freeidx</div><div class="line">			s.allocCount++</div><div class="line">			<span class="keyword">return</span> gclinkptr(result*s.elemsize + s.base())</div><div class="line">		&#125;</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//span不足，获取mcache的span分配；如还不足，则依次向mcentral-&gt;mheap-&gt;sysAlloc 的顺序申请，直到获得可用span (后续申请不在此展开)</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *mcache)</span> <span class="title">nextFree</span><span class="params">(spc spanClass)</span> <span class="params">(v gclinkptr, s *mspan, shouldhelpgc <span class="keyword">bool</span>)</span></span> &#123;</div><div class="line">	s = c.alloc[spc]</div><div class="line">	shouldhelpgc = <span class="literal">false</span></div><div class="line">	freeIndex := s.nextFreeIndex()</div><div class="line">	<span class="keyword">if</span> freeIndex == s.nelems &#123;</div><div class="line">		<span class="comment">// The span is full.</span></div><div class="line">		<span class="keyword">if</span> <span class="keyword">uintptr</span>(s.allocCount) != s.nelems &#123;</div><div class="line">			<span class="built_in">println</span>(<span class="string">"runtime: s.allocCount="</span>, s.allocCount, <span class="string">"s.nelems="</span>, s.nelems)</div><div class="line">			throw(<span class="string">"s.allocCount != s.nelems &amp;&amp; freeIndex == s.nelems"</span>)</div><div class="line">		&#125;</div><div class="line">		systemstack(<span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        	<span class="comment">//向mcentral获取可用地址</span></div><div class="line">			c.refill(spc)</div><div class="line">		&#125;)</div><div class="line">		shouldhelpgc = <span class="literal">true</span></div><div class="line">		s = c.alloc[spc]</div><div class="line"></div><div class="line">		freeIndex = s.nextFreeIndex()</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="keyword">if</span> freeIndex &gt;= s.nelems &#123;</div><div class="line">		throw(<span class="string">"freeIndex is not valid"</span>)</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	v = gclinkptr(freeIndex*s.elemsize + s.base())</div><div class="line">	s.allocCount++</div><div class="line">	<span class="keyword">if</span> <span class="keyword">uintptr</span>(s.allocCount) &gt; s.nelems &#123;</div><div class="line">		<span class="built_in">println</span>(<span class="string">"s.allocCount="</span>, s.allocCount, <span class="string">"s.nelems="</span>, s.nelems)</div><div class="line">		throw(<span class="string">"s.allocCount &gt; s.nelems"</span>)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//大对象直接heap分配</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">largeAlloc</span><span class="params">(size <span class="keyword">uintptr</span>, needzero <span class="keyword">bool</span>, noscan <span class="keyword">bool</span>)</span> *<span class="title">mspan</span></span> &#123;</div><div class="line">	<span class="comment">// print("largeAlloc size=", size, "\n")</span></div><div class="line"></div><div class="line">	<span class="keyword">if</span> size+_PageSize &lt; size &#123;</div><div class="line">		throw(<span class="string">"out of memory"</span>)</div><div class="line">	&#125;</div><div class="line">	npages := size &gt;&gt; _PageShift</div><div class="line">	<span class="keyword">if</span> size&amp;_PageMask != <span class="number">0</span> &#123;</div><div class="line">		npages++</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	<span class="comment">// Deduct credit for this span allocation and sweep if</span></div><div class="line">	<span class="comment">// necessary. mHeap_Alloc will also sweep npages, so this only</span></div><div class="line">	<span class="comment">// pays the debt down to npage pages.</span></div><div class="line">	deductSweepCredit(npages*_PageSize, npages)</div><div class="line"></div><div class="line">	s := mheap_.alloc(npages, makeSpanClass(<span class="number">0</span>, noscan), <span class="literal">true</span>, needzero)</div><div class="line">	<span class="keyword">if</span> s == <span class="literal">nil</span> &#123;</div><div class="line">		throw(<span class="string">"out of memory"</span>)</div><div class="line">	&#125;</div><div class="line">	s.limit = s.base() + size</div><div class="line">	heapBitsForSpan(s.base()).initSpan(s)</div><div class="line">	<span class="keyword">return</span> s</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Go内存管理内存池的总体思路是，针对不同大小的对象，使用不同的内存结构分配内存。对操作系统申请的一整块连续地址，进行切分，多级缓存。对内存分配都按规定大小分配，减少内存碎片，也利于内存释放后，回收管理。</p><p>针对小对象(&lt; 16byte)，使用当前调度器（p）的mcache中的tiny allocator来分配，这样多个小对象可以放一起管理，避免内存浪费。<br>针对稍大对象（16byte ~ 32K）,是用指定sizeClass取对应的块来分配。<br>针对大对象（&gt;32K），直接从heap中分配</p><p>其中mcache不足向mcentral中申请、mcentral不足向mheap申请，这些请求都是一次申请平摊了加锁（mcentral或mheap）的开销；<br>mheap不足向操作系统申请一组页，则是平摊了操作系统分配的开销；</p><p>同时设计mcentral - 全局的cache 和 mcache - 每个调度器cache，便于中小对象快速分配和回收，提高内存分配的效率，避免每次和操作系统申请的io开销，是用空间换时间的方式。</p><p>参考</p><blockquote><p><a href="http://www.cnblogs.com/zkweb/p/7880099.html" target="_blank" rel="external">http://www.cnblogs.com/zkweb/p/7880099.html</a><br><a href="https://studygolang.com/articles/11030" target="_blank" rel="external">https://studygolang.com/articles/11030</a><br><a href="http://www.cnblogs.com/zkweb/p/7880099.html" target="_blank" rel="external">http://www.cnblogs.com/zkweb/p/7880099.html</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      go源码分析之内存分配
    
    </summary>
    
      <category term="go" scheme="http://blog.newbmiao.com/categories/go/"/>
    
      <category term="notes" scheme="http://blog.newbmiao.com/categories/go/notes/"/>
    
    
      <category term="go" scheme="http://blog.newbmiao.com/tags/go/"/>
    
  </entry>
  
  <entry>
    <title>go学习之类型的数据结构内存分布</title>
    <link href="http://blog.newbmiao.com/2018/03/15/go-value-layout-in-memory.html"/>
    <id>http://blog.newbmiao.com/2018/03/15/go-value-layout-in-memory.html</id>
    <published>2018-03-15T12:58:50.000Z</published>
    <updated>2018-10-05T06:49:08.835Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p>想知道go的数据类型在内存中是怎么分布的，一个有趣的了解方式，那就是panic</p><a id="more"></a><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">type</span> AA <span class="keyword">struct</span> &#123;</div><div class="line">	A <span class="keyword">string</span></div><div class="line">	B <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">string</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	retFunc(<span class="string">"1"</span>, []<span class="keyword">rune</span>(<span class="string">"222"</span>), <span class="literal">nil</span>, AA&#123;&#125;)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">retFunc</span><span class="params">(s <span class="keyword">string</span>, sl []<span class="keyword">rune</span>, it <span class="keyword">interface</span>&#123;&#125;, a AA)</span> <span class="title">int</span></span> &#123;</div><div class="line">	<span class="built_in">panic</span>(<span class="string">"ret int"</span>)</div><div class="line">	<span class="keyword">return</span> <span class="number">0</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p><a href="https://play.golang.org/p/_bOMKQhUPBr" target="_blank" rel="external">运行</a></p><p>如上代码运行，两次函数中的panic打印中函数调用的栈信息<br>从中我们关注函数参数部分（注意panic限制展示参数10个，超过不显示）</p><p><code>main.retFunc(0x9edcf, 0x1, 0x1042ff9c, 0x3, 0x3, 0x0, 0x0, 0x0, 0x0, 0x0, ...)</code></p><p>和函数声明个数不一致<br><code>retFunc(s string, sl []rune, it interface{}, a AA) int</code></p><p>这里我们可以减少函数参数类型，一个个去试，对应数据类型的内存分布就都能发现了</p><p>这里直接看结果</p><ul><li>map 有一个域</li><li>string 有两个域 (一个指向字符串数据的指针和一个长度)</li><li>slice 有三个域 (一个指向底层数组的指针，一个长度，一个容量)</li><li>interface 有两个域 (一个指向类型的指针和一个指向值的指针)</li><li>struct 按其每个field的内存分布依次排列</li></ul><p>所以上边retFunc的panic中<br></p><figure class="highlight lsl"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">main.retFunc(</div><div class="line">	<span class="number">0x9edcf</span>, <span class="number">0x1</span>,  <span class="comment">//string s的地址及长度</span></div><div class="line">	<span class="number">0x1042ff9c</span>, <span class="number">0x3</span>, <span class="number">0x3</span>, <span class="comment">//slice sl的地址，长度，容量</span></div><div class="line">	<span class="number">0x0</span>, <span class="number">0x0</span>, <span class="comment">//interface it的类型地址，和值地址</span></div><div class="line">	<span class="number">0x0</span>, <span class="number">0x0</span>, <span class="number">0x0</span>, <span class="comment">//struct a的string AA的地址，长度，map B的地址</span></div><div class="line">	... <span class="comment">//（被隐藏）返回值 int</span></div><div class="line">	)</div></pre></td></tr></table></figure><p></p><blockquote><p>附录<br><a href="https://studygolang.com/articles/11733" target="_blank" rel="external">理解 Go 语言中的 panic 输出</a><br><a href="https://research.swtch.com/godata" target="_blank" rel="external">godata</a><br><a href="https://research.swtch.com/interfaces" target="_blank" rel="external">interface</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      go学习之类型的数据结构内存分布
    
    </summary>
    
      <category term="go" scheme="http://blog.newbmiao.com/categories/go/"/>
    
      <category term="notes" scheme="http://blog.newbmiao.com/categories/go/notes/"/>
    
    
      <category term="go" scheme="http://blog.newbmiao.com/tags/go/"/>
    
      <category term="panic" scheme="http://blog.newbmiao.com/tags/panic/"/>
    
  </entry>
  
  <entry>
    <title>go学习之堆栈中的变量</title>
    <link href="http://blog.newbmiao.com/2018/03/05/go-value-in-heap-and-stack.html"/>
    <id>http://blog.newbmiao.com/2018/03/05/go-value-in-heap-and-stack.html</id>
    <published>2018-03-05T08:57:10.000Z</published>
    <updated>2018-10-05T06:49:08.834Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p>关于变量分配在堆和栈的问题一直不太了解，直到看了附录几篇文章，有了一个初步的认识。</p><blockquote><p>先看官网怎么说</p></blockquote><p>go变量分配到堆还是栈</p><p>从正确的角度来看，你不需要知道。Go中的每个变量只要有引用就会存在。实现选择的存储位置与语言的语义无关。</p><p>存储位置对编写高效程序有影响。如果可能的话，Go编译器将为该函数的栈帧（<code>stack frame</code>）中分配本地变量。但是，如果编译器无法证明变量在函数返回后未被引用，则编译器必须在存在垃圾回收的堆（<code>garbage-collected heap</code>）上分配变量以避免指针错误。另外，如果局部变量非常大，将其存储在堆而不是栈上可能更有意义。</p><p>在当前的编译器中，如果一个变量的地址被占用，那么该变量就成为堆中的一个候选对象。但是，一些基本的逃逸分析可以识别出某些情况下，这些变量不会在函数的返回后还存在，就可以驻留在栈中。</p><a id="more"></a><blockquote><p>How do I know whether a variable is allocated on the heap or the stack?</p><blockquote><p>From a correctness standpoint, you don’t need to know. Each variable in Go exists as long as there are references to it. The storage location chosen by the implementation is irrelevant to the semantics of the language.</p><p>The storage location does have an effect on writing efficient programs. When possible, the Go compilers will allocate variables that are local to a function in that function’s stack frame. However, if the compiler cannot prove that the variable is not referenced after the function returns, then the compiler must allocate the variable on the garbage-collected heap to avoid dangling pointer errors. Also, if a local variable is very large, it might make more sense to store it on the heap rather than the stack.</p><p>In the current compilers, if a variable has its address taken, that variable is a candidate for allocation on the heap. However, a basic escape analysis recognizes some cases when such variables will not live past the return from the function and can reside on the stack.</p></blockquote></blockquote><p>拿slice的一个例子来分析 取自<a href="https://juejin.im/post/5a9f543a6fb9a028cb2d2b91" target="_blank" rel="external">Go中slice作为参数传递的一些“坑”</a><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">package</span> main</div><div class="line"></div><div class="line"><span class="keyword">import</span> (</div><div class="line">	<span class="string">"fmt"</span></div><div class="line">	<span class="string">"unsafe"</span></div><div class="line">)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	a := []<span class="keyword">int</span>&#123;&#125;</div><div class="line">	a = <span class="built_in">append</span>(a, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>)</div><div class="line">	fmt.Printf(<span class="string">"len: %d cap:%d data:%+v \n"</span>, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a), a)</div><div class="line">	<span class="built_in">println</span>(&amp;a, <span class="number">1</span>)</div><div class="line">	ap(a)</div><div class="line">	<span class="comment">//apRef(&amp;a)</span></div><div class="line">	fmt.Printf(<span class="string">"len: %d cap:%d data:%+v \n"</span>, <span class="built_in">len</span>(a), <span class="built_in">cap</span>(a), a)</div><div class="line">	<span class="built_in">println</span>(&amp;a, <span class="number">2</span>)</div><div class="line">	p := unsafe.Pointer(&amp;a[<span class="number">2</span>])</div><div class="line">	q := <span class="keyword">uintptr</span>(p) + <span class="number">4</span></div><div class="line">	t := (*<span class="keyword">int</span>)(unsafe.Pointer(q))</div><div class="line">	fmt.Println(*t)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">ap</span><span class="params">(a []<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	a = <span class="built_in">append</span>(a, <span class="number">10</span>)</div><div class="line">	<span class="built_in">println</span>(&amp;a, <span class="number">3</span>)</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">apRef</span><span class="params">(a *[]<span class="keyword">int</span>)</span></span> &#123;</div><div class="line">	*a = <span class="built_in">append</span>(*a, <span class="number">10</span>)</div><div class="line">	<span class="built_in">println</span>(a, <span class="number">3</span>, <span class="built_in">cap</span>(*a))</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><blockquote><p><a href="https://play.golang.org/p/NHkOlDOydcC" target="_blank" rel="external">运行代码</a></p></blockquote><p>现学现卖，拿go语言机制简单分析下上边<code>ap</code>和<code>apRef</code>的区别</p><ul><li>Go函数是值传递<br>ap 去操作 slice a 的<strong>值</strong>时，在 ap 复制一份a</li><li>Go编译器将常在栈帧中分配本地变量 （高效存储，无需回收下次直接覆盖）<br>ap 对内部复制的变量 a 存在自己的 frame stack， 返回后该frame 中的内存状态不确定，因为go可能会在分配给别的函数 frame时覆盖它</li><li>Go编译器无法证明变量在函数返回后不会被引用 则必须存在堆上（有垃圾回收）<br>apRef 参数是指针，操作时，不确定返回后指针是否会被引用，故创建变量到堆上，由指针a指向堆值，main后续访问a值时，是访问的堆上的值</li></ul><p>因而ap对a的修改返回后在main里没有体现，停留在未覆盖前的ap frame stack 里；<br>相反 apRef 对 a指针对应的数据修改保存到堆上，只要有引用就不会被回收，在main中仍可访问</p><p>原文还提到一个slice growth的问题，有兴趣可以看下</p><p><strong>当然学会怎么分析是最重要的，下边提到的方法要多练习练习</strong><br>内存分析</p><ul><li>编译器报告<br>eg: <code>go build -gcflags &quot;-m -m&quot;</code><br>gcflags的参数列表可以使用<code>go tool compile -help</code>查看</li><li>测试的压力测试<br>eg: <code>go test -run none -bench AlgorithmOne -benchtime 3s -benchmem</code></li><li>测试的性能分析<br>eg: <code>go test -run none -bench AlgorithmOne -benchtime 3s -benchmem -memprofile mem.out</code></li></ul><p>附录</p><ul><li><a href="https://studygolang.com/articles/12443" target="_blank" rel="external">Go 语言机制之栈和指针</a></li><li><a href="https://studygolang.com/articles/12444" target="_blank" rel="external">Go 语言机制之逃逸分析</a></li><li><a href="https://studygolang.com/articles/12445" target="_blank" rel="external">Go 语言机制之内存剖析</a></li><li><a href="https://studygolang.com/articles/12487" target="_blank" rel="external">Go 语言机制之数据和语法的设计哲学</a></li><li><a href="http://www.zenlife.tk/go-allocated-on-heap-or-stack.md" target="_blank" rel="external">Go的变量到底在堆还是栈中分配</a></li><li><a href="http://reusee.github.io/post/escape_analysis/" target="_blank" rel="external">golang变量逃逸分析小探</a></li><li><a href="https://github.com/golang/go/issues/7213" target="_blank" rel="external">interface导致的堆变量分配</a></li><li><a href="https://studygolang.com/articles/12396" target="_blank" rel="external">Go 逃逸分析的缺陷</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      go堆栈中的变量
    
    </summary>
    
      <category term="go" scheme="http://blog.newbmiao.com/categories/go/"/>
    
      <category term="notes" scheme="http://blog.newbmiao.com/categories/go/notes/"/>
    
    
      <category term="go" scheme="http://blog.newbmiao.com/tags/go/"/>
    
      <category term="slice" scheme="http://blog.newbmiao.com/tags/slice/"/>
    
  </entry>
  
  <entry>
    <title>Advanced Go Concurrency Patterns</title>
    <link href="http://blog.newbmiao.com/2018/02/09/advanced-go-concurrency-patterns.html"/>
    <id>http://blog.newbmiao.com/2018/02/09/advanced-go-concurrency-patterns.html</id>
    <published>2018-02-09T07:50:36.000Z</published>
    <updated>2018-10-05T06:49:08.832Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p>go的并发模式是一个很有意思的东西，这里先做个搬运工。<br>本文是go官方talk里对并发的定义及并发的模式的一些搜集</p><blockquote><p>原文引自：<br>Advanced Go Concurrency Patterns</p><ul><li><a href="https://www.youtube.com/watch?v=QDDwwePbDtw" target="_blank" rel="external">Youtube</a></li><li><a href="https://talks.golang.org/2013/advconc.slide#1" target="_blank" rel="external">slide</a></li><li><a href="https://github.com/golang/talks/tree/master/2013/advconc" target="_blank" rel="external">code</a></li></ul><p>Go Concurrency Patterns</p><ul><li><a href="https://www.youtube.com/watch?v=f6kdp27TYZs" target="_blank" rel="external">Youtube</a></li><li><a href="https://talks.golang.org/2012/concurrency.slide#1" target="_blank" rel="external">slide</a></li></ul><p>Concurrency Is Not Parallelism</p><ul><li><a href="https://www.youtube.com/watch?v=cN_DpYBzKso" target="_blank" rel="external">Youtube</a></li><li><a href="https://talks.golang.org/2012/waza.slide#1" target="_blank" rel="external">slide</a></li><li><a href="http://tonybai.com/2015/06/23/concurrency-and-parallelism/" target="_blank" rel="external">并发不是并行</a></li></ul></blockquote><a id="more"></a><h1 id="Concurrency-Is-Not-Parallelism"><a href="#Concurrency-Is-Not-Parallelism" class="headerlink" title="Concurrency Is Not Parallelism"></a>Concurrency Is Not Parallelism</h1><p>Concurrency (并发) 是程序能<strong>组织</strong>执行过程使同时可以处理多件事<br>Parallelism (并行) 是程序能同时<strong>执行</strong>多件事</p><p>所以Rob Pike说：并发关乎结构，并行关乎执行</p><h2 id="Concurrency"><a href="#Concurrency" class="headerlink" title="Concurrency"></a>Concurrency</h2><p>Concurrency is the composition of independently executing computations.</p><p>Concurrency is a way to structure software, particularly as a way to write clean code that interacts well with the real world.</p><p>Concurrency is about dealing with lots of things at once.</p><h2 id="Parallelism"><a href="#Parallelism" class="headerlink" title="Parallelism"></a>Parallelism</h2><p>Parallelism is the simultaneous execution of (possibly related) computations.</p><p>Parallelism is about doing lots of things at once.</p><h2 id="VS"><a href="#VS" class="headerlink" title="VS"></a>VS</h2><p>Concurrency is about structure, parallelism is about execution.</p><p>Concurrency provides a way to structure a solution to solve a problem that may (but not necessarily) be parallelizable.</p><h2 id="Go-Concurrency-Support"><a href="#Go-Concurrency-Support" class="headerlink" title="Go Concurrency Support"></a>Go Concurrency Support</h2><ul><li>concurrent execution (goroutines) 协程支持</li><li>synchronization and messaging (channels) CSP的通信方式来共享内存<br>此处需了解<a href="http://blog.newbmiao.com/2018/02/06/go-memory-model.html">go的内存模型</a></li><li>multi-way concurrent control (select) 控制协程切换<ul><li>All channels are evaluated.<br>每个通道都会被评估</li><li>Selection blocks until one communication can proceed, which then does.<br>没有可处理的通道时，select会一直阻塞</li><li>If multiple can proceed, select chooses pseudo-randomly.<br>多个通道可执行是，select会伪随机选一个</li><li>A default clause, if present, executes immediately if no channel is ready.<br>有default申明时，若没有可处理通道，则default立马执行</li></ul></li></ul><h1 id="Go-Concurrency-Patterns"><a href="#Go-Concurrency-Patterns" class="headerlink" title="Go Concurrency Patterns"></a>Go Concurrency Patterns</h1><h2 id="Service-Channel"><a href="#Service-Channel" class="headerlink" title="Service Channel"></a>Service Channel</h2><p>channel是go里<code>first class</code>值，想string这些类型一样。<br>用作函数返回时，通过返回的channel进行交互，可以起到服务一样的效果。</p><p><a href="https://play.golang.org/p/YLBW2G3SeFp" target="_blank" rel="external">运行</a><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	joe := boring(<span class="string">"Joe"</span>)</div><div class="line">	ann := boring(<span class="string">"Ann"</span>)</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</div><div class="line">		fmt.Println(&lt;-joe)</div><div class="line">		fmt.Println(&lt;-ann)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="string">"You're both boring; I'm leaving."</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">boring</span><span class="params">(msg <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123; <span class="comment">// Returns receive-only channel of strings.</span></div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// We launch the goroutine from inside the function.</span></div><div class="line">		<span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</div><div class="line">			c &lt;- fmt.Sprintf(<span class="string">"%s %d"</span>, msg, i)</div><div class="line">			time.Sleep(time.Duration(rand.Intn(<span class="number">1e3</span>)) * time.Millisecond)</div><div class="line">		&#125;</div><div class="line">	&#125;()</div><div class="line">	<span class="keyword">return</span> c <span class="comment">// Return the channel to the caller.</span></div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="Multiplexing"><a href="#Multiplexing" class="headerlink" title="Multiplexing"></a>Multiplexing</h2><p>就是将多个输入处理成一个，常见实现是使用go启动多个协程去合并；或者使用for-select去合并</p><p><a href="https://play.golang.org/p/G4gpS8-g36Y" target="_blank" rel="external">运行</a><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	c := fanIn(boring(<span class="string">"Joe"</span>), boring(<span class="string">"Ann"</span>))</div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</div><div class="line">		fmt.Println(&lt;-c)</div><div class="line">	&#125;</div><div class="line">	fmt.Println(<span class="string">"You're both boring; I'm leaving."</span>)</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(input1, input2 &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</div><div class="line">	c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</div><div class="line">	<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="keyword">for</span> &#123; c &lt;- &lt;-input1&#125; &#125;()</div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="keyword">for</span> &#123; c &lt;- &lt;-input2&#125; &#125;()</div><div class="line">	<span class="keyword">return</span> c</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><blockquote><p>fan-in: A function can read from multiple inputs and proceed until all are closed by multiplexing the input channels onto a single channel that’s closed when all the inputs are closed.<br>fan-out: Multiple functions can read from the same channel until that channel is closed)<br><a href="https://blog.golang.org/pipelines" target="_blank" rel="external">pipeline</a></p></blockquote><h2 id="Sequencing"><a href="#Sequencing" class="headerlink" title="Sequencing"></a>Sequencing</h2><p>按顺序执行，用<strong>全局通道</strong>去发送接受来控制任务依次执行<br><a href="https://play.golang.org/p/VwVSQ_4I2ex" target="_blank" rel="external">运行</a></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> Message <span class="keyword">struct</span> &#123;</div><div class="line">    str <span class="keyword">string</span></div><div class="line">    wait <span class="keyword">chan</span> <span class="keyword">bool</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//main</span></div><div class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">5</span>; i++ &#123;</div><div class="line">    msg1 := &lt;-c; fmt.Println(msg1.str)</div><div class="line">    msg2 := &lt;-c; fmt.Println(msg2.str)</div><div class="line">    msg1.wait &lt;- <span class="literal">true</span></div><div class="line">    msg2.wait &lt;- <span class="literal">true</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//boring</span></div><div class="line">waitForIt := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">bool</span>) <span class="comment">// Give main control over our execution.</span></div><div class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// Launch the goroutine from inside the function. Function Literal.</span></div><div class="line">	<span class="keyword">for</span> i := <span class="number">0</span>; ; i++ &#123;</div><div class="line">        c &lt;- Message&#123;fmt.Sprintf(<span class="string">"%s %d"</span>, msg, i), waitForIt&#125;</div><div class="line">        time.Sleep(time.Duration(rand.Intn(<span class="number">1e3</span>)) * time.Millisecond)</div><div class="line"></div><div class="line">        &lt;-waitForIt <span class="comment">// Block until main tells us to go again.</span></div><div class="line">	&#125;</div><div class="line">&#125;()</div></pre></td></tr></table></figure><h2 id="for-select"><a href="#for-select" class="headerlink" title="for-select"></a>for-select</h2><p>简化go创建多个协程的声明方式<br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">fanIn</span><span class="params">(input1, input2 &lt;-<span class="keyword">chan</span> <span class="keyword">string</span>)</span> &lt;-<span class="title">chan</span> <span class="title">string</span></span> &#123;</div><div class="line">    c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">string</span>)</div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">        <span class="keyword">for</span> &#123;</div><div class="line">            <span class="keyword">select</span> &#123;</div><div class="line">            <span class="keyword">case</span> s := &lt;-input1:  c &lt;- s</div><div class="line">            <span class="keyword">case</span> s := &lt;-input2:  c &lt;- s</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;()</div><div class="line">    <span class="keyword">return</span> c</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="timeout-select"><a href="#timeout-select" class="headerlink" title="timeout-select"></a>timeout-select</h2><p>对select可以增加超时通道，超时则返回，避免select一直阻塞<br></p><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">func</span> <span class="selector-tag">main</span>() &#123;</div><div class="line">    <span class="attribute">c </span>:= <span class="built_in">boring</span>(<span class="string">"Joe"</span>)</div><div class="line">    for &#123;</div><div class="line">        select &#123;</div><div class="line">        case s := &lt;-c:</div><div class="line">            fmt.<span class="built_in">Println</span>(s)</div><div class="line">        case &lt;-time.<span class="built_in">After</span>(1 * time.Second):</div><div class="line">            fmt.<span class="built_in">Println</span>(<span class="string">"You're too slow."</span>)</div><div class="line">            return</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="quit-channel"><a href="#quit-channel" class="headerlink" title="quit channel"></a>quit channel</h2><p>使用通道控制执行是否提前结束</p><ul><li><p>just quit</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//main</span></div><div class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</div><div class="line">c := boring(<span class="string">"Joe"</span>, quit)</div><div class="line"><span class="keyword">for</span> i := rand.Intn(<span class="number">10</span>); i &gt;= <span class="number">0</span>; i-- &#123; fmt.Println(&lt;-c) &#125;</div><div class="line">quit &lt;- <span class="keyword">struct</span>&#123;&#125;</div><div class="line"></div><div class="line">	<span class="keyword">select</span> &#123;</div><div class="line">	<span class="keyword">case</span> c &lt;- fmt.Sprintf(<span class="string">"%s: %d"</span>, msg, i):</div><div class="line">		<span class="comment">// do nothing</span></div><div class="line">	<span class="keyword">case</span> &lt;-quit:</div><div class="line">		<span class="keyword">return</span></div><div class="line">	&#125;</div></pre></td></tr></table></figure></li><li><p>use quit deliver msg<br><code>quit := make(chan string)</code></p></li></ul><h2 id="Daisy-chain"><a href="#Daisy-chain" class="headerlink" title="Daisy-chain"></a>Daisy-chain</h2><p>关于这个模式stackoverflow有个<a href="https://stackoverflow.com/questions/26135616/understand-the-code-go-concurrency-pattern-daisy-chain" target="_blank" rel="external">讨论</a>，可以看看<br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">(left, right <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    left &lt;- <span class="number">1</span> + &lt;-right</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">    <span class="keyword">const</span> n = <span class="number">10000</span></div><div class="line">    leftmost := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">    right := leftmost</div><div class="line">    left := leftmost</div><div class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</div><div class="line">        right = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line">        <span class="keyword">go</span> f(left, right)</div><div class="line">        left = right</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(c <span class="keyword">chan</span> <span class="keyword">int</span>)</span></span> &#123; c &lt;- <span class="number">1</span> &#125;(right)</div><div class="line">    fmt.Println(&lt;-leftmost)</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h1 id="Advanced-Go-Concurrency-Patterns"><a href="#Advanced-Go-Concurrency-Patterns" class="headerlink" title="Advanced Go Concurrency Patterns"></a>Advanced Go Concurrency Patterns</h1><h2 id="Three-techniques"><a href="#Three-techniques" class="headerlink" title="Three techniques"></a>Three techniques</h2><ul><li>for-select loop<br>select防止loop阻塞在某一状态，便于调度多项任务</li><li><p>service channel, reply channels (chan chan error)<br>service channel就是常见的pattern，不多说<br>reply channels实现了close操作中关闭和错误返回无<code>data race</code>:<br><strong>close通过<code>chan chan error</code>向loop请求关闭，并等待其返回关闭前是否有错误</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *sub)</span> <span class="title">Close</span><span class="params">()</span> <span class="title">error</span></span> &#123;</div><div class="line">	errc := <span class="built_in">make</span>(<span class="keyword">chan</span> error)</div><div class="line">	s.closing &lt;- errc <span class="comment">// HLchan  //请求关闭</span></div><div class="line">	<span class="keyword">return</span> &lt;-errc     <span class="comment">// HLchan  //等待结果返回</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//in loop</span></div><div class="line"><span class="keyword">var</span> err error</div><div class="line"><span class="keyword">for</span>&#123;</div><div class="line">    <span class="keyword">select</span>&#123;</div><div class="line">        <span class="keyword">case</span> errc := &lt;-s.closing: <span class="comment">//收到关闭请求</span></div><div class="line">            errc &lt;- err           <span class="comment">//返回错误</span></div><div class="line">            <span class="built_in">close</span>(s.updates)      <span class="comment">//执行关闭</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>nil channels in select cases<br>向值为nil的channel发送和接收都会阻塞，在select中使用它可控制是否执行</p></li></ul><p>此外，分享中提到一些点也值得注意：</p><h2 id="other-improvement"><a href="#other-improvement" class="headerlink" title="other improvement"></a>other improvement</h2><ul><li>limit：限制pending（处理任务队列）的数目，不要让其无限增大，避免过多请求及内存消耗</li><li>async io：拆解fetch的请求和结果处理，使用状态channel同步，使fetch中不要阻塞其他处理进行<br><strong>拆解前</strong><figure class="highlight vbscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">case</span> &lt;-startFetch:</div><div class="line">    var fetched []Item</div><div class="line">    fetched, <span class="keyword">next</span>, <span class="built_in">err</span> = s.fetcher.Fetch()</div><div class="line">    <span class="keyword">if</span> <span class="built_in">err</span> != nil &#123;</div><div class="line">        <span class="keyword">next</span> = <span class="built_in">time</span>.<span class="built_in">Now</span>().Add(<span class="number">10</span> * <span class="built_in">time</span>.<span class="built_in">Second</span>)</div><div class="line">        break</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">for</span> _, item := range fetched &#123;</div><div class="line">        <span class="keyword">if</span> !seen[item.GUID] &#123;</div><div class="line">            pending = append(pending, item)</div><div class="line">            seen[item.GUID] = <span class="literal">true</span>         </div><div class="line">        &#125;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></li></ul><p><strong>拆解后</strong><br>startFetch和fetchDone同一时刻，只有一个不为<code>nil</code><br></p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">type</span> fetchResult <span class="keyword">struct</span>&#123; fetched []Item; next time.Time; err error &#125;</div><div class="line"></div><div class="line">    <span class="keyword">var</span> fetchDone <span class="keyword">chan</span> fetchResult <span class="comment">// if non-nil, Fetch is running</span></div><div class="line"></div><div class="line">        <span class="keyword">var</span> startFetch &lt;-<span class="keyword">chan</span> time.Time</div><div class="line">        <span class="keyword">if</span> fetchDone == <span class="literal">nil</span> &amp;&amp; <span class="built_in">len</span>(pending) &lt; maxPending &#123;</div><div class="line">            startFetch = time.After(fetchDelay) <span class="comment">// enable fetch case</span></div><div class="line">        &#125;</div><div class="line">        <span class="keyword">select</span> &#123;</div><div class="line">        <span class="keyword">case</span> &lt;-startFetch:</div><div class="line">            fetchDone = <span class="built_in">make</span>(<span class="keyword">chan</span> fetchResult, <span class="number">1</span>)</div><div class="line">            <span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</div><div class="line">                fetched, next, err := s.fetcher.Fetch()</div><div class="line">                fetchDone &lt;- fetchResult&#123;fetched, next, err&#125;</div><div class="line">            &#125;()</div><div class="line">        <span class="keyword">case</span> result := &lt;-fetchDone: </div><div class="line">            fetchDone = <span class="literal">nil</span></div><div class="line">            <span class="comment">// Use result.fetched, result.next, result.err</span></div></pre></td></tr></table></figure><p></p><p>这是对以上模式整合实现的一个rss聚合器demo，可以仔细研究下<br><a href="https://play.golang.org/p/j_npc1o3zZp" target="_blank" rel="external">运行</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      advanced-go-concurrency-patterns
    
    </summary>
    
      <category term="go" scheme="http://blog.newbmiao.com/categories/go/"/>
    
      <category term="notes" scheme="http://blog.newbmiao.com/categories/go/notes/"/>
    
    
      <category term="go" scheme="http://blog.newbmiao.com/tags/go/"/>
    
      <category term="concurrency" scheme="http://blog.newbmiao.com/tags/concurrency/"/>
    
  </entry>
  
  <entry>
    <title>Go Memory Model</title>
    <link href="http://blog.newbmiao.com/2018/02/06/go-memory-model.html"/>
    <id>http://blog.newbmiao.com/2018/02/06/go-memory-model.html</id>
    <published>2018-02-06T07:50:36.000Z</published>
    <updated>2018-10-05T06:49:08.834Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><blockquote><p>在了解golang的内存模型后，对一些读写顺序如何保证有了了解，记录在这里<br><a href="https://golang.org/ref/mem" target="_blank" rel="external">官网原文</a></p></blockquote><h1 id="内存模型"><a href="#内存模型" class="headerlink" title="内存模型"></a>内存模型</h1><h2 id="Happens-before"><a href="#Happens-before" class="headerlink" title="Happens before"></a>Happens before</h2><p>Go内存操作中定义读写执行的顺序，没有明确的执行先后，则不能保证其结果顺序</p><p>对V的写入w可被读取r的条件</p><p>1.r 不happen before w<br>2.没有其他的写入w’ happen after w 且 happen before r</p><p>保证对V的写入w是读取r唯一可获取的条件（无读写并发）<br>1.w happen before r<br>2.其他的写入w happen after r 或 happen before w</p><a id="more"></a><blockquote><p>变量初始化是内存模型中的写操作<br>大于单个机器字长的读写，表现为多个机器字长大小的无序读写操作（机器字长是指计算机进行一次整数运算所能处理的二进制数据的位数）</p></blockquote><h2 id="Synchronization-同步"><a href="#Synchronization-同步" class="headerlink" title="Synchronization 同步"></a>Synchronization 同步</h2><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><ul><li>包p import 包q，q的init happen before p的</li><li>main.main happen after 所有包init函数<h3 id="goroutine"><a href="#goroutine" class="headerlink" title="goroutine"></a>goroutine</h3></li><li>go创建goroutine happens before 该goroutine执行；</li><li>goroutine的退出不保证happens before 其他执行<h3 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h3></li><li>channel的<strong>发送</strong> happens before 该channel的读取完成</li><li>channel的<strong>关闭</strong> happens before 该channel的0值读取</li><li><p>无缓冲channel的<strong>读取</strong> happens before 该channel的发送的完成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> c = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</div><div class="line"><span class="keyword">var</span> a <span class="keyword">string</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</div><div class="line">	a = <span class="string">"hello, world"</span></div><div class="line">	&lt;-c <span class="comment">//先于 `c &lt;- 0`</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">go</span> f()</div><div class="line">	c &lt;- <span class="number">0</span></div><div class="line">	<span class="built_in">print</span>(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure></li><li><p>容量为c的channel，第k次<strong>读取</strong> happens before 第<code>k+c</code>次发送的完成</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//多用于limit 并发</span></div><div class="line"><span class="keyword">var</span> limit = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>, <span class="number">3</span>)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	<span class="keyword">for</span> _, w := <span class="keyword">range</span> work &#123;</div><div class="line">		<span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">(w <span class="keyword">func</span>()</span>)</span> &#123;</div><div class="line">			limit &lt;- <span class="number">1</span></div><div class="line">			w()</div><div class="line">			&lt;-limit</div><div class="line">		&#125;(w)</div><div class="line">	&#125;</div><div class="line">	<span class="keyword">select</span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul><h3 id="sync"><a href="#sync" class="headerlink" title="sync"></a>sync</h3><ul><li><p>sync.Mutex or sync.RWMutex中，若<code>n &lt; m</code>,则第n次<code>Unlock()</code> happens before 第m次<code>Lock()</code></p><blockquote><p>两个lock之间必须有一个unlock,否则会在lock处无限等待<br>读写锁: 读-读能共存，读-写不能共存，写-写不能共存</p><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> l sync.Mutex</div><div class="line"><span class="keyword">var</span> a <span class="keyword">string</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">f</span><span class="params">()</span></span> &#123;</div><div class="line">	a = <span class="string">"hello, world"</span></div><div class="line">	l.Unlock()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</div><div class="line">	l.Lock()</div><div class="line">	<span class="keyword">go</span> f()</div><div class="line">	l.Lock() <span class="comment">//此处保证goroutine先执行</span></div><div class="line">	<span class="built_in">print</span>(a)</div><div class="line">&#125;</div></pre></td></tr></table></figure></blockquote></li><li><p>在sync.RWMutex中，第n次<code>Unlock()</code> happens before <code>RLock()</code>,对应的<code>RUnlock()</code> happens before 第<code>n+1</code>次<code>Lock()</code></p><blockquote><p>For any call to l.RLock on a sync.RWMutex variable l, there is an n such that the l.RLock happens (returns) after call n to l.Unlock and the matching l.RUnlock happens before call n+1 to l.Lock.</p><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//顺序就是</span></div><div class="line"><span class="selector-tag">l</span><span class="selector-class">.UnLock</span>()</div><div class="line"><span class="selector-tag">l</span><span class="selector-class">.RLock</span>()</div><div class="line"><span class="selector-tag">l</span><span class="selector-class">.RUnlock</span>()</div><div class="line"><span class="selector-tag">l</span><span class="selector-class">.Lock</span>()</div></pre></td></tr></table></figure></blockquote></li><li><p>单次once.Do(f)调用中f函数的返回 happens before 其他所有 once.Do(f)调用的返回</p><blockquote><p>就是同时调用once.Do(f),只有第一次调用会执行，其他会阻塞直到<code>f()</code>返回。</p></blockquote></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      go-memory-model
    
    </summary>
    
      <category term="go" scheme="http://blog.newbmiao.com/categories/go/"/>
    
      <category term="notes" scheme="http://blog.newbmiao.com/categories/go/notes/"/>
    
    
      <category term="go" scheme="http://blog.newbmiao.com/tags/go/"/>
    
      <category term="happens-before" scheme="http://blog.newbmiao.com/tags/happens-before/"/>
    
  </entry>
  
  <entry>
    <title>mysql中比较版本字符串</title>
    <link href="http://blog.newbmiao.com/2017/12/08/mysql-compare-version-string.html"/>
    <id>http://blog.newbmiao.com/2017/12/08/mysql-compare-version-string.html</id>
    <published>2017-12-08T02:45:47.000Z</published>
    <updated>2018-02-10T06:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p>业务背景：<br>获取小于等于当前版本的最新版本数据</p><p>发现在mysql中比较版本字符串有个坑：<br><code>select &quot;5.1.3&quot;&gt;&quot;5.1.24&quot;</code><br>结果会是1，因为是按位比较，3比2大。。。。</p><p>怎么解决呢，stackoverflow上种方法：<br><a href="https://stackoverflow.com/questions/34876711/mysql-query-compare-version-numbers" target="_blank" rel="external">传送门</a></p><a id="more"></a><p>条件设定：版本格式为 x.x.x (只有三组版本号，或组数确定)</p><h2 id="获取版本范围"><a href="#获取版本范围" class="headerlink" title="获取版本范围"></a>获取版本范围</h2><p>取每组版本号并向前补0至N位（比方5位、10位），最后拼接好在进行比较</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">-- 获取小于等于12.0.2版本的最新数据</span></div><div class="line"><span class="keyword">SELECT</span> *, <span class="keyword">CONCAT</span>(</div><div class="line">        <span class="keyword">LPAD</span>(SUBSTRING_INDEX(SUBSTRING_INDEX(<span class="keyword">version</span>, <span class="string">'.'</span>, <span class="number">1</span>), <span class="string">'.'</span>, <span class="number">-1</span>), <span class="number">5</span>, <span class="string">'0'</span>),</div><div class="line">        <span class="keyword">LPAD</span>(SUBSTRING_INDEX(SUBSTRING_INDEX(<span class="keyword">version</span>, <span class="string">'.'</span>, <span class="number">2</span>), <span class="string">'.'</span>, <span class="number">-1</span>), <span class="number">5</span>, <span class="string">'0'</span>),</div><div class="line">        <span class="keyword">LPAD</span>(SUBSTRING_INDEX(SUBSTRING_INDEX(<span class="keyword">version</span>, <span class="string">'.'</span>, <span class="number">3</span>), <span class="string">'.'</span>, <span class="number">-1</span>), <span class="number">5</span>, <span class="string">'0'</span>)) vcode</div><div class="line"><span class="keyword">FROM</span> foo </div><div class="line"><span class="keyword">having</span> vcode &lt;= <span class="keyword">CONCAT</span>(<span class="keyword">LPAD</span>(<span class="number">12</span>,<span class="number">5</span>,<span class="string">'0'</span>), <span class="keyword">LPAD</span>(<span class="number">0</span>,<span class="number">5</span>,<span class="string">'0'</span>), <span class="keyword">LPAD</span>(<span class="number">2</span>,<span class="number">5</span>,<span class="string">'0'</span>))</div><div class="line"><span class="keyword">order</span> <span class="keyword">by</span> vcode <span class="keyword">desc</span>;</div></pre></td></tr></table></figure><p><a href="http://sqlfiddle.com/#!9/7dd1e/3/0" target="_blank" rel="external">sqlfiddle测试地址</a></p><hr><h2 id="获取版本顺序"><a href="#获取版本顺序" class="headerlink" title="获取版本顺序"></a>获取版本顺序</h2><p>如果只是排序，且版本号都是数字，可以采用每组版本号转数字，在排序<br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">SELECT Version</div><div class="line">FROM foo</div><div class="line"><span class="attribute">order</span> by </div><div class="line"><span class="function"><span class="title">SUBSTRING_INDEX</span><span class="params">( `version` , <span class="string">'.'</span>, <span class="number">1</span> )</span></span>*<span class="number">1</span>,</div><div class="line"><span class="function"><span class="title">SUBSTRING_INDEX</span><span class="params">(SUBSTRING_INDEX( `version` , <span class="string">'.'</span>, <span class="number">2</span> )</span></span>,<span class="string">'.'</span>,-<span class="number">1</span>)*<span class="number">1</span>, </div><div class="line"><span class="function"><span class="title">SUBSTRING_INDEX</span><span class="params">( `version` , <span class="string">'.'</span>, -<span class="number">1</span> )</span></span>*<span class="number">1</span></div></pre></td></tr></table></figure><p></p><p><a href="http://sqlfiddle.com/#!9/ca9eeb/1/0" target="_blank" rel="external">sqlfiddle测试地址</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      mysql中比较版本字符串
    
    </summary>
    
      <category term="mysql" scheme="http://blog.newbmiao.com/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://blog.newbmiao.com/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>跨域登录态共享</title>
    <link href="http://blog.newbmiao.com/2017/05/16/share-the-login-status-under-cors.html"/>
    <id>http://blog.newbmiao.com/2017/05/16/share-the-login-status-under-cors.html</id>
    <published>2017-05-16T10:53:38.000Z</published>
    <updated>2017-05-16T11:11:03.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><h1 id="登录态共享"><a href="#登录态共享" class="headerlink" title="登录态共享"></a>登录态共享</h1><p>登录态共享？什么鬼，不知道的就可以不用看啦，需要时再说，说不定到时也用不到，笑脸~~</p><h2 id="场景"><a href="#场景" class="headerlink" title="场景"></a>场景</h2><p>解决多个子系统中共用模块（比方说工单系统）可以共享子系统的登录态<br>为简化问题，设定场景：<br>登录系统A，点工单操作跳转系统B，并且无需登录（至于系统登录何时失效暂不考虑）</p><p>还有：别问我为什么不用单点登录(SSO)，那个，不想说，笑脸~~</p><p>先别废话，直接代码上</p><a id="more"></a><h2 id="系统A"><a href="#系统A" class="headerlink" title="系统A"></a>系统A</h2><h3 id="跳转自动登录"><a href="#跳转自动登录" class="headerlink" title="跳转自动登录"></a>跳转自动登录</h3><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//假定在 http://shop.laradock.dev/ 点击工单button执行</span></div><div class="line"><span class="keyword">var</span> taskApi=<span class="string">'http://localhost:10100/'</span>;<span class="comment">//工单系统地址</span></div><div class="line">$.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: taskApi+<span class="string">'login'</span>,</div><div class="line">    <span class="attr">type</span>: <span class="string">"post"</span>,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">"json"</span>,</div><div class="line">    <span class="attr">data</span>: &#123;</div><div class="line">        <span class="attr">username</span>:<span class="string">'newbmiao'</span>,<span class="comment">//账户唯一标识</span></div><div class="line">        refer:location.href,<span class="comment">//可用于工单系统跳回A使用</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">xhrFields</span>: &#123;</div><div class="line">        <span class="attr">withCredentials</span>: <span class="literal">true</span> <span class="comment">//大招在这里</span></div><div class="line">    &#125;,</div><div class="line">    <span class="attr">success</span>: <span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(res);</div><div class="line">        <span class="comment">//自动登录成功后跳转（什么？已经登陆了？！）</span></div><div class="line">        <span class="comment">//location.href=taskApi;</span></div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure><hr><h2 id="工单系统B"><a href="#工单系统B" class="headerlink" title="工单系统B"></a>工单系统B</h2><h3 id="登录逻辑"><a href="#登录逻辑" class="headerlink" title="登录逻辑"></a>登录逻辑</h3><p>不用想的是,接到username，校验是管理员等等，ok的话设置到session返回给系统A</p><ul><li>问题1：系统A怎么跨域请求</li></ul><p>有人想到<code>Access-Control-Allow-Origin</code>了，就是这个</p><ul><li>问题2：服务器B<code>session</code>设置没问题，怎么系统A能拿到<code>session</code>的<code>cookie</code> ？拿到了再请求服务器B,<code>cookie</code>能拿到么？</li></ul><p>好问题，还是cors解决了，不过这个是双向的</p><p><code>就是客户端说：我请求会带你给我的cookie，服务器说：我也允许读取你传递的cookie</code><br>当然不是什么cookie都能回传，只能是系统B设置的cookie（而且系统B其实能设置成功的话，也必须将<code>Access-Control-Allow-Origin</code>明确指定为系统A）</p><p>有没有晕，多读几遍就好了</p><blockquote><p>附文一篇巩固下：<a href="http://www.ruanyifeng.com/blog/2016/04/cors.html" target="_blank" rel="external">跨域资源共享CORS详解</a></p></blockquote><p>思路对了，最后就是就是怎么按cors设置了</p><hr><figure class="highlight go"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//按go (beego) 代码写的，但很简单，相信能看懂</span></div><div class="line"><span class="comment">//看不懂，好吧，请喷吧，笑脸~~</span></div><div class="line"></div><div class="line"><span class="comment">//in_array</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="title">InArray</span><span class="params">(val <span class="keyword">string</span>, array []<span class="keyword">string</span>)</span> <span class="params">(exists <span class="keyword">bool</span>, index <span class="keyword">int</span>)</span></span> &#123;</div><div class="line">    exists = <span class="literal">false</span></div><div class="line">    index = <span class="number">-1</span>;</div><div class="line">    <span class="keyword">for</span> i, v := <span class="keyword">range</span> array &#123;</div><div class="line">        <span class="keyword">if</span> val == v &#123;</div><div class="line">            index = i</div><div class="line">            exists = <span class="literal">true</span></div><div class="line">            <span class="keyword">return</span></div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">return</span></div><div class="line">&#125;</div><div class="line"><span class="comment">//这里是重点</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *BaseController)</span> <span class="title">addAccessControlHeader</span><span class="params">()</span></span> &#123;</div><div class="line">    r := c.Ctx.Request</div><div class="line">    w := c.Ctx.ResponseWriter</div><div class="line">    <span class="comment">//假定配置好的两个系统域名</span></div><div class="line">    originUrls:= <span class="string">"http://shop.laradock.dev/,http://another-shop.laradock.dev/"</span></div><div class="line">    originArr := strings.Split(originUrls, <span class="string">","</span>)</div><div class="line">    Origin := r.Header.Get(<span class="string">"Origin"</span>)</div><div class="line">    <span class="keyword">if</span> <span class="number">0</span> != <span class="built_in">len</span>(Origin) &#123;</div><div class="line">        isExist, index := help.InArray(Origin, originArr)</div><div class="line">        <span class="keyword">if</span> !isExist &#123;</div><div class="line">            c.echoJson(<span class="string">"请求未授权"</span>, <span class="literal">nil</span>, <span class="number">1</span>)</div><div class="line">        &#125;</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Origin"</span>, originArr[index])</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Methods"</span>, <span class="string">"POST,GET,OPTIONS"</span>)</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Headers"</span>, <span class="string">"x-requested-with,content-type"</span>)</div><div class="line">        w.Header().Add(<span class="string">"Access-Control-Allow-Credentials"</span>, <span class="string">"true"</span>)</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//json输出</span></div><div class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *BaseController)</span> <span class="title">echoJson</span><span class="params">(data <span class="keyword">interface</span>&#123;&#125;, msg <span class="keyword">string</span>, code <span class="keyword">int</span>)</span> <span class="title">map</span>[<span class="title">string</span>]<span class="title">interface</span></span>&#123;&#125; &#123;</div><div class="line">    c.addAccessControlHeader()</div><div class="line">    ret := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</div><div class="line">    ret[<span class="string">"data"</span>] = data</div><div class="line">    ret[<span class="string">"msg"</span>] = msg</div><div class="line">    ret[<span class="string">"code"</span>] = code</div><div class="line">    c.Data[<span class="string">"json"</span>] = ret</div><div class="line">    c.ServeJSON()</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h2 id="完结"><a href="#完结" class="headerlink" title="完结"></a>完结</h2><blockquote><p>题外话，go很不错，只是还没玩明白啊，继续挖坑</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      跨域登录态共享
    
    </summary>
    
      <category term="web" scheme="http://blog.newbmiao.com/categories/web/"/>
    
      <category term="practice" scheme="http://blog.newbmiao.com/categories/web/practice/"/>
    
    
      <category term="go" scheme="http://blog.newbmiao.com/tags/go/"/>
    
      <category term="cors" scheme="http://blog.newbmiao.com/tags/cors/"/>
    
  </entry>
  
  <entry>
    <title>laradock开发实践</title>
    <link href="http://blog.newbmiao.com/2017/03/14/laradock-in-action.html"/>
    <id>http://blog.newbmiao.com/2017/03/14/laradock-in-action.html</id>
    <published>2017-03-14T07:27:27.000Z</published>
    <updated>2019-01-08T00:18:39.262Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><blockquote><p>此文是我用marp展示ppt拿过来的，可能看着不太明白，抱歉，我太懒~</p></blockquote><h1 id="laradock"><a href="#laradock" class="headerlink" title="laradock"></a>laradock</h1><ul><li><h3 id="DIY-do-it-yourself"><a href="#DIY-do-it-yourself" class="headerlink" title="DIY(do it yourself)"></a>DIY(do it yourself)</h3></li><li><h3 id="DRY-dont-repeat-youself"><a href="#DRY-dont-repeat-youself" class="headerlink" title="DRY(dont repeat youself)"></a>DRY(dont repeat youself)</h3></li><li><h3 id="人生苦短，我用docker"><a href="#人生苦短，我用docker" class="headerlink" title="人生苦短，我用docker"></a>人生苦短，我用docker</h3></li></ul><hr><a id="more"></a><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><ul><li>易组合：在PHP版本切换、数据库引擎、软件组合</li><li>分而治之：一个软件，一个容器，比如：PHP-FPM, NGINX, PHP-CLI…</li><li>可信镜像：所有镜像继承自一个官方基础镜像（Trusted base Images）</li><li>方便配置，且使用最新Docker Compose</li><li>每周都会有更新…</li><li><del>快速的镜像构建</del>(GFW)</li></ul><blockquote><p><a href="https://github.com/laradock/laradock/blob/master/README-zh.md" target="_blank" rel="external">文档</a></p></blockquote><hr><h2 id="docker是什么"><a href="#docker是什么" class="headerlink" title="docker是什么"></a>docker是什么</h2><ul><li>2013年初开源项目，基于go语言</li><li>轻量级</li><li>操作系统虚拟化</li></ul><hr><h2 id="对比传统虚拟机总结"><a href="#对比传统虚拟机总结" class="headerlink" title="对比传统虚拟机总结"></a>对比传统虚拟机总结</h2><table><thead><tr><th style="text-align:center">特性</th><th style="text-align:center">容器</th><th style="text-align:center">虚拟机</th></tr></thead><tbody><tr><td style="text-align:center">启动</td><td style="text-align:center">秒级</td><td style="text-align:center">分钟级</td></tr><tr><td style="text-align:center">硬盘使用</td><td style="text-align:center">一般为 MB</td><td style="text-align:center">一般为 GB</td></tr><tr><td style="text-align:center">性能</td><td style="text-align:center">接近原生</td><td style="text-align:center">弱于</td></tr><tr><td style="text-align:center">系统支持量</td><td style="text-align:center">单机支持上千个容</td><td style="text-align:center">一般几十个</td></tr></tbody></table><hr><p><img src="http://media.newbmiao.com/blog/virtualization.png" alt="虚拟机"><br><img src="http://media.newbmiao.com/blog/docker.png" alt="docker"></p><hr><h2 id="三个基本概念"><a href="#三个基本概念" class="headerlink" title="三个基本概念"></a>三个基本概念</h2><ul><li>镜像（Image）</li><li>容器（Container）</li><li>仓库（Repository）</li></ul><blockquote><p>镜像是只读的，容器在启动的时候创建一层可写层作为最上层。<br>注意一个镜像不能超过 127 层</p><p><a href="https://docs.docker.com/engine/installation/" target="_blank" rel="external">安装</a></p></blockquote><hr><h2 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h2><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="comment">#镜像</span></div><div class="line">docker images <span class="comment">#列出本地镜像</span></div><div class="line">docker rmi training/sinatra <span class="comment">#删除（在删除镜像之前要先用 docker rm 删掉依赖于这个镜像的所有容器）</span></div><div class="line">docker run -t -i ubuntu:<span class="number">14.04</span> /bin/bash <span class="comment">#</span></div><div class="line">docker commit -m <span class="string">"Added json gem"</span> -a <span class="string">"Docker Newbee"</span> <span class="number">0</span>b2616b0e5a8 ouruser/sinatra:v2 <span class="comment">#更新镜像</span></div><div class="line">docker <span class="keyword">tag</span> <span class="title">5db5f8471261</span> ouruser/sinatra:devel <span class="comment">#修改标签</span></div><div class="line">docker build $&#123;dockerfile_dir&#125; <span class="comment">#Dockerfile 构建</span></div><div class="line">docker save -o ubuntu_14.<span class="number">04</span>.tar ubuntu:<span class="number">14.04</span> <span class="comment">#保存</span></div><div class="line">docker load --input ubuntu_14.<span class="number">04</span>.tar <span class="comment">#导入</span></div><div class="line"><span class="comment">#容器</span></div><div class="line">docker ps <span class="comment">#查看容器信息</span></div><div class="line">docker rm <span class="comment">#删掉容器（-f 删除运行中）</span></div><div class="line">docker inspect <span class="comment">#查看指定容器详细信息（可获取ip，pid等信息）</span></div><div class="line">docker logs insane_babbage <span class="comment">#查看容器log</span></div><div class="line">docker port CONTAINER [PRIVATE_PORT[/PROTO]] <span class="comment">#查看端口映射</span></div><div class="line">docker <span class="literal">start</span>|<span class="literal">stop</span>|restart insane_babbage <span class="comment">#启动终止重启</span></div><div class="line">docker attach insane_babbage <span class="comment">#进入后台运行的容器 -d（推荐nsenter）</span></div><div class="line">docker export <span class="number">7691</span>a814370e &gt; ubuntu.tar <span class="comment">#导出快照</span></div><div class="line">cat ubuntu.tar | sudo docker import - test/ubuntu:v1.<span class="number">0</span> <span class="comment">#导入快照</span></div><div class="line"><span class="comment">## docker hub </span></div><div class="line">docker search <span class="comment">#搜索镜像</span></div><div class="line">docker pull <span class="comment">#下载</span></div><div class="line">docker push <span class="comment">#推送（需登录）</span></div></pre></td></tr></table></figure><hr><h2 id="laradock的结构"><a href="#laradock的结构" class="headerlink" title="laradock的结构"></a>laradock的结构</h2><figure class="highlight 1c"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">├── laradock </div><div class="line">│   ├── _guides</div><div class="line">│   ├── docker-compose.yml <span class="meta">#compose 配置</span></div><div class="line">│   ├── docs</div><div class="line">│   ├── elasticsearch</div><div class="line">│   ├── hhvm</div><div class="line">│   ├── logs  <span class="meta">#nginx日志；xdebug日志</span></div><div class="line">│   ├── mariadb</div><div class="line">│   ├── memcached</div><div class="line">│   ├── mongo</div><div class="line">│   ├── mysql</div><div class="line">│   ├── nginx <span class="meta"># nginx 容器配置</span></div><div class="line">│   ├── php-fpm <span class="meta">#php-fpm 容器配置</span></div><div class="line">│   ├── phpmyadmin</div><div class="line">│   ├── rabbitmq</div><div class="line">│   ├── redis</div><div class="line">│   ├── workspace <span class="meta">#工作台</span></div><div class="line">│   └── xdebugPhpFpm <span class="meta">#动态设置 xdebug 是否启用（需 build 时先安装）</span></div><div class="line">└── website <span class="meta">#网站项目</span></div><div class="line">    ├── afp</div><div class="line">    ├── ams</div><div class="line">    ├── inncms</div></pre></td></tr></table></figure><hr><h2 id="彩蛋"><a href="#彩蛋" class="headerlink" title="彩蛋"></a>彩蛋</h2><h3 id="快捷操作"><a href="#快捷操作" class="headerlink" title="快捷操作"></a>快捷操作</h3><blockquote><p><a href="https://raw.githubusercontent.com/yeasy/docker_practice/master/_local/.bashrc_docker" target="_blank" rel="external">docker快捷命令：.bashrc_docker</a></p></blockquote><h3 id="xdebug监听不变的host-ip"><a href="#xdebug监听不变的host-ip" class="headerlink" title="xdebug监听不变的host ip"></a>xdebug监听不变的host ip</h3><blockquote><p><a href="http://stackoverflow.com/questions/22944631/how-to-get-the-ip-address-of-the-docker-host-from-inside-a-docker-container/39026136#39026136" target="_blank" rel="external">set host ip never changed</a></p></blockquote><h3 id="本地dns泛解析"><a href="#本地dns泛解析" class="headerlink" title="本地dns泛解析"></a>本地dns泛解析</h3><blockquote><p><a href="https://blog.netsh.org/posts/mac-os-x-dnsmasq_1762.netsh.html" target="_blank" rel="external">hosts泛解析</a><br></p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"># 这里ams不是laravel框架，我做了过滤</div><div class="line">server_name ~^(?&lt;<span class="keyword">project</span>&gt;\b(?!ams\b).+)\.laradock\.dev$;</div><div class="line">root <span class="regexp">/var/</span>www<span class="regexp">/$project/</span><span class="keyword">public</span>;</div></pre></td></tr></table></figure><p></p></blockquote><hr><h4 id="安装操作"><a href="#安装操作" class="headerlink" title="安装操作"></a>安装操作</h4><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line"><span class="comment"># 安装 dnsmasq</span></div><div class="line">brew install dnsmasq</div><div class="line">sudo cp -v $<span class="params">(brew --prefix dnsmasq)</span><span class="string">/homebrew.mxcl.dnsmasq.plist</span> <span class="string">/Library/LaunchDaemons</span></div><div class="line"></div><div class="line"><span class="comment"># 添加本地dns解析服务器</span></div><div class="line">[ -d <span class="string">/etc/resolver</span> ] || sudo mkdir -v <span class="string">/etc/resolver</span></div><div class="line">sudo bash -c '<span class="keyword">echo</span> <span class="string">"nameserver 127.0.0.1"</span> &gt; <span class="string">/etc/resolver/dev</span>'</div><div class="line"></div><div class="line"><span class="comment"># 配置泛解析 (域名后缀自行指定，这里为 .dev)</span></div><div class="line">sudo mkdir -p $<span class="params">(brew --prefix)</span><span class="string">/etc/</span></div><div class="line">cat &gt; $<span class="params">(brew --prefix)</span><span class="string">/etc/dnsmasq.conf</span> &lt;&lt;-EOF</div><div class="line">listen-address=127.0.0.1</div><div class="line">address=<span class="string">/.dev/127.0.0.1</span></div><div class="line"><span class="comment"># keep nameserver order of resolv.conf</span></div><div class="line">strict-order</div><div class="line">EOF</div><div class="line"></div><div class="line"><span class="comment"># 启用dnsmasq</span></div><div class="line">sudo launchctl load -w <span class="string">/Library/LaunchDaemons/homebrew.mxcl.dnsmasq.plist</span></div><div class="line"></div><div class="line"><span class="comment"># 若更新dnsmasq后，需重启以应用</span></div><div class="line">sudo launchctl stop homebrew.mxcl.dnsmasq</div><div class="line">sudo launchctl start homebrew.mxcl.dnsmasq</div><div class="line">sudo killall -HUP mDNSResponder</div></pre></td></tr></table></figure><hr><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><ul><li><p>docker for mac</p><blockquote><ul><li><a href="https://docs.docker.com/docker-for-mac/install/#download-docker-for-mac" target="_blank" rel="external">安装</a></li></ul></blockquote></li><li><p>基于开发的一些修改（踩坑）</p><blockquote><ul><li>git@github.com:NewbMiao/laradock.git (dev分支，master定期手动同步官方分支)<blockquote><ul><li>xdebug 配置</li><li>全局安装composer及<code>hirak/prestissimo</code>(可加速composer）</li><li>ssh开启 可配合phpstorm 指定CLI interpreter</li><li>关闭nginx <code>open_file_cache</code></li><li>composer国内地址替换；aliyun源替换</li></ul></blockquote></li></ul></blockquote></li></ul><blockquote><ul><li><p>git@github.com:laradock/laradock.git （官方分支）</p></li><li><p>能番羽墙最好，不然，可以参考下边</p><figure class="highlight vala"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="meta">## apt-get替换源</span></div><div class="line"><span class="meta"># 另外，在国内使用 docker（以 ubuntu 为例）， Dockerfile 第一个执行的命令最好为：</span></div><div class="line">RUN sed -i <span class="string">'s/archive.ubuntu.com/mirrors.aliyun.com/g'</span> /etc/apt/sources.list \</div><div class="line">    &amp;&amp; apt-<span class="keyword">get</span> update --fix-missing \</div><div class="line">    &amp;&amp; apt-<span class="keyword">get</span> -y upgrade</div><div class="line"></div><div class="line"><span class="meta">## composer替换源</span></div><div class="line">RUN composer config -g repo.packagist composer https:<span class="comment">//packagist.phpcomposer.com</span></div><div class="line"></div><div class="line"><span class="meta">## ssh workspace（推荐还是exec方式）</span></div><div class="line">chmod <span class="number">0600</span> workspace/insecure_id_rsa</div><div class="line">ssh -i workspace/insecure_id_rsa -v root@laradock.dev -p2222</div></pre></td></tr></table></figure></li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      laradock开发实践
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/categories/php/tool/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="laradock" scheme="http://blog.newbmiao.com/tags/laradock/"/>
    
      <category term="docker" scheme="http://blog.newbmiao.com/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>imagick中文自动换行和base64串上传图片</title>
    <link href="http://blog.newbmiao.com/2017/02/17/auto-wrap-chinese-use-imagick-and-upload-image-by-base64-encode-str.html"/>
    <id>http://blog.newbmiao.com/2017/02/17/auto-wrap-chinese-use-imagick-and-upload-image-by-base64-encode-str.html</id>
    <published>2017-02-17T08:17:26.000Z</published>
    <updated>2017-02-17T08:50:23.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p>本文分享两个:</p><ul><li>imagick中中文自动换行</li><li>base64串的图片上传</li></ul><p>没啥太大关联，只是工作用到记录下，供需要的用</p><h2 id="imagick中中文自动换行"><a href="#imagick中中文自动换行" class="headerlink" title="imagick中中文自动换行"></a>imagick中中文自动换行</h2><p>首先是imgick的类库使用推荐 <a href="https://github.com/Intervention/image" target="_blank" rel="external">Intervention/image</a></p><a id="more"></a><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">$canvas = Image::canvas(<span class="number">500</span>,<span class="number">500</span>,<span class="string">'#e2e2e2'</span>);</div><div class="line"></div><div class="line">$txt = <span class="keyword">self</span>::autoWrap($fontSize, <span class="string">'./msyh.ttf'</span>, $text,$lineWidth);</div><div class="line"><span class="comment">//$txt = array_slice(explode(PHP_EOL, $txt), 0, 2);//这里是处理需要显示几行</span></div><div class="line"><span class="comment">//$txt = implode(PHP_EOL, $txt);</span></div><div class="line"></div><div class="line"><span class="comment">//这里x，y设置为要显示文字左上角线的中心点坐标就可以，$font-&gt;align('center');会自动让文字左右居中</span></div><div class="line">$canvas-&gt;text($txt, $x, $y, <span class="function"><span class="keyword">function</span> <span class="params">(Font $font)</span> <span class="title">use</span> <span class="params">($t)</span> </span>&#123;</div><div class="line">    $font-&gt;file(<span class="string">'./msyh.ttf'</span>);<span class="comment">//imgick作为driver需配置字体文件</span></div><div class="line">    $font-&gt;size($t[<span class="string">'size'</span>]);<span class="comment">//$t是字体相关配置</span></div><div class="line">    $font-&gt;color($t[<span class="string">'color'</span>]);</div><div class="line">    $font-&gt;align(<span class="string">'center'</span>);</div><div class="line">    $font-&gt;valign(<span class="string">'top'</span>);</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p>重点是如何计算每个字的长度,然后通过行宽断句<br></p><figure class="highlight php"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/**</span></div><div class="line"> * 根据预设宽度让文字自动换行</div><div class="line"> * <span class="doctag">@param</span> int $fontsize 字体大小</div><div class="line"> * <span class="doctag">@param</span> string $ttfpath 字体名称</div><div class="line"> * <span class="doctag">@param</span> string $str 字符串</div><div class="line"> * <span class="doctag">@param</span> int $width 预设宽度</div><div class="line"> * <span class="doctag">@param</span> int $fontangle 角度</div><div class="line"> * <span class="doctag">@param</span> string $charset 编码</div><div class="line"> * <span class="doctag">@return</span> string $_string  字符串</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">autoWrap</span><span class="params">($fontsize, $ttfpath, $str, $width, $fontangle = <span class="number">0</span>, $charset = <span class="string">'utf-8'</span>)</span></span></div><div class="line">&#123;</div><div class="line">    $_string = <span class="string">""</span>;</div><div class="line">    $_width = <span class="number">0</span>;</div><div class="line">    $temp = <span class="keyword">self</span>::chararray($str, $charset);</div><div class="line">    <span class="keyword">foreach</span> ($temp[<span class="number">0</span>] <span class="keyword">as</span> $v) &#123;</div><div class="line">        $w = <span class="keyword">self</span>::charWidth($fontsize, $fontangle, $v, $ttfpath);</div><div class="line">        $_width += intval($w);</div><div class="line">        <span class="keyword">if</span> (($_width &gt; $width) &amp;&amp; ($v !== <span class="string">""</span>)) &#123;</div><div class="line">            $_string .= PHP_EOL;</div><div class="line">            $_width = <span class="number">0</span>;</div><div class="line">        &#125;</div><div class="line">        $_string .= $v;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $_string;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回一个字符的数组</div><div class="line"> *</div><div class="line"> * <span class="doctag">@param</span> string $str 文字</div><div class="line"> * <span class="doctag">@param</span> string $charset 字符编码</div><div class="line"> * <span class="doctag">@return</span> array $match   返回一个字符的数组</div><div class="line"> */</div><div class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">charArray</span><span class="params">($str, $charset = <span class="string">"utf-8"</span>)</span></span></div><div class="line">&#123;</div><div class="line">    $re[<span class="string">'utf-8'</span>] = <span class="string">"/[\x01-\x7f]|[\xc2-\xdf][\x80-\xbf]|[\xe0-\xef][\x80-\xbf]&#123;2&#125;|[\xf0-\xff][\x80-\xbf]&#123;3&#125;/"</span>;</div><div class="line">    $re[<span class="string">'gb2312'</span>] = <span class="string">"/[\x01-\x7f]|[\xb0-\xf7][\xa0-\xfe]/"</span>;</div><div class="line">    $re[<span class="string">'gbk'</span>] = <span class="string">"/[\x01-\x7f]|[\x81-\xfe][\x40-\xfe]/"</span>;</div><div class="line">    $re[<span class="string">'big5'</span>] = <span class="string">"/[\x01-\x7f]|[\x81-\xfe]([\x40-\x7e]|\xa1-\xfe])/"</span>;</div><div class="line">    preg_match_all($re[$charset], $str, $match);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $match;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">/**</span></div><div class="line"> * 返回一个字符串在图片中所占的宽度</div><div class="line"> * <span class="doctag">@param</span> int $fontsize 字体大小</div><div class="line"> * <span class="doctag">@param</span> int $fontangle 角度</div><div class="line"> * <span class="doctag">@param</span> string $ttfpath 字体文件</div><div class="line"> * <span class="doctag">@param</span> string $char 字符</div><div class="line"> * <span class="doctag">@return</span> int $width</div><div class="line"> */</div><div class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="function"><span class="keyword">function</span> <span class="title">charWidth</span><span class="params">($fontsize, $fontangle, $char, $ttfpath)</span></span></div><div class="line">&#123;</div><div class="line">    $box = @imagettfbbox($fontsize, $fontangle, $ttfpath, $char);</div><div class="line">    $width = max($box[<span class="number">2</span>], $box[<span class="number">4</span>]) - min($box[<span class="number">0</span>], $box[<span class="number">6</span>]);</div><div class="line"></div><div class="line">    <span class="keyword">return</span> $width;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p></p><h2 id="base64串的图片上传"><a href="#base64串的图片上传" class="headerlink" title="base64串的图片上传"></a>base64串的图片上传</h2><p>这里我合成图片调用<code>$img-&gt;encode(&#39;data-url&#39;)</code>输出前台预览图片，<br>确认后才上传，为了方便就直接那base64串转blob上传</p><p>为了通用，如果你想搞个大的，比方说<strong>直接将页面的某个图片上传</strong>，可以参考一下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//base64串转blob</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBlob</span>(<span class="params">dataURI</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> byteString = atob(dataURI.split(<span class="string">','</span>)[<span class="number">1</span>]);</div><div class="line">  <span class="keyword">var</span> mimeString = dataURI.split(<span class="string">','</span>)[<span class="number">0</span>].split(<span class="string">':'</span>)[<span class="number">1</span>].split(<span class="string">';'</span>)[<span class="number">0</span>];</div><div class="line">  <span class="keyword">var</span> ia = <span class="keyword">new</span> <span class="built_in">Uint8Array</span>(byteString.length);</div><div class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; byteString.length; i++) &#123;</div><div class="line">    ia[i] = byteString.charCodeAt(i);</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Blob([ia], &#123;</div><div class="line">    <span class="attr">type</span>: mimeString</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"><span class="comment">//图片直接转data-url</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getBase64Image</span>(<span class="params">img, quality</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> canvas = <span class="built_in">document</span>.createElement(<span class="string">"canvas"</span>);</div><div class="line">  <span class="keyword">if</span> (!quality) &#123;</div><div class="line">    quality = <span class="number">0.6</span>;</div><div class="line">  &#125;</div><div class="line">  canvas.width = img.naturalWidth;</div><div class="line">  canvas.height = img.naturalHeight;</div><div class="line">  canvas.getContext(<span class="string">"2d"</span>).drawImage(img, <span class="number">0</span>, <span class="number">0</span>);</div><div class="line">  <span class="keyword">return</span> canvas.toDataURL(<span class="string">"image/jpeg"</span>, quality);</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//图片直接上传</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">upload</span>(<span class="params">imgObj, callback</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> blob = getBlob(getBase64Image(imgObj));</div><div class="line">  <span class="keyword">var</span> apiUrl = <span class="string">'xxx'</span>;</div><div class="line">  <span class="keyword">var</span> fd = <span class="keyword">new</span> FormData();</div><div class="line">  fd.append(<span class="string">'image'</span>, blob);</div><div class="line">  $.ajax(&#123;</div><div class="line">    <span class="attr">url</span>: apiUrl,</div><div class="line">    <span class="attr">dataType</span>: <span class="string">'json'</span>,</div><div class="line">    <span class="attr">cache</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">contentType</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">processData</span>: <span class="literal">false</span>,</div><div class="line">    <span class="attr">data</span>: fd,</div><div class="line">    <span class="attr">type</span>: <span class="string">'post'</span>,</div><div class="line">    <span class="attr">success</span>: callback</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      imagick中文自动换行和base64串上传图片
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
    
      <category term="imgick" scheme="http://blog.newbmiao.com/tags/imgick/"/>
    
      <category term="json" scheme="http://blog.newbmiao.com/tags/json/"/>
    
      <category term="blob" scheme="http://blog.newbmiao.com/tags/blob/"/>
    
  </entry>
  
  <entry>
    <title>php踩坑记录</title>
    <link href="http://blog.newbmiao.com/2016/11/08/some-misuse-of-php.html"/>
    <id>http://blog.newbmiao.com/2016/11/08/some-misuse-of-php.html</id>
    <published>2016-11-08T11:33:22.000Z</published>
    <updated>2017-01-19T08:34:55.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><h1 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h1><h2 id="mb-strlen-不生效"><a href="#mb-strlen-不生效" class="headerlink" title="mb_strlen 不生效"></a>mb_strlen 不生效</h2><p>有一天发现本地<code>mb_strlen(&#39;哈&#39;)</code>本地为1,服务器为3,猜测应该是配置问题<br>看文档关键在于<code>mb_internal_encoding</code><br></p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mixed mb_strlen ( <span class="built_in">string</span> $str [, <span class="built_in">string</span> $encoding = mb_internal_encoding() ] )</div><div class="line"></div><div class="line">继续搜 mbstring.internal_encoding (定义内部字符的默认编码)</div><div class="line"></div><div class="line">Warning: This feature has been DEPRECATED <span class="keyword">as</span> <span class="keyword">of</span> PHP <span class="number">5.6</span><span class="number">.0</span>. Relying <span class="keyword">on</span> this feature <span class="keyword">is</span> highly discouraged.。</div><div class="line"></div><div class="line">PHP <span class="number">5.6</span> 及更新版的用户应该将此选项留空，并设置 default_charset 作为代替。</div><div class="line"></div><div class="line">好吧，服务器 default_charset 没设置，然后默认用 ISO<span class="number">-8859</span><span class="number">-1</span></div></pre></td></tr></table></figure><p></p><a id="more"></a><p>解决方案：<br></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="regexp">//</span>入口设置，有权限的话也可以 ini_set(<span class="string">'default_charset'</span>,<span class="string">'UTF-8'</span>);</div><div class="line">mb_internal_encoding(<span class="string">"UTF-8"</span>);</div></pre></td></tr></table></figure><p></p><h1 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h1><h2 id="session文件锁"><a href="#session文件锁" class="headerlink" title="session文件锁"></a>session文件锁</h2><p>并发下，php是不推荐用文件存储的方式管理session的，因为session管理有 【读写锁】！！！附干活两篇</p><ul><li><a href="https://log.zvz.im/2016/02/27/PHP-session/" target="_blank" rel="external">PHP session锁：如何避免session阻塞PHP请求</a></li><li><a href="https://laravel-china.org/topics/1093" target="_blank" rel="external">关于 PHP 中 Session 的几个问题</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      php踩坑记录
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="function" scheme="http://blog.newbmiao.com/tags/function/"/>
    
  </entry>
  
  <entry>
    <title>jquery多异步管理使用记录</title>
    <link href="http://blog.newbmiao.com/2016/11/08/jquery-multi-async-manage-note.html"/>
    <id>http://blog.newbmiao.com/2016/11/08/jquery-multi-async-manage-note.html</id>
    <published>2016-11-08T11:27:05.000Z</published>
    <updated>2016-11-08T11:38:44.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p>先记录一些参考文章</p><ul><li><a href="http://www.ruanyifeng.com/blog/2012/12/asynchronous%EF%BC%BFjavascript.html" target="_blank" rel="external">Javascript异步编程的4种方法(阮一峰)</a></li><li><a href="http://borninsummer.com/2015/06/02/using-promise-to-carry-out-multi-ajax-procedure/" target="_blank" rel="external">用Promise实现多个Ajax的异步流程控制</a></li><li><a href="https://xifengxx.github.io/2016/05/04/jQuery%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B08/" target="_blank" rel="external">jQuery的AJAX方法(全局)</a></li><li><a href="http://es6.ruanyifeng.com/#docs/promise" target="_blank" rel="external">Promise对象(ES6)</a></li></ul><a id="more"></a><h3 id="when-传递多个deferred"><a href="#when-传递多个deferred" class="headerlink" title="$.when() 传递多个deferred"></a>$.when() 传递多个deferred</h3><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var ajaxBatch=[];</div><div class="line"><span class="regexp">//</span>构建deferred数组</div><div class="line">...</div><div class="line"></div><div class="line"><span class="variable">$.</span><span class="keyword">when</span>.apply(<span class="variable">$,</span> ajaxBatch).done();</div></pre></td></tr></table></figure><h3 id="done-callback内arguments结构不一致"><a href="#done-callback内arguments结构不一致" class="headerlink" title="done() callback内arguments结构不一致"></a>done() callback内arguments结构不一致</h3><p>就是会有三种情况：</p><ul><li>无参数</li><li>$.when()一个deferred参数: [data, textStatus , jqXHR] #假定 x代表[data,textStatus,jqXHR]结构</li><li>$.when()多个deferred参数: [x1,x2,x3]</li></ul><p>是不是醉了，怎么统一处理？<br>目前使用判断最里层data的结构<br></p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">.done(function()&#123;</div><div class="line">  var params=[].slice.call(arguments);</div><div class="line">  if(typeof params[<span class="string">0</span>][<span class="symbol">0</span>] !='object')&#123; //第二种情况返回undefined</div><div class="line"><span class="code">      params=[];</span></div><div class="line"><span class="code">      params[0]=[].slice.call(arguments);</span></div><div class="line">  &#125;</div><div class="line">  //然后遍历结果吧</div><div class="line">&#125;);</div></pre></td></tr></table></figure><p></p><p><a href="http://stackoverflow.com/a/28365429/4431337" target="_blank" rel="external">stackoverflow</a><br><a href="https://www.odoo.com/documentation/8.0/reference/async.html" target="_blank" rel="external">Asynchronous Operations</a></p><h3 id="同步UI阻塞弹出层提示"><a href="#同步UI阻塞弹出层提示" class="headerlink" title="同步UI阻塞弹出层提示"></a>同步UI阻塞弹出层提示</h3><p><a href="http://jsfiddle.net/newbmiao/77xyhjjj/4/" target="_blank" rel="external">弹出层成功回调中使用setTimeout延时</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      jquery多异步管理使用记录
    
    </summary>
    
      <category term="js" scheme="http://blog.newbmiao.com/categories/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/categories/js/jquery/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/tags/jquery/"/>
    
      <category term="ajax" scheme="http://blog.newbmiao.com/tags/ajax/"/>
    
      <category term="promise" scheme="http://blog.newbmiao.com/tags/promise/"/>
    
  </entry>
  
  <entry>
    <title>jquery-timepicker-addon动态显示使用</title>
    <link href="http://blog.newbmiao.com/2016/09/07/how-to-dynamic-show-jquery-timepicker-addon.html"/>
    <id>http://blog.newbmiao.com/2016/09/07/how-to-dynamic-show-jquery-timepicker-addon.html</id>
    <published>2016-09-07T03:26:24.000Z</published>
    <updated>2016-09-28T07:53:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><blockquote><p><a href="http://trentrichardson.com/examples/timepicker/" target="_blank" rel="external">文档</a></p></blockquote><p>需要分条件判断是否显示时间选择，而timepicker是单例模式，<br>初始化只有第一次生效，要想实时更新需要用到<code>option</code>选项设置</p><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// #cond是条件选择select，带.selectDateInput的是两个时间选择输入框</span></div><div class="line">$(<span class="string">'#cond'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="comment">//设置默认显示</span></div><div class="line">  <span class="keyword">var</span> defaultOption = &#123;</div><div class="line">    <span class="attr">timeFormat</span>: <span class="string">"HH:mm:ss"</span>,</div><div class="line">    <span class="attr">dateFormat</span>: <span class="string">"yy-mm-dd"</span></div><div class="line">  &#125;;</div><div class="line">  <span class="comment">//获取分组对应时间(小时)，是否显示时间选择</span></div><div class="line">  <span class="keyword">var</span> startHour = <span class="number">9</span>;</div><div class="line">  <span class="keyword">var</span> enableTimePicker = <span class="literal">true</span>;</div><div class="line"></div><div class="line">  <span class="comment">//设置时间控件（防止直接输入时间）</span></div><div class="line">  $(<span class="string">'.selectDateInput'</span>).prop(<span class="string">'readonly'</span>, <span class="string">'readonly'</span>).val(<span class="string">''</span>);</div><div class="line">  <span class="keyword">if</span> (!enableTimePicker) &#123; <span class="comment">//不允许选择时间</span></div><div class="line">    <span class="keyword">var</span> startOption = &#123;</div><div class="line">      <span class="attr">hour</span>: startHour, <span class="comment">//设置初始时间</span></div><div class="line">      showHour: <span class="literal">false</span>,</div><div class="line">      <span class="attr">showMinute</span>: <span class="literal">false</span>,</div><div class="line">      <span class="attr">timeInput</span>: <span class="literal">false</span>, <span class="comment">//是否允许时间编辑</span></div><div class="line">      disabled: <span class="literal">false</span>, <span class="comment">//是否禁用控件</span></div><div class="line">      onSelect: <span class="function"><span class="keyword">function</span>(<span class="params">selectedDateTime</span>) </span>&#123;</div><div class="line">        <span class="comment">//选中后设置默认初始小时和结束时间（次日24小时后）</span></div><div class="line">        selectedDateTime = selectedDateTime.split(<span class="string">' '</span>)[<span class="number">0</span>] + <span class="string">" 00:00:00"</span>;</div><div class="line">        <span class="keyword">var</span> startDate = (<span class="keyword">new</span> <span class="built_in">Date</span>(selectedDateTime));</div><div class="line">        <span class="comment">//setDate设置时间</span></div><div class="line">        $(<span class="keyword">this</span>).datetimepicker(<span class="string">'setDate'</span>, selectedDateTime + <span class="string">" "</span> + startHour + <span class="string">":00:00"</span>);</div><div class="line">        startDate.setTime(startDate.getTime() + <span class="number">1000</span> * <span class="number">3600</span> * (<span class="number">24</span> + startHour) - <span class="number">1</span>);</div><div class="line">        <span class="comment">//格式化时间显示</span></div><div class="line">        <span class="keyword">var</span> endDateStr = startDate.toLocaleString(<span class="string">'zh-CN'</span>, &#123;<span class="attr">hour12</span>: <span class="literal">false</span>&#125;)</div><div class="line">                .replace(<span class="regexp">/\//g</span>, <span class="string">'-'</span>)</div><div class="line">                .replace(<span class="regexp">/\b\d\b/g</span>, <span class="string">'0$&amp;'</span>); <span class="comment">//添加前导零</span></div><div class="line">        $(<span class="string">'.selectDateInput:eq(1)'</span>).val(endDateStr);</div><div class="line">      &#125;</div><div class="line">    &#125;;</div><div class="line">    $(<span class="string">'.selectDateInput:eq(0)'</span>).datetimepicker(defaultOption)</div><div class="line">      .datetimepicker(<span class="string">'option'</span>, startOption); <span class="comment">//option更新（可实时刷新显示）</span></div><div class="line"></div><div class="line">    $(<span class="string">'.selectDateInput:eq(1)'</span>).datetimepicker()</div><div class="line">      .datetimepicker(<span class="string">'option'</span>, &#123;</div><div class="line">        <span class="attr">disabled</span>: <span class="literal">true</span> <span class="comment">//禁用第二个时间选择输入框</span></div><div class="line">      &#125;);</div><div class="line">  &#125; <span class="keyword">else</span> &#123; <span class="comment">//时间选择显示</span></div><div class="line">    $(<span class="string">'.selectDateInput'</span>).datetimepicker(defaultOption)</div><div class="line">      .datetimepicker(<span class="string">'option'</span>, &#123;</div><div class="line">        <span class="attr">showHour</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">showMinute</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">timeInput</span>: <span class="literal">true</span>,</div><div class="line">        <span class="attr">disabled</span>: <span class="literal">false</span>,</div><div class="line">        <span class="attr">onSelect</span>: <span class="literal">null</span></div><div class="line">      &#125;);</div><div class="line">  &#125;</div><div class="line">&#125;).trigger(<span class="string">'change'</span>);</div></pre></td></tr></table></figure><p>为了实现动态显示折腾了好久，以后查资料还是要多看看官方api和 stackOverFlow 了。</p><blockquote><p>附推荐<a href="http://www.cnblogs.com/yigeqi/p/4031393.html" target="_blank" rel="external">js正则一篇</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      jquery-timepicker-addon动态显示使用
    
    </summary>
    
      <category term="js" scheme="http://blog.newbmiao.com/categories/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/categories/js/jquery/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
      <category term="jquery-timepicker-addon" scheme="http://blog.newbmiao.com/tags/jquery-timepicker-addon/"/>
    
  </entry>
  
  <entry>
    <title>js如何动态调用不确定参数的函数</title>
    <link href="http://blog.newbmiao.com/2016/08/17/how-to-call-a-function-with-unsure-number-params.html"/>
    <id>http://blog.newbmiao.com/2016/08/17/how-to-call-a-function-with-unsure-number-params.html</id>
    <published>2016-08-17T06:17:31.000Z</published>
    <updated>2016-08-17T10:43:32.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//需求：想通过传函数体和参数去调用，但不确定参数（就是说不想写死参数）</span></div><div class="line"><span class="comment">//比方m这个函数可能会改成需要4个，8个参数，但不想改动态调用它的函数</span></div><div class="line"><span class="keyword">var</span> m = <span class="function"><span class="keyword">function</span><span class="params">(a, b, c)</span> </span>&#123;</div><div class="line">  <span class="keyword">return</span> a + b + c;</div><div class="line">&#125;</div></pre></td></tr></table></figure><a id="more"></a><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//this is solution</span></div><div class="line"><span class="comment">//apply+arguments 把参数数组动态传递给函数体</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">makeFunc</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> args = <span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>);</div><div class="line">  <span class="keyword">var</span> func = args.shift();</div><div class="line">  <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> func.apply(<span class="literal">null</span>, args.concat(<span class="built_in">Array</span>.prototype.slice.call(<span class="built_in">arguments</span>)));</div><div class="line">  &#125;;</div><div class="line">&#125;</div><div class="line">m2 = makeFunc(m, <span class="number">4</span>, <span class="number">5</span>); <span class="comment">//缺的参数也可以在附加（注意concat的调用，叠加了参数数组）</span></div><div class="line"><span class="built_in">console</span>.log(m2(<span class="number">6</span>, <span class="number">7</span>)); <span class="comment">//多余的参数7不会被用到</span></div><div class="line"></div><div class="line"><span class="comment">//简化</span></div><div class="line"><span class="comment">//Array.prototype.slice可以用[].slice替换</span></div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">//题外话：意外遇到一个上下文调用的错误=_=！</span></div><div class="line"><span class="keyword">var</span> p = <span class="built_in">console</span>.log</div><div class="line">p(<span class="number">1</span>); <span class="comment">//error: Uncaught TypeError: Illegal invocation（在控制台查看）</span></div><div class="line">p.apply(<span class="built_in">console</span>, [<span class="number">1</span>]); <span class="comment">//ok</span></div><div class="line"></div><div class="line"><span class="comment">//小心的坑：</span></div><div class="line"><span class="comment">// makeFunc的apply设置上下文是null，所以有依赖上下文的函数需考虑传不依赖上下文的函数体，必要时可以构造匿名函数</span></div><div class="line"></div><div class="line"><span class="comment">//遇到的问题！（没搞明白）</span></div><div class="line"><span class="comment">// function()&#123;$('#app').show();&#125; //显示弹框，直接传$('#app').show 会导致无法响应</span></div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      js如何动态调用不确定参数的函数
    
    </summary>
    
      <category term="js" scheme="http://blog.newbmiao.com/categories/js/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>mac工具集</title>
    <link href="http://blog.newbmiao.com/2016/03/15/mac-tool.html"/>
    <id>http://blog.newbmiao.com/2016/03/15/mac-tool.html</id>
    <published>2016-03-15T02:50:23.000Z</published>
    <updated>2018-02-10T06:09:47.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><h2 id="brew"><a href="#brew" class="headerlink" title="brew"></a>brew</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ruby <span class="_">-e</span> <span class="string">"<span class="variable">$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)</span>"</span></div></pre></td></tr></table></figure><h2 id="iterm2"><a href="#iterm2" class="headerlink" title="iterm2"></a>iterm2</h2><figure class="highlight elixir"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="symbol">https:</span>/<span class="regexp">/iterm2.com/downloads</span><span class="regexp">/stable/i</span>Term2_v2_<span class="number">0</span>.zip</div><div class="line">运行iterm2之后按cmd+,调出设置界面，在<span class="string">'profile'</span> -&gt; <span class="string">"Terminal Type"</span>改成xterm-new。</div></pre></td></tr></table></figure><a id="more"></a><h2 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h2><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">brew install zsh</div><div class="line">sudo vim <span class="meta-keyword">/etc/</span>shells</div><div class="line">  <span class="meta">#在最后面加上一行</span></div><div class="line">  <span class="meta-keyword">/usr/</span>local/Cellar<span class="meta-keyword">/zsh/</span><span class="number">5.0</span><span class="number">.8</span><span class="meta-keyword">/bin/</span>zsh</div><div class="line">chsh -s <span class="meta-keyword">/usr/</span>local/Cellar<span class="meta-keyword">/zsh/</span><span class="number">5.0</span><span class="number">.8</span><span class="meta-keyword">/bin/</span>zsh</div><div class="line"><span class="meta">#重启终端即可</span></div></pre></td></tr></table></figure><h2 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h2><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">curl -L http<span class="variable">s:</span>//raw.github.<span class="keyword">com</span>/robbyrussell/oh-my-zsh/master/tools/install.<span class="keyword">sh</span> | <span class="keyword">sh</span></div></pre></td></tr></table></figure><h2 id="dash-文档工具"><a href="#dash-文档工具" class="headerlink" title="dash 文档工具"></a>dash 文档工具</h2><h2 id="alfred-快捷调用"><a href="#alfred-快捷调用" class="headerlink" title="alfred 快捷调用"></a>alfred 快捷调用</h2><p><a href="https://github.com/zenorocha/alfred-workflows" target="_blank" rel="external">附一个开发必备工具集</a></p><h2 id="lrzsz-服务器和本机传输工具"><a href="#lrzsz-服务器和本机传输工具" class="headerlink" title="lrzsz-服务器和本机传输工具"></a>lrzsz-服务器和本机传输工具</h2><p><a href="https://github.com/mmastrac/iterm2-zmodem" target="_blank" rel="external">iterm2-zmodem</a><br>item2 ssh远程服务器，就能上传下载文件</p><ul><li><strong>sz 想要本机接收的文件</strong></li><li><strong>rz 想让远程收到的文件</strong></li></ul><p><strong>issue：ssl证书验证失败无法下载</strong><br>原因是brew https连接失败<br>解决方法：<br></p><figure class="highlight vim"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">sudo <span class="keyword">vim</span> /usr/local/Library/Homebrew/utils.rb</div><div class="line"></div><div class="line">修改下面的行加一个-<span class="keyword">k</span> 参数，让 curl 忽略 https 验证</div><div class="line"></div><div class="line"><span class="keyword">args</span> = [HOMEBREW_CURL_ARGS, HOMEBREW_USER_AGENT,<span class="string">'-k'</span>, *<span class="keyword">args</span>]</div></pre></td></tr></table></figure><p></p><h2 id="tldr"><a href="#tldr" class="headerlink" title="tldr"></a>tldr</h2><p><a href="https://github.com/tldr-pages/tldr" target="_blank" rel="external">tldr查询命令如何用</a></p><h2 id="how2"><a href="#how2" class="headerlink" title="how2"></a>how2</h2><p><a href="https://github.com/santinic/how2" target="_blank" rel="external">stackoverflow命令行查询工具</a></p><h2 id="git-credential-osxkeychain"><a href="#git-credential-osxkeychain" class="headerlink" title="git-credential-osxkeychain"></a>git-credential-osxkeychain</h2><p><a href="https://help.github.com/articles/caching-your-github-password-in-git/" target="_blank" rel="external">免密码提交</a><br></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">curl -s -O https:<span class="comment">//github-media-downloads.s3.amazonaws.com/osx/git-credential-osxkeychain</span></div><div class="line">chmod u+x git-credential-osxkeychain</div><div class="line">sudo mv git-credential-osxkeychain <span class="string">"$(dirname $(which git))/git-credential-osxkeychain"</span></div><div class="line">git config --global credential<span class="selector-class">.helper</span> osxkeychain</div></pre></td></tr></table></figure><p></p><h2 id="mackup"><a href="#mackup" class="headerlink" title="mackup"></a>mackup</h2><p><a href="https://github.com/lra/mackup" target="_blank" rel="external">mackup备份配置</a></p><blockquote><p>推荐 <a href="http://gooday.xyz/proxifier%E6%B3%A8%E5%86%8C%E7%A0%81%E4%BB%A5%E5%8F%8A%E9%85%8D%E5%90%88shadowsocks%E4%B8%8A%E7%BD%91/" target="_blank" rel="external">googledrive+proxifier</a></p></blockquote><h2 id="shortcat"><a href="#shortcat" class="headerlink" title="shortcat"></a>shortcat</h2><p><a href="http://www.appinn.com/shortcat/" target="_blank" rel="external">扔掉你的鼠标</a><br><a href="https://blog.magi.site/2016/06/15/shortcat-config-tips/" target="_blank" rel="external">配置</a></p><h2 id="cheatsheet-amp-EVE-快捷键提示"><a href="#cheatsheet-amp-EVE-快捷键提示" class="headerlink" title="cheatsheet &amp; EVE 快捷键提示"></a>cheatsheet &amp; EVE 快捷键提示</h2><p><a href="https://www.mediaatelier.com/CheatSheet/" target="_blank" rel="external">cheatsheet</a><br><a href="http://www.hotkey-eve.com/" target="_blank" rel="external">EVE</a></p><h2 id="vscode-神编辑器"><a href="#vscode-神编辑器" class="headerlink" title="vscode 神编辑器"></a>vscode 神编辑器</h2><p><a href="http://code.visualstudio.com/" target="_blank" rel="external">vscode</a></p><h2 id="coursera相关"><a href="#coursera相关" class="headerlink" title="coursera相关"></a>coursera相关</h2><p><a href="https://github.com/coursera-dl/courser-dl" target="_blank" rel="external">coursera-dl-下载工具</a><br><a href="https://lhc70000.github.io/iina/zh-cn/" target="_blank" rel="external">IINA-自动加载字幕</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      mac,tool
    
    </summary>
    
      <category term="mac" scheme="http://blog.newbmiao.com/categories/mac/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/categories/mac/tool/"/>
    
    
      <category term="mac" scheme="http://blog.newbmiao.com/tags/mac/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>基于phpstorm和vagrant环境的xdebug远程调试</title>
    <link href="http://blog.newbmiao.com/2015/12/04/xdebug-remote-debug-with-phpstorm-and-vagrant.html"/>
    <id>http://blog.newbmiao.com/2015/12/04/xdebug-remote-debug-with-phpstorm-and-vagrant.html</id>
    <published>2015-12-04T06:01:09.000Z</published>
    <updated>2016-07-07T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><h2 id="网页调试-本地调试"><a href="#网页调试-本地调试" class="headerlink" title="网页调试/本地调试"></a>网页调试/本地调试</h2><p>流程是啥</p><ul><li>开发环境安装xdebug，配置监听client端（安装phpstorm那端）</li><li>配置phpstorm-debug，重点要用path-map，不然对于单一入口的网页调试找不到哦</li><li>断点跟踪吧</li></ul><p>详细网上资料很多，下边三个都可以用，我就不赘述了</p><p><a href="http://xrong.net/2014/09/09/phpstorm%E8%BF%9C%E7%A8%8B%E8%B0%83%E8%AF%95/" target="_blank" rel="external">phpstorm远程调试</a><br><a href="https://confluence.jetbrains.com/display/PhpStorm/Zero-configuration+Web+Application+Debugging+with+Xdebug+and+PhpStorm" target="_blank" rel="external">Zero-configuration Web Application Debugging with Xdebug and PhpStorm</a><br><a href="http://stackoverflow.com/questions/15339165/cannot-debug-with-phpstorm-vagrant-xdebug" target="_blank" rel="external">cannot-debug-with-phpstorm-vagrant-xdebug</a></p><hr><h2 id="远程cli调试"><a href="#远程cli调试" class="headerlink" title="远程cli调试"></a>远程cli调试</h2><a id="more"></a><p>上边的不适用于远程cli调试，为什么？</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">原理是一样，远程主机的xdebug监听client的phpstorm，但是命令行调试， $_SERVER 中没有serverName和IDE_KEY的值.</div><div class="line">另外当只起用  xdebug<span class="selector-class">.remote_connect_back</span> = on  不监听指定ip，是需要提供  xdebug<span class="selector-class">.remote_host</span> 的值的。</div><div class="line">明白了这些，只要配置环境变量值就可以了</div><div class="line">主要就是 XDEBUG_CONFIG  和 PHP_IDE_CONFIG  （serverName要对应你在phpstorm中配置的server别名）</div></pre></td></tr></table></figure><hr><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="comment">#添加下边命令到 ~/.bashrc</span></div><div class="line"><span class="keyword">function</span> <span class="function"><span class="title">_phpdebug</span></span>()&#123;</div><div class="line">      <span class="built_in">export</span> XDEBUG_CONFIG=<span class="string">"remote_host=<span class="variable">$(echo $SSH_CLIENT | awk '&#123;print $1&#125;')</span> idekey=PHPSTORM"</span></div><div class="line">       <span class="built_in">export</span> PHP_IDE_CONFIG=<span class="string">"serverName=cli"</span></div><div class="line">       <span class="built_in">echo</span> <span class="string">"set XDEBUG_CONFIG=<span class="variable">$&#123;XDEBUG_CONFIG&#125;</span>; PHP_IDE_CONFIG=<span class="variable">$&#123;PHP_IDE_CONFIG&#125;</span>"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">alias</span> phpdebug=<span class="string">"_phpdebug"</span></div><div class="line"><span class="built_in">alias</span> phpdebugoff=<span class="string">"unset PHP_IDE_CONFIG &amp;&amp; unset XDEBUG_CONFIG"</span></div><div class="line"></div><div class="line"><span class="comment">#执行</span></div><div class="line"><span class="built_in">source</span> ~/.bashrc</div></pre></td></tr></table></figure><p>以后调试前只要在vagrant或远程主机先执行 <code>phpdebug</code> 就行<br>需要取消的话 <code>phpdebugoff</code> 就可以了</p><blockquote><p>参考自：<br><a href="http://stackoverflow.com/questions/16518262/xdebug-how-to-debug-remote-console-application" target="_blank" rel="external">xdebug-how-to-debug-remote-console-application</a><br><a href="https://www.adayinthelifeof.nl/2012/12/20/debugging-remote-cli-with-phpstorm/" target="_blank" rel="external">debugging-remote-cli-with-phpstorm</a></p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      基于phpstorm和vagrant环境的xdebug远程调试
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
      <category term="tool" scheme="http://blog.newbmiao.com/categories/php/tool/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="xdebug" scheme="http://blog.newbmiao.com/tags/xdebug/"/>
    
  </entry>
  
  <entry>
    <title>让影梭和搬瓦工帮你科学上网</title>
    <link href="http://blog.newbmiao.com/2015/11/28/shadowsocks-polipo-vps.html"/>
    <id>http://blog.newbmiao.com/2015/11/28/shadowsocks-polipo-vps.html</id>
    <published>2015-11-28T14:11:31.000Z</published>
    <updated>2016-09-18T05:21:25.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><blockquote><p>环境：</p><ul><li>server:shadowsocks(Linux)</li><li>client:shadowsocks(Mac) , polipo</li></ul><p>硬广：<a href="https://bandwagonhost.com/aff.php?aff=5640" target="_blank" rel="external">推荐VPS“搬瓦工”</a><br>理由有3：</p><ul><li>shadowsocks server： 一键安装（后续可自定义配置）</li><li>性价比高：目前比较便宜的是 <strong>$19.99</strong> 一年,256MB内存的VPS，而且可以用 <strong>支付宝</strong> 支付</li><li>操作不能在简单了！</li></ul></blockquote><a id="more"></a><p>Shadowsocks具体干啥的，都懂得，介绍详见<a href="https://wiki.archlinux.org/index.php/Shadowsocks" target="_blank" rel="external">Shadowsocks</a></p><p>准备工作：<br>去<a href="https://bandwagonhost.com/aff.php?aff=5640" target="_blank" rel="external">VPS“搬瓦工”</a>买一个合适的VPS，然后用支付宝支付！</p><p>接下来走安装流程，需要linux一些基础(server_ip和port,password请自行替换自己的)<br>利用ssh登陆VPS<br></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="attribute">ssh</span> root<span class="variable">@your_ip</span> -p your_port</div><div class="line"><span class="comment">#替换你的ip和端口（系统会邮件发给你）</span></div><div class="line"><span class="comment">#输入你的密码</span></div></pre></td></tr></table></figure><p></p><h1 id="server"><a href="#server" class="headerlink" title="server"></a>server</h1><h2 id="shadowsocks"><a href="#shadowsocks" class="headerlink" title="shadowsocks"></a>shadowsocks</h2><p>不推荐自己安装，依赖解决太麻烦：<br><del><a href="https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks-libev.sh" target="_blank" rel="external">centos6一键安装脚本</a></del></p><p>利用官方一键安装：<br>KiwiVM （进入管理平台）</p><ul><li>Install new OS 》 选择Centos 6 x86 minimal 或者 Centos 6 x86_64 minimal安装即可，别作死安装centos7啊</li><li>Shadowsocks Server 》安装Shadowsocks 》默认生成的已经可以用了，但是我们要自己可配端口和密码</li><li>自定义配置</li></ul><figure class="highlight dts"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">vi <span class="meta-keyword">/etc/</span>shadowsocks.<span class="class">json</span></div><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"0.0.0.0"</span>,</div><div class="line">    <span class="string">"local_port"</span>:<span class="number">1080</span>,</div><div class="line">    <span class="string">"port_password"</span>:&#123;</div><div class="line">        <span class="string">"port1"</span>:<span class="string">"password1"</span>,</div><div class="line">        <span class="string">"port2"</span>:<span class="string">"password2"</span></div><div class="line">    &#125;,</div><div class="line">    <span class="string">"timeout"</span>:<span class="number">120</span>, <span class="comment">//超时时间</span></div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span>,</div><div class="line">    <span class="string">"fast_open"</span>:false, <span class="comment">//如果你的服务器 Linux 内核在3.7+，可以开启 fast_open 以降低延迟</span></div><div class="line">    <span class="string">"workers"</span>:<span class="number">1</span> <span class="comment">//workers数量</span></div><div class="line">&#125;</div><div class="line"><span class="meta">#结束掉系统安装的shadowsocks server</span></div><div class="line">killall ssserver</div><div class="line"></div><div class="line"><span class="meta">#启用自己配置的shadowsocks server</span></div><div class="line"><span class="meta-keyword">/usr/</span>bin/ssserver -c  <span class="meta-keyword">/etc/</span>shadowsocks.json --user nobody -d start</div></pre></td></tr></table></figure><h1 id="client"><a href="#client" class="headerlink" title="client"></a>client</h1><h2 id="Mac-shadowsocks"><a href="#Mac-shadowsocks" class="headerlink" title="Mac-shadowsocks"></a>Mac-shadowsocks</h2><figure class="highlight stata"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">brew install python3</div><div class="line">pip3 install shadowsocks</div><div class="line">brew install openssl swig libevent</div><div class="line">pip3 install m2crypto gevent</div><div class="line"></div><div class="line">vi /usr/<span class="keyword">local</span>/etc/shadowsocks-libev.json</div><div class="line">&#123;</div><div class="line">    <span class="string">"server"</span>:<span class="string">"my_server_ip"</span>,</div><div class="line">    <span class="string">"server_port"</span>: your_port,</div><div class="line">    <span class="string">"local_address"</span>:<span class="string">"127.0.0.1"</span>,</div><div class="line">    <span class="string">"local_port"</span>:1080,</div><div class="line">    <span class="string">"password"</span>:<span class="string">"*****"</span>,</div><div class="line">    <span class="string">"timeout"</span>: 60,</div><div class="line">    <span class="string">"method"</span>:<span class="string">"aes-256-cfb"</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"># 启动</div><div class="line">sudo touch /<span class="keyword">var</span>/<span class="keyword">run</span>/sslocal.pid /<span class="keyword">var</span>/<span class="keyword">log</span>/sslocal.<span class="built_in">log</span></div><div class="line">sudo sslocal -c /usr/<span class="keyword">local</span>/etc/shadowsocks-libev.json --user root --pid-<span class="keyword">file</span> /<span class="keyword">var</span>/<span class="keyword">run</span>/sslocal.pid --<span class="keyword">log</span>-<span class="keyword">file</span> /<span class="keyword">var</span>/<span class="keyword">log</span>/sslocal.<span class="keyword">log</span> -<span class="keyword">d</span> start</div></pre></td></tr></table></figure><h2 id="polipo"><a href="#polipo" class="headerlink" title="polipo"></a>polipo</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">brew <span class="keyword">install</span> polipo</div><div class="line"># 设置开机启动，并添加shadowsocks转换</div><div class="line">vim /usr/<span class="keyword">local</span>/opt/polipo/homebrew.mxcl.polipo.plist</div><div class="line"><span class="comment">-----------------------------------</span></div><div class="line">&lt;?<span class="keyword">xml</span> <span class="keyword">version</span>=<span class="string">"1.0"</span> <span class="keyword">encoding</span>=<span class="string">"UTF-8"</span>?&gt;</div><div class="line">&lt;!DOCTYPE plist <span class="keyword">PUBLIC</span> <span class="string">"-//Apple//DTD PLIST 1.0//EN"</span> <span class="string">"http://www.apple.com/DTDs/PropertyList-1.0.dtd"</span>&gt;</div><div class="line">&lt;plist <span class="keyword">version</span>=<span class="string">"1.0"</span>&gt;</div><div class="line">  &lt;dict&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;Label&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="keyword">string</span>&gt;homebrew.mxcl.polipo&lt;/<span class="keyword">string</span>&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;RunAtLoad&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="literal">true</span>/&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;KeepAlive&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="literal">true</span>/&gt;</div><div class="line">    &lt;<span class="keyword">key</span>&gt;ProgramArguments&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;<span class="built_in">array</span>&gt;</div><div class="line">      &lt;<span class="keyword">string</span>&gt;/usr/<span class="keyword">local</span>/opt/polipo/<span class="keyword">bin</span>/polipo&lt;/<span class="keyword">string</span>&gt;</div><div class="line">      &lt;<span class="keyword">string</span>&gt;socksParentProxy=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span>&lt;/<span class="keyword">string</span>&gt;</div><div class="line">    &lt;/<span class="built_in">array</span>&gt;</div><div class="line">    &lt;!<span class="comment">-- Set `ulimit -n 20480`. The default OS X limit is 256, that's</span></div><div class="line">         <span class="keyword">not</span> enough <span class="keyword">for</span> Polipo (displays <span class="string">'too many files open'</span> <span class="keyword">errors</span>).</div><div class="line">         It seems <span class="keyword">like</span> you have <span class="keyword">no</span> reason <span class="keyword">to</span> <span class="keyword">lower</span> this <span class="keyword">limit</span></div><div class="line">         (<span class="keyword">and</span> unlikely will want <span class="keyword">to</span> <span class="keyword">raise</span> it). <span class="comment">--&gt;</span></div><div class="line">    &lt;<span class="keyword">key</span>&gt;SoftResourceLimits&lt;/<span class="keyword">key</span>&gt;</div><div class="line">    &lt;dict&gt;</div><div class="line">      &lt;<span class="keyword">key</span>&gt;NumberOfFiles&lt;/<span class="keyword">key</span>&gt;</div><div class="line">      &lt;<span class="built_in">integer</span>&gt;<span class="number">20480</span>&lt;/<span class="built_in">integer</span>&gt;</div><div class="line">    &lt;/dict&gt;</div><div class="line">  &lt;/dict&gt;</div><div class="line">&lt;/plist&gt;</div><div class="line"><span class="comment">-----------------------------------</span></div><div class="line"></div><div class="line"><span class="keyword">ln</span> -sfv /usr/<span class="keyword">local</span>/opt/polipo/homebrew.mxcl.polipo.plist ~/<span class="keyword">Library</span>/LaunchAgents/homebrew.mxcl.polipo.plist</div><div class="line">launchctl <span class="keyword">load</span> ~/<span class="keyword">Library</span>/LaunchAgents/homebrew.mxcl.polipo.plist</div><div class="line"></div><div class="line">#这样开机回自动运行 :polipo socksParentProxy=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></div><div class="line"></div><div class="line">** 命令行执行番羽墙加上下边两句 **</div><div class="line">https_proxy=<span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8123</span> http_proxy=<span class="keyword">http</span>://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">8123</span></div><div class="line">** 建议设置<span class="keyword">alias</span> **</div><div class="line"><span class="keyword">alias</span> fq=<span class="string">"https_proxy=http://127.0.0.1:8123 http_proxy=http://127.0.0.1:8123"</span></div></pre></td></tr></table></figure><h2 id="Android-shadowsocks"><a href="#Android-shadowsocks" class="headerlink" title="Android shadowsocks"></a>Android shadowsocks</h2><blockquote><p>温馨提示：不用ROOT！！！<br><a href="https://github.com/shadowsocks/shadowsocks-android/releases" target="_blank" rel="external">shadowsocks-android(目前最新V3.1.3)</a></p></blockquote><h2 id="IOS"><a href="#IOS" class="headerlink" title="IOS"></a>IOS</h2><p>没有找到能用的IOS版本，知道的告我下！</p><blockquote><p>到这里祝贺你科学上网了，google吧！</p></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      影梭，番羽墙，VPS，搬瓦工
    
    </summary>
    
      <category term="mac" scheme="http://blog.newbmiao.com/categories/mac/"/>
    
      <category term="shadowsocks" scheme="http://blog.newbmiao.com/categories/mac/shadowsocks/"/>
    
    
      <category term="mac" scheme="http://blog.newbmiao.com/tags/mac/"/>
    
      <category term="shadowsocks" scheme="http://blog.newbmiao.com/tags/shadowsocks/"/>
    
  </entry>
  
  <entry>
    <title>如何更新别人apple-id购买的应用</title>
    <link href="http://blog.newbmiao.com/2015/11/20/how-to-update-apps-apple-id.html"/>
    <id>http://blog.newbmiao.com/2015/11/20/how-to-update-apps-apple-id.html</id>
    <published>2015-11-20T09:30:11.000Z</published>
    <updated>2016-07-07T13:09:20.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p>Mac的应用比如Xcode太大，一般不会自己下，别人airdrop给你，方便吧！<br>可是，升级时你就发现没有传给那个人的apple id密码你都没法升级了，而为了安全，除了appstore你别无选择</p><p>不过方法还是有的，为了自己不用蛋疼，记录在这<br><a id="more"></a></p><h2 id="清除apple-id信息"><a href="#清除apple-id信息" class="headerlink" title="清除apple id信息"></a>清除apple id信息</h2><p>右键Xcode.app &gt;&gt; 显示包内容 &gt;&gt; 找到_MASReceipt &gt;&gt; 删除recept</p><h2 id="更新文件缓存"><a href="#更新文件缓存" class="headerlink" title="更新文件缓存"></a>更新文件缓存</h2><p>第一步,<br>下载 <a href="https://www.macupdate.com/app/mac/11582/onyx" target="_blank" rel="external">Download OnyX for Mac</a><br>第二步,<br>打开应用(需要管理员权限),<br>选择 维护 -&gt; 重建 ,<br>把 “LaunchServices”, “dyld 的共享内存”, “Spotlight索引” 选中,<br>最后点击 “执行”.</p><p>参考：</p><ul><li><a href="http://www.cnblogs.com/ixxonline/p/4087582.html" target="_blank" rel="external">使用新的AppleID更新Xcode</a></li><li><a href="http://www.zhihu.com/question/21448755" target="_blank" rel="external">如何删除别人 apple id 购买的应用, 改用自己的 apple id 安装?</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      如何更新别人apple-id购买的应用
    
    </summary>
    
      <category term="mac" scheme="http://blog.newbmiao.com/categories/mac/"/>
    
    
      <category term="software" scheme="http://blog.newbmiao.com/tags/software/"/>
    
  </entry>
  
  <entry>
    <title>jQuery应用杂记</title>
    <link href="http://blog.newbmiao.com/2015/10/25/jQuery-code-record.html"/>
    <id>http://blog.newbmiao.com/2015/10/25/jQuery-code-record.html</id>
    <published>2015-10-25T14:15:38.000Z</published>
    <updated>2017-01-19T08:13:09.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><p><strong>工作中常用的一些代码片段</strong></p><h2 id="全选"><a href="#全选" class="headerlink" title="全选"></a>全选</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="string">"#ckAll"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    $(<span class="string">"input[name='sub']"</span>).prop(<span class="string">"checked"</span>, <span class="keyword">this</span>.checked);</div><div class="line">  &#125;);</div><div class="line">  <span class="comment">//全部checkbox选中后 全选框也选中</span></div><div class="line"></div><div class="line">  $(<span class="string">"input[name='sub']"</span>).click(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> $subs = $(<span class="string">"input[name='sub']"</span>);</div><div class="line">    $(<span class="string">"#ckAll"</span>).prop(<span class="string">"checked"</span> , $subs.length == $subs.filter(<span class="string">":checked"</span>).length ? <span class="literal">true</span> :<span class="literal">false</span>);</div><div class="line">  &#125;);</div></pre></td></tr></table></figure><a id="more"></a><h2 id="获取选择内容"><a href="#获取选择内容" class="headerlink" title="获取选择内容"></a>获取选择内容</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> uids = $(<span class="string">'[name=subCk]:checked'</span>)</div><div class="line">          .map(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">              <span class="keyword">return</span> $(<span class="keyword">this</span>).data(<span class="string">'id'</span>);</div><div class="line">          &#125;)</div><div class="line">          .get()</div><div class="line">          .join();</div></pre></td></tr></table></figure><h2 id="全选和其他选项不能同时选中"><a href="#全选和其他选项不能同时选中" class="headerlink" title="全选和其他选项不能同时选中"></a>全选和其他选项不能同时选中</h2><figure class="highlight typescript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">	<span class="comment">/*</span></div><div class="line">	 *@ckName checkbox-name</div><div class="line">	 *@i 对应index</div><div class="line">	*/</div><div class="line">	<span class="function"><span class="keyword">function</span> <span class="title">checkToggle</span>(<span class="params">ckName,i</span>)</span>&#123;</div><div class="line">	    <span class="keyword">if</span>(<span class="built_in">arguments</span>.length==<span class="number">1</span>)&#123;</div><div class="line">	        i=<span class="number">0</span>;</div><div class="line">	    &#125;</div><div class="line">	    $(<span class="string">"[name='"</span>+ckName+<span class="string">"']:eq("</span>+i+<span class="string">")"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	        <span class="keyword">if</span> ($(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>)) &#123;</div><div class="line">	            $(<span class="keyword">this</span>).parent().nextAll().children().prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;);</div><div class="line">	    $(<span class="string">"[name='"</span>+ckName+<span class="string">"']"</span>).not(<span class="string">":eq("</span>+i+<span class="string">")"</span>).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">	        <span class="keyword">if</span> ($(<span class="keyword">this</span>).prop(<span class="string">'checked'</span>)) &#123;</div><div class="line">	            $(<span class="string">"[name='"</span>+ckName+<span class="string">"']:eq("</span>+i+<span class="string">")"</span>).prop(<span class="string">'checked'</span>, <span class="literal">false</span>);</div><div class="line">	        &#125;</div><div class="line">	    &#125;);</div><div class="line">	&#125;</div><div class="line">## 切换条数</div><div class="line"></div><div class="line">	 <span class="keyword">var</span> pageData=&#123;</div><div class="line">	     limit:&lt;?=$limit;?&gt;</div><div class="line">	 &#125;;</div><div class="line">	 $(<span class="string">"[value="</span>+pageData.limit+<span class="string">"]:radio"</span>).prop(<span class="string">'checked'</span>,<span class="string">'true'</span>);</div><div class="line">	    $(<span class="string">'[name=limit]:radio'</span>).change(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">	        <span class="keyword">var</span> limit=$(<span class="keyword">this</span>).val();</div><div class="line">	        <span class="keyword">if</span>(<span class="built_in">parseInt</span>(limit)&lt;<span class="number">10</span>)&#123;</div><div class="line">	            <span class="keyword">return</span>;</div><div class="line">	        &#125;</div><div class="line">	        <span class="keyword">if</span>(location.search.indexOf(<span class="string">'limit='</span>)!==<span class="number">-1</span>)&#123;</div><div class="line">	            location.search=location.search.replace(<span class="regexp">/limit=(\d*)?/</span>,<span class="string">'limit='</span>+limit);</div><div class="line">	        &#125;<span class="keyword">else</span>&#123;</div><div class="line">	            <span class="built_in">console</span>.log((location.search==<span class="string">''</span>)?<span class="string">'limit='</span>+limit:<span class="string">'&amp;limit='</span>+limit);</div><div class="line">	            location.search=(location.search==<span class="string">''</span>)?<span class="string">'limit='</span>+limit:location.search+<span class="string">'&amp;limit='</span>+limit;</div><div class="line">	        &#125;</div><div class="line">	&#125;);</div></pre></td></tr></table></figure><h2 id="重置表单"><a href="#重置表单" class="headerlink" title="重置表单"></a>重置表单</h2><p>jQuery中没有重置表单的方法,如果需要，可以使用Dom的reset方法<br></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="meta">$</span><span class="bash">(<span class="string">'#myform'</span>)[0].reset()</span></div></pre></td></tr></table></figure><p></p><h2 id="select选择显示隐藏相关元素"><a href="#select选择显示隐藏相关元素" class="headerlink" title="select选择显示隐藏相关元素"></a>select选择显示隐藏相关元素</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//选中与否select对应值，进行相应显示切换</span></div><div class="line"><span class="keyword">var</span> selectMap = &#123;</div><div class="line">        <span class="string">'#ddtype'</span>: &#123;</div><div class="line">            <span class="number">2</span>: &#123;<span class="attr">show</span>: <span class="string">'input[name=deadline]'</span>, <span class="attr">hide</span>: <span class="string">''</span>&#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'#aliasType'</span>: &#123;</div><div class="line">            <span class="number">1</span>: &#123;<span class="attr">show</span>: <span class="string">'.divAlias'</span>, <span class="attr">hide</span>: <span class="string">''</span>&#125;</div><div class="line">        &#125;,</div><div class="line">        <span class="string">'#type'</span>: &#123;</div><div class="line">            <span class="number">2</span>: &#123;<span class="attr">show</span>: <span class="string">'#sceneId'</span>, <span class="attr">hide</span>: <span class="string">'.divExtra'</span>&#125;</div><div class="line">        &#125;,</div><div class="line">&#125;;</div><div class="line">selectShow.register(selectMap);</div><div class="line"></div><div class="line"><span class="comment">//函数</span></div><div class="line"><span class="keyword">var</span> selectShow = &#123;</div><div class="line">    <span class="attr">register</span>: <span class="function"><span class="keyword">function</span> (<span class="params">selectMap</span>) </span>&#123;</div><div class="line">        <span class="keyword">var</span> me = <span class="keyword">this</span>;</div><div class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> select <span class="keyword">in</span> selectMap) &#123;</div><div class="line">            <span class="keyword">var</span> _select = selectMap[select];</div><div class="line">            (<span class="function"><span class="keyword">function</span> (<span class="params">select, _select</span>) </span>&#123;</div><div class="line">                $(select).change(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">                    <span class="keyword">for</span> (<span class="keyword">var</span> option <span class="keyword">in</span> _select) &#123;</div><div class="line">                        <span class="keyword">if</span> ($(<span class="keyword">this</span>).val() == option) &#123;</div><div class="line">                            me.toggle(_select[option][<span class="string">'show'</span>], _select[option][<span class="string">'hide'</span>])</div><div class="line">                        &#125; <span class="keyword">else</span> &#123;</div><div class="line">                            me.toggle(_select[option][<span class="string">'hide'</span>], _select[option][<span class="string">'show'</span>])</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">                $(select).change();</div><div class="line">            &#125;)(select, _select);<span class="comment">//闭包注册</span></div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    <span class="attr">toggle</span>: <span class="function"><span class="keyword">function</span> (<span class="params">show, hide</span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span> (show != <span class="string">''</span>) &#123;</div><div class="line">            $(show).removeClass(<span class="string">'hide'</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="keyword">if</span> (hide != <span class="string">''</span>) &#123;</div><div class="line">            $(hide).addClass(<span class="string">'hide'</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><h2 id="输入框字数检测"><a href="#输入框字数检测" class="headerlink" title="输入框字数检测"></a>输入框字数检测</h2><figure class="highlight actionscript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;textarea id=<span class="string">"msg"</span> name=<span class="string">"msg"</span> cols=<span class="string">"40"</span> rows=<span class="string">"4"</span> data-max-len=<span class="string">"50"</span> placeholder=<span class="string">"内容字数不超过50个字"</span>&gt;&lt;/textarea&gt;</div><div class="line">还可输入&lt;span id=<span class="string">"showLeft"</span>&gt;<span class="number">50</span>&lt;/span&gt;字</div><div class="line"></div><div class="line"><span class="comment">//注册</span></div><div class="line">$(document).on(<span class="string">'keyup'</span>, <span class="string">'#msg'</span>, <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		_maxlen.isMax(<span class="string">'#msg'</span>, <span class="string">'#showLeft'</span>);</div><div class="line">&#125;).focus(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		_maxlen.disabledRightMouse();</div><div class="line">&#125;).blur(<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">		_maxlen.enabledRightMouse();</div><div class="line">&#125;);</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/*</span></div><div class="line"> *监控输入字数</div><div class="line"> * content:textarea[data-max-len] 输入框</div><div class="line"> * container:span 显示剩余字数</div><div class="line"> * */</div><div class="line"><span class="keyword">var</span> _maxlen = &#123;</div><div class="line">    isMax: <span class="function"><span class="keyword">function</span> <span class="params">(content, container)</span> </span>&#123;</div><div class="line">        <span class="keyword">var</span> textarea = (<span class="keyword">typeof</span> content == <span class="string">'string'</span>) &amp;&amp; content.constructor == String ? $(content) : content;</div><div class="line">        container = (<span class="keyword">typeof</span> container == <span class="string">'string'</span>) &amp;&amp; container.constructor == String ? $(container) : container;</div><div class="line">        <span class="keyword">var</span> max_length = parseInt(textarea.data(<span class="string">'max-len'</span>));</div><div class="line">        <span class="keyword">var</span> _val = $.trim(textarea.val());</div><div class="line">        <span class="keyword">var</span> _leftLen = max_length;</div><div class="line">        <span class="keyword">if</span> (twttr.txt.getTweetLength(_val) &gt; max_length) &#123;</div><div class="line">            textarea.val(_val.substring(<span class="number">0</span>, max_length));</div><div class="line">            _leftLen = <span class="number">0</span>;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            _leftLen = max_length - twttr.txt.getTweetLength(textarea.val());</div><div class="line">        &#125;</div><div class="line">        container.text(_leftLen);</div><div class="line">    &#125;,</div><div class="line">    disabledRightMouse: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        document.oncontextmenu = <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;,</div><div class="line">    enabledRightMouse: <span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</div><div class="line">        document.oncontextmenu = <span class="literal">null</span>;</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      jQuery应用杂记
    
    </summary>
    
      <category term="web" scheme="http://blog.newbmiao.com/categories/web/"/>
    
      <category term="practice" scheme="http://blog.newbmiao.com/categories/web/practice/"/>
    
    
      <category term="js" scheme="http://blog.newbmiao.com/tags/js/"/>
    
      <category term="jquery" scheme="http://blog.newbmiao.com/tags/jquery/"/>
    
  </entry>
  
  <entry>
    <title>php信号处理</title>
    <link href="http://blog.newbmiao.com/2015/10/25/how-to-use-php-signal.html"/>
    <id>http://blog.newbmiao.com/2015/10/25/how-to-use-php-signal.html</id>
    <published>2015-10-25T14:10:33.000Z</published>
    <updated>2016-07-07T13:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><h1 id="pcntl"><a href="#pcntl" class="headerlink" title="pcntl"></a>pcntl</h1><h2 id="pcntl-signal"><a href="#pcntl-signal" class="headerlink" title="pcntl_signal"></a>pcntl_signal</h2><p>信号注册函数</p><h2 id="pcntl-alarm"><a href="#pcntl-alarm" class="headerlink" title="pcntl_alarm"></a>pcntl_alarm</h2><ul><li>指定秒数中断程序执行任务。</li><li>每次执行只会有一个定时器生效，若之前计时器还没结束就定义新定时器，会替代之前定时器并返回之前定时器结束前秒数，若之前计时器已完成返回0</li><li>参数设为0，会清空当前所有定时器，并不发起调用</li><li>定时器会中断系统，即便是sleep执行中</li></ul><a id="more"></a><hr><pre><code>&lt;?php
declare(ticks = 1);

function signal_handler($signal) {
    print &quot;Caught SIGALRM\n&quot;;
    echo pcntl_alarm(3).PHP_EOL;//再次调用
}

pcntl_signal(SIGALRM, &quot;signal_handler&quot;, true);
echo pcntl_alarm(5).PHP_EOL;//只会调用一次

echo pcntl_alarm(3).PHP_EOL;//提示5，因为上一个计时器完成还剩5s

while(1) {
    //
}
?&gt;
</code></pre><h2 id="pcntl-fork"><a href="#pcntl-fork" class="headerlink" title="pcntl_fork"></a>pcntl_fork</h2><p>创建子进程</p><ul><li>unix创建进程效率要比线程高，但需考虑进程数和内存等限制</li></ul><hr><pre><code>&lt;?php
$pid = pcntl_fork();

switch($pid) {
    case -1:
        print &quot;Could not fork!\n&quot;;
        exit;
    case 0://子进程
        print &quot;In child!\n&quot;;
        break;
    default://父进程，值代表子进程PID
        print &quot;In parent!\n&quot;;
}
?&gt;
</code></pre><h2 id="pcntl-waitpid"><a href="#pcntl-waitpid" class="headerlink" title="pcntl_waitpid"></a>pcntl_waitpid</h2><p>等待或返回fork的子进程状态<br>挂起当前进程的执行直到参数pid指定的进程号的进程退出， 或接收到一个信号要求中断当前进程或调用一个信号处理函数。<br>如果pid指定的子进程在此函数调用时已经退出（俗称僵尸进程），此函数 将立刻返回。<br><strong>pid可选值</strong></p><ul><li>小于-1 等待任意进程组ID等于参数pid给定值的绝对值的进程。</li><li>-1 等待任意子进程;与pcntl_wait函数行为一致。</li><li>0 等待任意与调用进程组ID相同的子进程。</li><li>大于0 等待进程号等于参数pid值的子进程。</li></ul><p><strong>options</strong></p><ul><li>WNOHANG 如果没有子进程退出立刻返回。</li><li>WUNTRACED 子进程已经退出并且其状态未报告时返回。</li></ul><p><a href="http://www.hackingwithphp.com/16/1/7/other-ways-to-evaluate-pcntl_waitpids-return-value" target="_blank" rel="external">其他方式去计算本函数的返回值</a></p><h2 id="pcntl-wexitstatus"><a href="#pcntl-wexitstatus" class="headerlink" title="pcntl_wexitstatus"></a>pcntl_wexitstatus</h2><p>检查状态代码是否代表一个正常的退出。</p><ul><li>进程共享内容</li></ul><hr><pre><code>&lt;?php
for ($i = 1; $i &lt;= 5; ++$i) {
    $pid = pcntl_fork();

    if (!$pid) {
        sleep(1);
        print &quot;In child $i\n&quot;;
        exit($i);
    }
}
while (pcntl_waitpid(0, $status) != -1) {
    $status = pcntl_wexitstatus($status);
    echo &quot;Child $status completed\n&quot;;
}
?&gt;
</code></pre><h2 id="SIGCHLD-父进程不阻塞"><a href="#SIGCHLD-父进程不阻塞" class="headerlink" title="SIGCHLD: 父进程不阻塞"></a>SIGCHLD: 父进程不阻塞</h2><p>SIGCHLD信号会在<strong>一个或多个</strong>子进程结束时向父进程通知<br>此时再加上pcntl_waitpid loop来让父进程及时回收全部结束的子进程</p><hr><pre><code>&lt;?php
declare(ticks = 1);

pcntl_signal(SIGCHLD, &quot;signal_handler&quot;);

function signal_handler($signal) {
    switch($signal) {
        case SIGCHLD:
            while (pcntl_waitpid(0, $status) != -1) {
                $status = pcntl_wexitstatus($status);
                echo &quot;Child $status completed\n&quot;;
            }

            exit;
    }
}

for ($i = 1; $i &lt;= 5; ++$i) {
    $pid = pcntl_fork();

    if (!$pid) {
        sleep(3);
        print &quot;In child $i\n&quot;;
        exit($i);
    }
}

while(1) {
    //下面的代码会在父进程执行
    echo &quot;parent processing here&quot;.PHP_EOL;
    sleep(1);
}
?&gt;
</code></pre><h2 id="pcntl-exec"><a href="#pcntl-exec" class="headerlink" title="pcntl_exec"></a>pcntl_exec</h2><p>调用程序执行，并取代自身</p><hr><pre><code>&lt;?php
print &quot;Before\n&quot;;
pcntl_exec(&quot;/usr/bin/uptime&quot;);
//下边不会输出
print &quot;After\n&quot;; 
?&gt;
</code></pre><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      php信号处理
    
    </summary>
    
      <category term="php" scheme="http://blog.newbmiao.com/categories/php/"/>
    
      <category term="signal" scheme="http://blog.newbmiao.com/categories/php/signal/"/>
    
    
      <category term="php" scheme="http://blog.newbmiao.com/tags/php/"/>
    
      <category term="pcntl" scheme="http://blog.newbmiao.com/tags/pcntl/"/>
    
      <category term="signal" scheme="http://blog.newbmiao.com/tags/signal/"/>
    
  </entry>
  
  <entry>
    <title>gearman分布式任务服务器学习记录</title>
    <link href="http://blog.newbmiao.com/2015/10/16/gearman-beginer-guide.html"/>
    <id>http://blog.newbmiao.com/2015/10/16/gearman-beginer-guide.html</id>
    <published>2015-10-16T13:18:33.000Z</published>
    <updated>2016-07-07T13:45:11.000Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Sat Feb 16 2019 19:45:46 GMT+0800 (中國標準時間) --><blockquote><p>以下是强大的gearman学习及安装记录，代码demo下边的来自网络的附录有很多可以参考。</p></blockquote><p>Gearman 是一套用来把程式需求委派给机器，提供通用的程序框架来将任务分发在机器运算。<br>它同时具备并行工作的能力、负载均衡处理的能力，以及在不同程序语言之间沟通的能力。</p><a id="more"></a><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="gearmand"><a href="#gearmand" class="headerlink" title="gearmand"></a>gearmand</h3><ul><li><a href="https://launchpad.net/gearmand" target="_blank" rel="external">gearmand-job server</a></li></ul><h4 id="安装gearmand依赖的库"><a href="#安装gearmand依赖的库" class="headerlink" title="安装gearmand依赖的库"></a>安装gearmand依赖的库</h4><pre><code>yum install -y boost-devel gperf libevent-devel libuuid-devel
</code></pre><h4 id="安装gearmand服务"><a href="#安装gearmand服务" class="headerlink" title="安装gearmand服务"></a>安装gearmand服务</h4><pre><code>tar xzf gearmand-1.1.12.tar.gz
cd gearmand-1.1.12
./configure
make
make install
</code></pre><h3 id="gearman"><a href="#gearman" class="headerlink" title="gearman"></a>gearman</h3><ul><li><a href="http://pecl.php.net/package/gearman" target="_blank" rel="external">php扩展</a></li></ul><h4 id="安装php扩展"><a href="#安装php扩展" class="headerlink" title="安装php扩展"></a>安装php扩展</h4><pre><code> tar xzf gearman-1.1.2.tgz
cd gearman-1.1.2
phpize
./configure
make
make install   

# 在php.ini中添加
extension=&quot;gearman.so&quot;
</code></pre><h3 id="gearman启动"><a href="#gearman启动" class="headerlink" title="gearman启动"></a>gearman启动</h3><pre><code> 1) 创建日志gearmand.log
# touch /pathto/logs/gearmand.log

2）启动
# /usr/local/sbin/gearmand -d -u root -L 192.168.142.130 --log-file=/pathto/logs/gearmand.log

3）参数详解
-b，--backlog= 储备的监听连接数量
-d, --daemon 后台运行
-f, --file-descriptors= 文件描述符的数量
-h, --help 帮助
-j, --job-retries= 在ob server移除不可用job之前运行的次数，防止不断运行导致其他可用worker崩溃。默认没有限制
-l, -log-file= 日志文件存放位置(默认记录最简单日志)
-L, --listen= 监听的IP，默认全部接受
-p, --port= 指定监听端口
-P, --pid-file= 指定进程ID写入位置
-r, --protocol= 加载协议模块
-q, --queue-type= 指定持久化队列
-t, --threads= 使用的I/9线程数量。默认为0
-u, --user= 启动后，切换到指定用户
-v, --verbose 增加一级详细程度
-V, --version 显示版本信息
</code></pre><p><strong>issue </strong>: /usr/local/sbin/gearmand: error while loading shared libraries: libmysqlclient.so.18: cannot open shared object file: No such file or directory</p><hr><p>解决方案：将对应lib链接到/usr/lib</p><pre><code>ln -s /home/vagrant/online/mysql5.6/lib/libmysqlclient.so.18  /usr/lib
ldconfig -v
</code></pre><h3 id="gearman部署"><a href="#gearman部署" class="headerlink" title="gearman部署"></a>gearman部署</h3><h4 id="启动gearmand"><a href="#启动gearmand" class="headerlink" title="启动gearmand"></a>启动gearmand</h4><ul><li><p>启动</p><pre><code>/usr/local/sbin/gearmand -d -u root -L 0.0.0.0 --log-file=/pathto/logs/gearmand.log
</code></pre></li><li>对应配置修改 common.conf &gt; gearman配置</li></ul><h4 id="启动worker"><a href="#启动worker" class="headerlink" title="启动worker"></a>启动worker</h4><ul><li><p>后台运行</p><pre><code>nohup php scripts/gearman_job/job.php &gt;/log/gearman.log &amp;
</code></pre></li><li><p>supervisor守护worker进程（推荐）</p></li></ul><pre><code>yum install supervisor
service supervisor start
service supervisor stop
#创建配置文件
/etc/supervisor/conf.d/gearmanwoker.conf:

[program:gearmanwoker]
command=php scripts/gearman_job/job.php
numprocs=12
directory=/dir_path/to/woker/
autostart=true
autorestart=true
stdout_logfile=/path/to/project/log/gearmanwoker.log
stdout_logfile_maxbytes=1MB
stderr_logfile=/path/to/project/log/gearmanwoker.log
stderr_logfile_maxbytes=1MB
</code></pre><blockquote><p>参见<a href="http://www.daredevel.com/php-jobs-with-gearman-and-supervisor/" target="_blank" rel="external">php-jobs-with-gearman-and-supervisor</a></p></blockquote><hr><p>update 2015 12-13</p><h2 id="worker管理：gearman-manager-（pecl-manger）"><a href="#worker管理：gearman-manager-（pecl-manger）" class="headerlink" title="worker管理：gearman manager （pecl_manger）"></a>worker管理：gearman manager （pecl_manger）</h2><h3 id="gearmanManager"><a href="#gearmanManager" class="headerlink" title="gearmanManager"></a>gearmanManager</h3><p><strong>配置中需指定host，pid及log等</strong></p><h4 id="启动manager-daemon"><a href="#启动manager-daemon" class="headerlink" title="启动manager daemon"></a>启动manager daemon</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">scripts/gearmanManager/bin/pecl_manager<span class="selector-class">.php</span> -c scripts/gearmanManager/etc/config<span class="selector-class">.ini</span>  -d -vvv</div></pre></td></tr></table></figure><h4 id="关闭"><a href="#关闭" class="headerlink" title="关闭"></a>关闭</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">#SIGINT</div><div class="line">kill <span class="number">-2</span> `cat gearman-manager.pid`</div></pre></td></tr></table></figure><h4 id="重启child（worker）"><a href="#重启child（worker）" class="headerlink" title="重启child（worker）"></a>重启child（worker）</h4><figure class="highlight clean"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"># SIGHUP</div><div class="line">kill <span class="number">-1</span> `cat gearman-manager.pid`</div></pre></td></tr></table></figure><h2 id="gearmand-queue-持久化（针对background任务）"><a href="#gearmand-queue-持久化（针对background任务）" class="headerlink" title="gearmand queue 持久化（针对background任务）"></a>gearmand queue 持久化（针对background任务）</h2><p>对于大量访问压力及server宕机都有好处</p><figure class="highlight haml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">sudo /usr/local/sbin/gearmand -d -u root -L 0.0.0.0 --log-file=/pathto/gearmand.log   --queue-type=MySQL \</div><div class="line">          -<span class="ruby">-mysql-host=localhost \</span></div><div class="line">          -<span class="ruby">-mysql-port=<span class="number">3306</span> \</span></div><div class="line">          -<span class="ruby">-mysql-user=root \</span></div><div class="line">          -<span class="ruby">-mysql-password=YOUR_PASSWORD \</span></div><div class="line">          -<span class="ruby">-mysql-db=qsc \</span></div><div class="line">          -<span class="ruby">-mysql-table=gearman_queue</span></div></pre></td></tr></table></figure><hr><blockquote><p>参考</p><p><strong>phpboy</strong></p><ul><li><a href="http://www.phpboy.net/2014-05/40-gearman-instruction.html" target="_blank" rel="external">Gearman调研/测试/原理分析</a></li></ul><p><strong>gearman</strong></p><ul><li><a href="http://gearman.info/index.html" target="_blank" rel="external">gearman.info</a></li><li><a href="http://gearman.org/" target="_blank" rel="external">gearman.org</a></li><li><a href="http://groups.google.com/group/gearman" target="_blank" rel="external">gearman google group</a></li></ul></blockquote><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      gearman分布式任务服务器学习记录
    
    </summary>
    
      <category term="gearman" scheme="http://blog.newbmiao.com/categories/gearman/"/>
    
    
      <category term="gearman" scheme="http://blog.newbmiao.com/tags/gearman/"/>
    
  </entry>
  
</feed>
